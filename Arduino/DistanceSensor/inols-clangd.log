






Started logging.

>>>
Content-Length: 2201

{"method":"initialize","params":{"processId":77642,"rootPath":"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch","rootUri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 1045

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup();\n#line 6 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid loop();\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 324

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":0}},"context":{"diagnostics":[]}},"id":1,"jsonrpc":"2.0"}Content-Length: 225

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7.4074074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7.4074074074074074}}}Content-Length: 234

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":1}}Content-Length: 36

{"id":1,"jsonrpc":"2.0","result":[]}Content-Length: 778

{"id":2,"jsonrpc":"2.0","result":[{"kind":12,"name":"setup","range":{"end":{"character":12,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":10,"line":3},"start":{"character":5,"line":3}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":9,"line":5},"start":{"character":5,"line":5}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":10},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":10,"line":7},"start":{"character":5,"line":7}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":15},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":9,"line":12},"start":{"character":5,"line":12}}}]}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11.111111111111111}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11.111111111111111}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14.814814814814815}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14.814814814814815}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18.518518518518519}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18.518518518518519}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22.222222222222221}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22.222222222222221}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25.925925925925927}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25.925925925925927}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29.62962962962963}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29.62962962962963}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33.333333333333336}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33.333333333333336}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37.037037037037038}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37.037037037037038}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40.74074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40.74074074074074}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44.444444444444443}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44.444444444444443}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48.148148148148145}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48.148148148148145}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51.851851851851855}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51.851851851851855}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55.555555555555557}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55.555555555555557}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59.25925925925926}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59.25925925925926}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62.962962962962962}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62.962962962962962}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66.666666666666671}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66.666666666666671}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70.370370370370367}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70.370370370370367}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/27","percentage":74.074074074074076}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/27","percentage":77.777777777777771}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/27","percentage":81.481481481481481}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/27","percentage":85.18518518518519}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/27","percentage":88.888888888888886}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/27","percentage":92.592592592592595}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/27","percentage":96.296296296296291}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 266

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":13,"character":37}},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":3,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 62

{"method":"$/cancelRequest","params":{"id":2},"jsonrpc":"2.0"}Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":10,"character":1},"end":{"line":10,"character":1}},"context":{"diagnostics":[]}},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":4,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":14,"character":0},"end":{"line":15,"character":1}},"context":{"diagnostics":[]}},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":5,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":15,"character":1},"end":{"line":15,"character":1}},"context":{"diagnostics":[]}},"id":6,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":6,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":10,"character":1},"end":{"line":10,"character":1}},"context":{"diagnostics":[]}},"id":7,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":7,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 265

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":8,"character":14}},"id":8,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":8,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":14}},"context":{"diagnostics":[]}},"id":9,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":9,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":2},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 234

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":2}}
>>>
Content-Length: 1051

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":3},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup();\n#line 6 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid loop();\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  \n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":4},"contentChanges":[{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":2}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 234

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":4}}
>>>
Content-Length: 253

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":7,"character":0}},"id":10,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":10,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":11,"jsonrpc":"2.0"}
<<<
Content-Length: 779

{"id":11,"jsonrpc":"2.0","result":[{"kind":12,"name":"setup","range":{"end":{"character":12,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":10,"line":3},"start":{"character":5,"line":3}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":9,"line":5},"start":{"character":5,"line":5}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":10},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":10,"line":7},"start":{"character":5,"line":7}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":15},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":9,"line":12},"start":{"character":5,"line":12}}}]}
>>>
Content-Length: 265

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":7,"character":0}},"id":12,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":12,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 325

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":0}},"context":{"diagnostics":[]}},"id":13,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":13,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 434

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":6},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":4}},"rangeLength":4,"text":""},{"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":0}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":1,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":1,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 234

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":6}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":7},"contentChanges":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":0}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 234

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":7}}
>>>
Content-Length: 325

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"context":{"diagnostics":[]}},"id":14,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":14,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 1053

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":8},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\n\n\n#line 3 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup();\n#line 8 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid loop();\n#line 3 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 331

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":9},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 234

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":8}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":10},"contentChanges":[{"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":1}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 401

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'co'","range":{"end":{"character":2,"line":2},"start":{"character":0,"line":2}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":10}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":11},"contentChanges":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":2}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 402

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'con'","range":{"end":{"character":3,"line":2},"start":{"character":0,"line":2}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":11}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":12},"contentChanges":[{"range":{"start":{"line":2,"character":3},"end":{"line":2,"character":3}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 805

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cons'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":2},"start":{"character":0,"line":2}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":5},"start":{"character":5,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":12}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":13},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 589

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":5},"start":{"character":5,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":13}}
>>>
Content-Length: 325

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":5}},"context":{"diagnostics":[]}},"id":15,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":15,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":16,"jsonrpc":"2.0"}
<<<
Content-Length: 779

{"id":16,"jsonrpc":"2.0","result":[{"kind":12,"name":"setup","range":{"end":{"character":12,"line":5},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":10,"line":5},"start":{"character":5,"line":5}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":9,"line":7},"start":{"character":5,"line":7}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":12},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":10,"line":9},"start":{"character":5,"line":9}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":17},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}}]}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":14},"contentChanges":[{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":5}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 589

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":5},"start":{"character":5,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":14}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":15},"contentChanges":[{"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":6}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 400

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'i'","range":{"end":{"character":7,"line":2},"start":{"character":6,"line":2}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":15}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":16},"contentChanges":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 401

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'in'","range":{"end":{"character":8,"line":2},"start":{"character":6,"line":2}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":16}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":17},"contentChanges":[{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":8}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 803

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'int' declaration specifier","range":{"end":{"character":4,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":5},"start":{"character":5,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":17}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":18},"contentChanges":[{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 803

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'int' declaration specifier","range":{"end":{"character":4,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":5},"start":{"character":5,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":18}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":19},"contentChanges":[{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":2,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":2,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 683

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":11,"line":2},"start":{"character":10,"line":2}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":19}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":20},"contentChanges":[{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":11}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 683

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":12,"line":2},"start":{"character":10,"line":2}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":20}}
>>>
Content-Length: 552

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":2,"character":12},"end":{"line":2,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":12}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"}]}},"id":17,"jsonrpc":"2.0"}
<<<
Content-Length: 587

{"id":17,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":12,"line":2},"start":{"character":10,"line":2}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":" = 0","range":{"end":{"character":12,"line":2},"start":{"character":12,"line":2}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ' = 0'"}]}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":21},"contentChanges":[{"range":{"start":{"line":2,"character":12},"end":{"line":2,"character":12}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 683

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":13,"line":2},"start":{"character":10,"line":2}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":21}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":22},"contentChanges":[{"range":{"start":{"line":2,"character":13},"end":{"line":2,"character":13}},"text":"g"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 683

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":14,"line":2},"start":{"character":10,"line":2}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":22}}
>>>
Content-Length: 552

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":2,"character":14},"end":{"line":2,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":14}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"}]}},"id":18,"jsonrpc":"2.0"}
<<<
Content-Length: 587

{"id":18,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":14,"line":2},"start":{"character":10,"line":2}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":" = 0","range":{"end":{"character":14,"line":2},"start":{"character":14,"line":2}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ' = 0'"}]}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":23},"contentChanges":[{"range":{"start":{"line":2,"character":14},"end":{"line":2,"character":14}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 683

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":15,"line":2},"start":{"character":10,"line":2}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":23}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":24},"contentChanges":[{"range":{"start":{"line":2,"character":15},"end":{"line":2,"character":15}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 683

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":16,"line":2},"start":{"character":10,"line":2}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":24}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":25},"contentChanges":[{"range":{"start":{"line":2,"character":16},"end":{"line":2,"character":16}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 683

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":25}}
>>>
Content-Length: 552

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":17}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"}]}},"id":19,"jsonrpc":"2.0"}
<<<
Content-Length: 587

{"id":19,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":" = 0","range":{"end":{"character":17,"line":2},"start":{"character":17,"line":2}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ' = 0'"}]}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":26},"contentChanges":[{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 683

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":26}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":27},"contentChanges":[{"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":18}},"text":"="}]},"jsonrpc":"2.0"}
<<<
Content-Length: 447

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":10,"line":5},"start":{"character":5,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":27}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":28},"contentChanges":[{"range":{"start":{"line":2,"character":19},"end":{"line":2,"character":19}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 447

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":10,"line":5},"start":{"character":5,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":28}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":29},"contentChanges":[{"range":{"start":{"line":2,"character":20},"end":{"line":2,"character":20}},"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 457

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":29}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":30},"contentChanges":[{"range":{"start":{"line":2,"character":21},"end":{"line":2,"character":21}},"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 457

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":30}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":31},"contentChanges":[{"range":{"start":{"line":2,"character":22},"end":{"line":2,"character":22}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":31}}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":2,"character":23},"end":{"line":2,"character":23}},"context":{"diagnostics":[]}},"id":20,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":20,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":32},"contentChanges":[{"range":{"start":{"line":2,"character":23},"end":{"line":2,"character":23}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":32}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":33},"contentChanges":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 400

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'c'","range":{"end":{"character":1,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":33}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":34},"contentChanges":[{"range":{"start":{"line":3,"character":1},"end":{"line":3,"character":1}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 401

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'co'","range":{"end":{"character":2,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":34}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":35},"contentChanges":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 402

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'con'","range":{"end":{"character":3,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":35}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":36},"contentChanges":[{"range":{"start":{"line":3,"character":3},"end":{"line":3,"character":3}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 805

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":6},"start":{"character":5,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":36}}
>>>
Content-Length: 540

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":4}},"context":{"diagnostics":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":4}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)"}]}},"id":21,"jsonrpc":"2.0"}
<<<
Content-Length: 587

{"id":21,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":"const","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'cont' to 'const'"}]}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":37},"contentChanges":[{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":4}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 805

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":6},"start":{"character":5,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":37}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":38},"contentChanges":[{"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":5}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'i'","range":{"end":{"character":6,"line":3},"start":{"character":5,"line":3}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":38}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":39},"contentChanges":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":6}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 617

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'in'","range":{"end":{"character":7,"line":3},"start":{"character":5,"line":3}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":39}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":40},"contentChanges":[{"range":{"start":{"line":3,"character":7},"end":{"line":3,"character":7}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1019

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"},{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'int' declaration specifier","range":{"end":{"character":4,"line":6},"start":{"character":0,"line":6}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":6},"start":{"character":5,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":40}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":41},"contentChanges":[{"range":{"start":{"line":3,"character":8},"end":{"line":3,"character":8}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1019

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"},{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'int' declaration specifier","range":{"end":{"character":4,"line":6},"start":{"character":0,"line":6}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":6},"start":{"character":5,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":41}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":42},"contentChanges":[{"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":9}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 898

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"},{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":10,"line":3},"start":{"character":9,"line":3}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":42}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":43},"contentChanges":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":10}},"text":"c"}]},"jsonrpc":"2.0"}Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":44},"contentChanges":[{"range":{"start":{"line":3,"character":11},"end":{"line":3,"character":11}},"text":"h"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 898

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"},{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":12,"line":3},"start":{"character":9,"line":3}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":44}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":45},"contentChanges":[{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 898

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"},{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":13,"line":3},"start":{"character":9,"line":3}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":45}}
>>>
Content-Length: 551

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":13}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"}]}},"id":22,"jsonrpc":"2.0"}
<<<
Content-Length: 586

{"id":22,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":13,"line":3},"start":{"character":9,"line":3}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":" = 0","range":{"end":{"character":13,"line":3},"start":{"character":13,"line":3}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ' = 0'"}]}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":46},"contentChanges":[{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":13}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 898

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"},{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":14,"line":3},"start":{"character":9,"line":3}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":46}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":47},"contentChanges":[{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":14}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 898

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"},{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":15,"line":3},"start":{"character":9,"line":3}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":47}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":48},"contentChanges":[{"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 898

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"},{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":16,"line":3},"start":{"character":9,"line":3}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":48}}
>>>
Content-Length: 551

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"context":{"diagnostics":[{"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":16}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"}]}},"id":23,"jsonrpc":"2.0"}
<<<
Content-Length: 586

{"id":23,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":16,"line":3},"start":{"character":9,"line":3}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":" = 0","range":{"end":{"character":16,"line":3},"start":{"character":16,"line":3}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ' = 0'"}]}
>>>
Content-Length: 266

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":3,"character":15}},"id":24,"jsonrpc":"2.0"}
<<<
Content-Length: 122

{"id":24,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":3},"start":{"character":9,"line":3}}}]}
>>>
Content-Length: 551

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":16}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"}]}},"id":25,"jsonrpc":"2.0"}
<<<
Content-Length: 586

{"id":25,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":16,"line":3},"start":{"character":9,"line":3}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":" = 0","range":{"end":{"character":16,"line":3},"start":{"character":16,"line":3}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ' = 0'"}]}
>>>
Content-Length: 265

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":3,"character":8}},"id":26,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":26,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 265

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":3,"character":4}},"id":27,"jsonrpc":"2.0"}
<<<
Content-Length: 122

{"id":27,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":3},"start":{"character":9,"line":3}}}]}
>>>
Content-Length: 540

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":3,"character":3},"end":{"line":3,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":4}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)"}]}},"id":28,"jsonrpc":"2.0"}
<<<
Content-Length: 587

{"id":28,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":"const","range":{"end":{"character":4,"line":3},"start":{"character":0,"line":3}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'cont' to 'const'"}]}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":49},"contentChanges":[{"range":{"start":{"line":3,"character":3},"end":{"line":3,"character":3}},"text":"s"}]},"jsonrpc":"2.0"}Content-Length: 265

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":3,"character":5}},"id":29,"jsonrpc":"2.0"}
<<<
Content-Length: 123

{"id":29,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}}]}Content-Length: 683

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":49}}
>>>
Content-Length: 265

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":3,"character":6}},"id":30,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":30,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 325

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":6}},"context":{"diagnostics":[]}},"id":31,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":31,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 266

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":3,"character":10}},"id":32,"jsonrpc":"2.0"}
<<<
Content-Length: 123

{"id":32,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}}]}
>>>
Content-Length: 552

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":17}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"}]}},"id":33,"jsonrpc":"2.0"}
<<<
Content-Length: 587

{"id":33,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":" = 0","range":{"end":{"character":17,"line":3},"start":{"character":17,"line":3}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ' = 0'"}]}
>>>
Content-Length: 552

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":17}},"context":{"diagnostics":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":17}},"severity":1,"code":"default_init_const","source":"clang","message":"Default initialization of an object of const type 'const int' (fix available)"}]}},"id":34,"jsonrpc":"2.0"}
<<<
Content-Length: 587

{"id":34,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":" = 0","range":{"end":{"character":17,"line":3},"start":{"character":17,"line":3}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ' = 0'"}]}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":50},"contentChanges":[{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":17}},"text":" "}]},"jsonrpc":"2.0"}Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":51},"contentChanges":[{"range":{"start":{"line":3,"character":18},"end":{"line":3,"character":18}},"text":"="}]},"jsonrpc":"2.0"}
<<<
Content-Length: 447

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":10,"line":6},"start":{"character":5,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":51}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":52},"contentChanges":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":19}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 447

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":10,"line":6},"start":{"character":5,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":52}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":53},"contentChanges":[{"range":{"start":{"line":3,"character":20},"end":{"line":3,"character":20}},"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 457

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":53}}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":3,"character":21},"end":{"line":3,"character":21}},"context":{"diagnostics":[]}},"id":35,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":35,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":54},"contentChanges":[{"range":{"start":{"line":3,"character":21},"end":{"line":3,"character":21}},"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 457

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":54}}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":3,"character":22},"end":{"line":3,"character":22}},"context":{"diagnostics":[]}},"id":36,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":36,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":55},"contentChanges":[{"range":{"start":{"line":3,"character":22},"end":{"line":3,"character":22}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":55}}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":3,"character":23},"end":{"line":3,"character":23}},"context":{"diagnostics":[]}},"id":37,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":37,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":56},"contentChanges":[{"range":{"start":{"line":3,"character":23},"end":{"line":3,"character":23}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":56}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":57},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"text":"\\"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 409

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":1,"line":9},"start":{"character":0,"line":9}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":57}}
>>>
Content-Length: 499

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":9,"character":1},"end":{"line":9,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":1}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]}},"id":38,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":38,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 347

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":58},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":1}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":58}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":59},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":59}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":60},"contentChanges":[{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":0}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 452

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cvoid'; did you mean 'void'? (fix available)","range":{"end":{"character":5,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":60}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":61},"contentChanges":[{"range":{"start":{"line":10,"character":1},"end":{"line":10,"character":1}},"text":"p"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 453

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cpvoid'; did you mean 'void'? (fix available)","range":{"end":{"character":6,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":61}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":62},"contentChanges":[{"range":{"start":{"line":10,"character":2},"end":{"line":10,"character":2}},"text":"m"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 408

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'cpmvoid'","range":{"end":{"character":7,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":62}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":63},"contentChanges":[{"range":{"start":{"line":10,"character":3},"end":{"line":10,"character":3}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 409

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'cpmsvoid'","range":{"end":{"character":8,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":63}}
>>>
Content-Length: 501

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":4}},"context":{"diagnostics":[{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":8}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'cpmsvoid'"}]}},"id":39,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":39,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 349

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":64},"contentChanges":[{"range":{"start":{"line":10,"character":3},"end":{"line":10,"character":4}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 408

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'cpmvoid'","range":{"end":{"character":7,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":64}}
>>>
Content-Length: 947

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":65},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\ncpm\n\n#line 11 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid loop();\n#line 6 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 347

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":66},"contentChanges":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 347

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":67},"contentChanges":[{"range":{"start":{"line":5,"character":1},"end":{"line":5,"character":2}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 497

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":5,"character":1},"end":{"line":5,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":8}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'cpmsvoid'"}]}},"id":40,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":40,"jsonrpc":"2.0","result":[]}Content-Length: 400

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'c'","range":{"end":{"character":1,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":67}}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":41,"jsonrpc":"2.0"}
<<<
Content-Length: 974

{"id":41,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":8},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":9,"line":8},"start":{"character":5,"line":8}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":13},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":10,"line":10},"start":{"character":5,"line":10}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":18},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":9,"line":15},"start":{"character":5,"line":15}}}]}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":68},"contentChanges":[{"range":{"start":{"line":5,"character":1},"end":{"line":5,"character":1}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 401

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'co'","range":{"end":{"character":2,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":68}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":69},"contentChanges":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'cos' (fix available)","range":{"end":{"character":3,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":69}}
>>>
Content-Length: 508

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":5,"character":3},"end":{"line":5,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":3}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'cos' (fix available)"}]}},"id":42,"jsonrpc":"2.0"}
<<<
Content-Length: 578

{"id":42,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'cos' (fix available)","range":{"end":{"character":3,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":1},"start":{"character":0,"line":1}}}]}},"isPreferred":true,"kind":"quickfix","title":"Add include <cmath> for symbol cos"}]}
>>>
Content-Length: 347

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":70},"contentChanges":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 401

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'co'","range":{"end":{"character":2,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":70}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":71},"contentChanges":[{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":2}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 402

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'con'","range":{"end":{"character":3,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":71}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":72},"contentChanges":[{"range":{"start":{"line":5,"character":3},"end":{"line":5,"character":3}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 804

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'cons'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":5},"start":{"character":0,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:155:6:\nnote: previous declaration is here","range":{"end":{"character":9,"line":8},"start":{"character":5,"line":8}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":72}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":73},"contentChanges":[{"range":{"start":{"line":5,"character":4},"end":{"line":5,"character":4}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 588

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:155:6:\nnote: previous declaration is here","range":{"end":{"character":9,"line":8},"start":{"character":5,"line":8}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":73}}
>>>
Content-Length: 325

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":5,"character":5},"end":{"line":5,"character":5}},"context":{"diagnostics":[]}},"id":43,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":43,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":74},"contentChanges":[{"range":{"start":{"line":5,"character":5},"end":{"line":5,"character":5}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":3,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":3,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 588

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:155:6:\nnote: previous declaration is here","range":{"end":{"character":9,"line":8},"start":{"character":5,"line":8}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":74}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":75},"contentChanges":[{"range":{"start":{"line":5,"character":6},"end":{"line":5,"character":6}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 400

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'r'","range":{"end":{"character":7,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":75}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":76},"contentChanges":[{"range":{"start":{"line":5,"character":7},"end":{"line":5,"character":7}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 401

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 're'","range":{"end":{"character":8,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":76}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":77},"contentChanges":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"text":"d"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 402

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'red'","range":{"end":{"character":9,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":77}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":78},"contentChanges":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":9}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'redP'","range":{"end":{"character":10,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":78}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":79},"contentChanges":[{"range":{"start":{"line":5,"character":10},"end":{"line":5,"character":10}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 405

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'redPi'","range":{"end":{"character":11,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":79}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":80},"contentChanges":[{"range":{"start":{"line":5,"character":11},"end":{"line":5,"character":11}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 406

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'redPin'","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":80}}
>>>
Content-Length: 498

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":5,"character":12},"end":{"line":5,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":5,"character":6},"end":{"line":5,"character":12}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'redPin'"}]}},"id":44,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":44,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":81},"contentChanges":[{"range":{"start":{"line":5,"character":12},"end":{"line":5,"character":12}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 406

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'redPin'","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":81}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":82},"contentChanges":[{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":13}},"text":"="}]},"jsonrpc":"2.0"}
<<<
Content-Length: 648

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":9,"line":8},"start":{"character":5,"line":8}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":82}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":83},"contentChanges":[{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":14}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 648

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":9,"line":8},"start":{"character":5,"line":8}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":83}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":84},"contentChanges":[{"range":{"start":{"line":5,"character":15},"end":{"line":5,"character":15}},"text":"3"}]},"jsonrpc":"2.0"}Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":85},"contentChanges":[{"range":{"start":{"line":5,"character":16},"end":{"line":5,"character":16}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":85}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":86},"contentChanges":[{"range":{"start":{"line":5,"character":17},"end":{"line":5,"character":17}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":86}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":87},"contentChanges":[{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":0}},"text":"c"}]},"jsonrpc":"2.0"}Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":88},"contentChanges":[{"range":{"start":{"line":6,"character":1},"end":{"line":6,"character":1}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 603

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'co'","range":{"end":{"character":2,"line":6},"start":{"character":0,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":88}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":89},"contentChanges":[{"range":{"start":{"line":6,"character":2},"end":{"line":6,"character":2}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 604

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'con'","range":{"end":{"character":3,"line":6},"start":{"character":0,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":89}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":90},"contentChanges":[{"range":{"start":{"line":6,"character":3},"end":{"line":6,"character":3}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1006

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename_suggest","message":"Unknown type name 'cons'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":6},"start":{"character":0,"line":6}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:155:6:\nnote: previous declaration is here","range":{"end":{"character":9,"line":9},"start":{"character":5,"line":9}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":90}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":91},"contentChanges":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":4}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 790

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:155:6:\nnote: previous declaration is here","range":{"end":{"character":9,"line":9},"start":{"character":5,"line":9}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":91}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":92},"contentChanges":[{"range":{"start":{"line":6,"character":5},"end":{"line":6,"character":5}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 790

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:155:6:\nnote: previous declaration is here","range":{"end":{"character":9,"line":9},"start":{"character":5,"line":9}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":92}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":93},"contentChanges":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":6}},"text":"g"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 602

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'g'","range":{"end":{"character":7,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":93}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":94},"contentChanges":[{"range":{"start":{"line":6,"character":7},"end":{"line":6,"character":7}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 603

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'gr'","range":{"end":{"character":8,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":94}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":95},"contentChanges":[{"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":8}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 604

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'gre'","range":{"end":{"character":9,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":95}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":96},"contentChanges":[{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 606

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'gree'","range":{"end":{"character":10,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":96}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":97},"contentChanges":[{"range":{"start":{"line":6,"character":10},"end":{"line":6,"character":10}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 607

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'green'","range":{"end":{"character":11,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":97}}
>>>
Content-Length: 497

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":6,"character":11},"end":{"line":6,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":11}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'green'"}]}},"id":45,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":45,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":98},"contentChanges":[{"range":{"start":{"line":6,"character":11},"end":{"line":6,"character":11}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 608

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'greenP'","range":{"end":{"character":12,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":98}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":99},"contentChanges":[{"range":{"start":{"line":6,"character":12},"end":{"line":6,"character":12}},"text":"u"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 609

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'greenPu'","range":{"end":{"character":13,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":99}}
>>>
Content-Length: 499

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":13}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'greenPu'"}]}},"id":46,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":46,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":100},"contentChanges":[{"range":{"start":{"line":6,"character":12},"end":{"line":6,"character":13}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 609

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'greenP'","range":{"end":{"character":12,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":100}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":101},"contentChanges":[{"range":{"start":{"line":6,"character":12},"end":{"line":6,"character":12}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 610

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'greenPi'","range":{"end":{"character":13,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":101}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":102},"contentChanges":[{"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":13}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'greenPin'","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":102}}
>>>
Content-Length: 500

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":6,"character":14},"end":{"line":6,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":14}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'greenPin'"}]}},"id":47,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":47,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":103},"contentChanges":[{"range":{"start":{"line":6,"character":14},"end":{"line":6,"character":14}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'greenPin'","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":103}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":104},"contentChanges":[{"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":15}},"text":"="}]},"jsonrpc":"2.0"}
<<<
Content-Length: 851

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":9,"line":9},"start":{"character":5,"line":9}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":104}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":105},"contentChanges":[{"range":{"start":{"line":6,"character":16},"end":{"line":6,"character":16}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 851

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":9,"line":9},"start":{"character":5,"line":9}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":105}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":106},"contentChanges":[{"range":{"start":{"line":6,"character":17},"end":{"line":6,"character":17}},"text":"5"}]},"jsonrpc":"2.0"}Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":107},"contentChanges":[{"range":{"start":{"line":6,"character":18},"end":{"line":6,"character":18}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 639

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":107}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":108},"contentChanges":[{"range":{"start":{"line":6,"character":19},"end":{"line":6,"character":19}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 639

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":108}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":109},"contentChanges":[{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":0}},"text":"c"}]},"jsonrpc":"2.0"}Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":110},"contentChanges":[{"range":{"start":{"line":10,"character":1},"end":{"line":10,"character":1}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 857

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"},{"code":"unknown_typename_suggest","message":"Unknown type name 'cvoid'; did you mean 'void'? (fix available)","range":{"end":{"character":5,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":109}}Content-Length: 858

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"},{"code":"unknown_typename_suggest","message":"Unknown type name 'covoid'; did you mean 'void'? (fix available)","range":{"end":{"character":6,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":110}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":111},"contentChanges":[{"range":{"start":{"line":10,"character":2},"end":{"line":10,"character":2}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 813

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'convoid'","range":{"end":{"character":7,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":111}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":112},"contentChanges":[{"range":{"start":{"line":10,"character":3},"end":{"line":10,"character":3}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 814

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'contvoid'","range":{"end":{"character":8,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":112}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":113},"contentChanges":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":4}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1215

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"},{"code":"unknown_typename_suggest","message":"Unknown type name 'cont'; did you mean 'const'? (fix available)","range":{"end":{"character":4,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:155:6:\nnote: previous declaration is here","range":{"end":{"character":14,"line":10},"start":{"character":10,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":113}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":114},"contentChanges":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 814

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'contvoid'","range":{"end":{"character":8,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":114}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":115},"contentChanges":[{"range":{"start":{"line":10,"character":3},"end":{"line":10,"character":4}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 813

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'convoid'","range":{"end":{"character":7,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":115}}
>>>
Content-Length: 500

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":10,"character":3},"end":{"line":10,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":7}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'convoid'"}]}},"id":48,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":48,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":116},"contentChanges":[{"range":{"start":{"line":10,"character":3},"end":{"line":10,"character":3}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 814

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'consvoid'","range":{"end":{"character":8,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":116}}
>>>
Content-Length: 501

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":4}},"context":{"diagnostics":[{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":8}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'consvoid'"}]}},"id":49,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":49,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":117},"contentChanges":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":4}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 815

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":6},"start":{"character":6,"line":6}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'constvoid'","range":{"end":{"character":9,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":117}}
>>>
Content-Length: 1159

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":118},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst redPin = 3;\n#line 5 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nconst void setup();\n#line 13 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid loop();\n#line 5 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nconst greenPin = 5;\nconst\n\nvoid setup() {\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 502

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":12,"character":5},"end":{"line":12,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":9}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'constvoid'"}]}},"id":50,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":50,"jsonrpc":"2.0","result":[]}Content-Length: 1354

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":14},"start":{"character":5,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":118}}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":51,"jsonrpc":"2.0"}
<<<
Content-Length: 1541

{"id":51,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":12,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}}},{"kind":12,"name":"setup","range":{"end":{"character":18,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":9,"line":9},"start":{"character":5,"line":9}}},{"kind":13,"name":"greenPin","range":{"end":{"character":14,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":17},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":22},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":9,"line":19},"start":{"character":5,"line":19}}}]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":119},"contentChanges":[{"range":{"start":{"line":12,"character":5},"end":{"line":12,"character":5}},"text":" "}]},"jsonrpc":"2.0"}Content-Length: 63

{"method":"$/cancelRequest","params":{"id":46},"jsonrpc":"2.0"}
<<<
Content-Length: 1354

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":14},"start":{"character":5,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":119}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":120},"contentChanges":[{"range":{"start":{"line":12,"character":6},"end":{"line":12,"character":6}},"text":"b"}]},"jsonrpc":"2.0"}Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":121},"contentChanges":[{"range":{"start":{"line":12,"character":7},"end":{"line":12,"character":7}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1166

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'bl'","range":{"end":{"character":8,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":121}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":122},"contentChanges":[{"range":{"start":{"line":12,"character":8},"end":{"line":12,"character":8}},"text":"u"}]},"jsonrpc":"2.0"}Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":123},"contentChanges":[{"range":{"start":{"line":12,"character":9},"end":{"line":12,"character":9}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1169

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'blue'","range":{"end":{"character":10,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":123}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":124},"contentChanges":[{"range":{"start":{"line":12,"character":10},"end":{"line":12,"character":10}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1170

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'blueP'","range":{"end":{"character":11,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":124}}
>>>
Content-Length: 501

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":12,"character":11},"end":{"line":12,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":12,"character":6},"end":{"line":12,"character":11}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'blueP'"}]}},"id":52,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":52,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":125},"contentChanges":[{"range":{"start":{"line":12,"character":11},"end":{"line":12,"character":11}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":4,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":4,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 1171

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'bluePi'","range":{"end":{"character":12,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":125}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":126},"contentChanges":[{"range":{"start":{"line":12,"character":12},"end":{"line":12,"character":12}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1172

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'bluePin'","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":126}}
>>>
Content-Length: 503

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":12,"character":13},"end":{"line":12,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":12,"character":6},"end":{"line":12,"character":13}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'bluePin'"}]}},"id":53,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":53,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":127},"contentChanges":[{"range":{"start":{"line":12,"character":13},"end":{"line":12,"character":13}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1172

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'bluePin'","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":127}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":128},"contentChanges":[{"range":{"start":{"line":12,"character":14},"end":{"line":12,"character":14}},"text":"="}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1641

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":10,"line":14},"start":{"character":5,"line":14}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":0,"line":24},"start":{"character":0,"line":24}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":128}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":129},"contentChanges":[{"range":{"start":{"line":12,"character":15},"end":{"line":12,"character":15}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1641

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"},{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":10,"line":14},"start":{"character":5,"line":14}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":0,"line":24},"start":{"character":0,"line":24}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":129}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":130},"contentChanges":[{"range":{"start":{"line":12,"character":16},"end":{"line":12,"character":16}},"text":"6"}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":131},"contentChanges":[{"range":{"start":{"line":12,"character":17},"end":{"line":12,"character":17}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1426

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":130}}Content-Length: 1201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":131}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":12,"character":18},"end":{"line":12,"character":18}},"context":{"diagnostics":[]}},"id":54,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":54,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 265

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":5,"character":6}},"id":55,"jsonrpc":"2.0"}
<<<
Content-Length: 122

{"id":55,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":12,"line":5},"start":{"character":6,"line":5}}}]}
>>>
Content-Length: 526

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":5,"character":6},"end":{"line":5,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":5,"character":6},"end":{"line":5,"character":12}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]}},"id":56,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":56,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":132},"contentChanges":[{"range":{"start":{"line":5,"character":6},"end":{"line":5,"character":6}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":132}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":133},"contentChanges":[{"range":{"start":{"line":5,"character":7},"end":{"line":5,"character":7}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":133}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":134},"contentChanges":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":15,"line":5},"start":{"character":6,"line":5}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":134}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":135},"contentChanges":[{"range":{"start":{"line":5,"character":9},"end":{"line":5,"character":9}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 999

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":135}}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":5,"character":10},"end":{"line":5,"character":10}},"context":{"diagnostics":[]}},"id":57,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":57,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":11,"character":10}},"id":58,"jsonrpc":"2.0"}
<<<
Content-Length: 124

{"id":58,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}}]}
>>>
Content-Length: 532

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":11,"character":10},"end":{"line":11,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":14}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]}},"id":59,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":59,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 530

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":14}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]}},"id":60,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":60,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":136},"contentChanges":[{"range":{"start":{"line":11,"character":6},"end":{"line":11,"character":6}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 999

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":15,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":136}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":137},"contentChanges":[{"range":{"start":{"line":11,"character":7},"end":{"line":11,"character":7}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 999

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":16,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":137}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":138},"contentChanges":[{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":8}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 999

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":17,"line":11},"start":{"character":6,"line":11}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":138}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":139},"contentChanges":[{"range":{"start":{"line":11,"character":9},"end":{"line":11,"character":9}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 795

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":16,"line":7},"start":{"character":11,"line":7}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":139}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":11,"character":10},"end":{"line":11,"character":10}},"context":{"diagnostics":[]}},"id":61,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":61,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":12,"character":10}},"id":62,"jsonrpc":"2.0"}
<<<
Content-Length: 124

{"id":62,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":13,"line":12},"start":{"character":6,"line":12}}}]}
>>>
Content-Length: 532

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":12,"character":10},"end":{"line":12,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":12,"character":6},"end":{"line":12,"character":13}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]}},"id":63,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":63,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 1174

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":140},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst bluePin = 6;\n\n#line 8 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup();\n#line 13 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid loop();\n#line 8 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 526

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":13}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]}},"id":64,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":64,"jsonrpc":"2.0","result":[]}Content-Length: 437

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":13,"line":7},"start":{"character":6,"line":7}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":140}}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":65,"jsonrpc":"2.0"}
<<<
Content-Length: 1734

{"id":65,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":13,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":13,"line":7},"start":{"character":6,"line":7}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":10,"line":10},"start":{"character":5,"line":10}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":9,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":17},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":10,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":22},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":9,"line":19},"start":{"character":5,"line":19}}}]}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":141},"contentChanges":[{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":6}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 437

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":7},"start":{"character":6,"line":7}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":141}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":142},"contentChanges":[{"range":{"start":{"line":7,"character":7},"end":{"line":7,"character":7}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 437

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":15,"line":7},"start":{"character":6,"line":7}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":142}}
>>>
Content-Length: 526

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":15}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"}]}},"id":66,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":66,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 348

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":143},"contentChanges":[{"range":{"start":{"line":7,"character":7},"end":{"line":7,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":5,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":5,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 437

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":14,"line":7},"start":{"character":6,"line":7}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":143}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":144},"contentChanges":[{"range":{"start":{"line":7,"character":7},"end":{"line":7,"character":7}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 437

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":15,"line":7},"start":{"character":6,"line":7}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":144}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":145},"contentChanges":[{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 437

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":16,"line":7},"start":{"character":6,"line":7}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":145}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":146},"contentChanges":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":9}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":146}}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":7,"character":10},"end":{"line":7,"character":10}},"context":{"diagnostics":[]}},"id":67,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":67,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":147},"contentChanges":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":0}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":147}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":148},"contentChanges":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":0}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":148}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":149},"contentChanges":[{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"text":"f"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 453

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'fvoid'; did you mean 'void'? (fix available)","range":{"end":{"character":5,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":149}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":150},"contentChanges":[{"range":{"start":{"line":14,"character":1},"end":{"line":14,"character":1}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 454

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'flvoid'; did you mean 'void'? (fix available)","range":{"end":{"character":6,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":150}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":151},"contentChanges":[{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":2}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 409

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'flovoid'","range":{"end":{"character":7,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":151}}
>>>
Content-Length: 500

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":14,"character":3},"end":{"line":14,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":7}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'flovoid'"}]}},"id":68,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":68,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":152},"contentChanges":[{"range":{"start":{"line":14,"character":3},"end":{"line":14,"character":3}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 410

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'floavoid'","range":{"end":{"character":8,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":152}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":153},"contentChanges":[{"range":{"start":{"line":14,"character":4},"end":{"line":14,"character":4}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 411

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'floatvoid'","range":{"end":{"character":9,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":153}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":154},"contentChanges":[{"range":{"start":{"line":14,"character":5},"end":{"line":14,"character":5}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 812

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'float' declaration specifier","range":{"end":{"character":10,"line":14},"start":{"character":6,"line":14}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:155:6:\nnote: previous declaration is here","range":{"end":{"character":15,"line":14},"start":{"character":11,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":154}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":155},"contentChanges":[{"range":{"start":{"line":14,"character":6},"end":{"line":14,"character":6}},"text":"d"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":16,"line":14},"start":{"character":12,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":155}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":156},"contentChanges":[{"range":{"start":{"line":14,"character":7},"end":{"line":14,"character":7}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":17,"line":14},"start":{"character":13,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":156}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":157},"contentChanges":[{"range":{"start":{"line":14,"character":7},"end":{"line":14,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":16,"line":14},"start":{"character":12,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":157}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":158},"contentChanges":[{"range":{"start":{"line":14,"character":7},"end":{"line":14,"character":7}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":17,"line":14},"start":{"character":13,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":158}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":159},"contentChanges":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":8}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":18,"line":14},"start":{"character":14,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":159}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":160},"contentChanges":[{"range":{"start":{"line":14,"character":9},"end":{"line":14,"character":9}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":19,"line":14},"start":{"character":15,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":160}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":161},"contentChanges":[{"range":{"start":{"line":14,"character":10},"end":{"line":14,"character":10}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":20,"line":14},"start":{"character":16,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":161}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":162},"contentChanges":[{"range":{"start":{"line":14,"character":11},"end":{"line":14,"character":11}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":21,"line":14},"start":{"character":17,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":162}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":14,"character":12},"end":{"line":14,"character":12}},"context":{"diagnostics":[]}},"id":69,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":69,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":163},"contentChanges":[{"range":{"start":{"line":14,"character":12},"end":{"line":14,"character":12}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":22,"line":14},"start":{"character":18,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":163}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":14,"character":13},"end":{"line":14,"character":13}},"context":{"diagnostics":[]}},"id":70,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":70,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":164},"contentChanges":[{"range":{"start":{"line":14,"character":12},"end":{"line":14,"character":13}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":21,"line":14},"start":{"character":17,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":164}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":165},"contentChanges":[{"range":{"start":{"line":14,"character":12},"end":{"line":14,"character":12}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":22,"line":14},"start":{"character":18,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":165}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":166},"contentChanges":[{"range":{"start":{"line":14,"character":13},"end":{"line":14,"character":13}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":23,"line":14},"start":{"character":19,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":166}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":14,"character":14},"end":{"line":14,"character":14}},"context":{"diagnostics":[]}},"id":71,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":71,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 1210

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":167},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n#line 7 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nfloat distancevoid setup();\n#line 15 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid loop();\n#line 7 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\n\nfloat distance\n\nvoid setup() {\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":168},"contentChanges":[{"range":{"start":{"line":14,"character":14},"end":{"line":14,"character":14}},"text":" "}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":169},"contentChanges":[{"range":{"start":{"line":14,"character":15},"end":{"line":14,"character":15}},"text":"="}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":170},"contentChanges":[{"range":{"start":{"line":14,"character":16},"end":{"line":14,"character":16}},"text":" "}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":171},"contentChanges":[{"range":{"start":{"line":14,"character":17},"end":{"line":14,"character":17}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":6,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":6,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 685

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":4,"line":16},"start":{"character":0,"line":16}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":171}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":172},"contentChanges":[{"range":{"start":{"line":14,"character":18},"end":{"line":14,"character":18}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":172}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"context":{"diagnostics":[]}},"id":72,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":72,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":73,"jsonrpc":"2.0"}
<<<
Content-Length: 1931

{"id":73,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distancevoid","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":9,"line":11},"start":{"character":5,"line":11}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":14,"line":14},"start":{"character":6,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":24},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":9,"line":21},"start":{"character":5,"line":21}}}]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":22,"character":26}},"id":74,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":74,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":173},"contentChanges":[{"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":0}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":173}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":174},"contentChanges":[{"range":{"start":{"line":18,"character":2},"end":{"line":18,"character":2}},"text":"S"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 641

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S'","range":{"end":{"character":3,"line":18},"start":{"character":2,"line":18}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":174}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":175},"contentChanges":[{"range":{"start":{"line":18,"character":3},"end":{"line":18,"character":3}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 642

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Se'","range":{"end":{"character":4,"line":18},"start":{"character":2,"line":18}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":175}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":176},"contentChanges":[{"range":{"start":{"line":18,"character":4},"end":{"line":18,"character":4}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":177},"contentChanges":[{"range":{"start":{"line":18,"character":5},"end":{"line":18,"character":5}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 643

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Ser'","range":{"end":{"character":5,"line":18},"start":{"character":2,"line":18}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":176}}Content-Length: 644

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Seri'","range":{"end":{"character":6,"line":18},"start":{"character":2,"line":18}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":177}}
>>>
Content-Length: 510

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":18,"character":6},"end":{"line":18,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":18,"character":2},"end":{"line":18,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Seri'"}]}},"id":75,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":75,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":76,"jsonrpc":"2.0"}
<<<
Content-Length: 1931

{"id":76,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distancevoid","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":9,"line":11},"start":{"character":5,"line":11}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":14,"line":14},"start":{"character":6,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":24},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":9,"line":21},"start":{"character":5,"line":21}}}]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":178},"contentChanges":[{"range":{"start":{"line":18,"character":6},"end":{"line":18,"character":6}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1032

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'Seria'; did you mean 'Serial'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:143:25:\nnote: 'Serial' declared here","range":{"end":{"character":7,"line":18},"start":{"character":2,"line":18}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":19}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":178}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":179},"contentChanges":[{"range":{"start":{"line":18,"character":7},"end":{"line":18,"character":7}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":19}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":179}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":180},"contentChanges":[{"range":{"start":{"line":18,"character":8},"end":{"line":18,"character":8}},"text":"."}]},"jsonrpc":"2.0"}Content-Length: 310

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":18,"character":9},"context":{"triggerKind":2,"triggerCharacter":"."}},"id":77,"jsonrpc":"2.0"}
<<<
Content-Length: 7848

{"id":77,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"void","filterText":"_rx_complete_irq","insertText":"_rx_complete_irq()","insertTextFormat":2,"kind":2,"label":" _rx_complete_irq()","score":9.6800003051757812,"sortText":"3ee51eb8_rx_complete_irq","textEdit":{"newText":"_rx_complete_irq()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"void","filterText":"_tx_udr_empty_irq","insertText":"_tx_udr_empty_irq()","insertTextFormat":2,"kind":2,"label":" _tx_udr_empty_irq()","score":9.6800003051757812,"sortText":"3ee51eb8_tx_udr_empty_irq","textEdit":{"newText":"_tx_udr_empty_irq()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"int","filterText":"available","insertText":"available()","insertTextFormat":2,"kind":2,"label":" available()","score":9.6800003051757812,"sortText":"3ee51eb8available","textEdit":{"newText":"available()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"int","filterText":"availableForWrite","insertText":"availableForWrite()","insertTextFormat":2,"kind":2,"label":" availableForWrite()","score":9.6800003051757812,"sortText":"3ee51eb8availableForWrite","textEdit":{"newText":"availableForWrite()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"[2 overloads]","filterText":"begin","insertText":"begin($0)","insertTextFormat":2,"kind":2,"label":" begin(…)","score":9.6800003051757812,"sortText":"3ee51eb8begin","textEdit":{"newText":"begin($0)","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"void","filterText":"end","insertText":"end()","insertTextFormat":2,"kind":2,"label":" end()","score":9.6800003051757812,"sortText":"3ee51eb8end","textEdit":{"newText":"end()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"void","filterText":"flush","insertText":"flush()","insertTextFormat":2,"kind":2,"label":" flush()","score":9.6800003051757812,"sortText":"3ee51eb8flush","textEdit":{"newText":"flush()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"int","filterText":"peek","insertText":"peek()","insertTextFormat":2,"kind":2,"label":" peek()","score":9.6800003051757812,"sortText":"3ee51eb8peek","textEdit":{"newText":"peek()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"int","filterText":"read","insertText":"read()","insertTextFormat":2,"kind":2,"label":" read()","score":9.6800003051757812,"sortText":"3ee51eb8read","textEdit":{"newText":"read()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"[5 overloads]","filterText":"write","insertText":"write($0)","insertTextFormat":2,"kind":2,"label":" write(…)","score":9.6800003051757812,"sortText":"3ee51eb8write","textEdit":{"newText":"write($0)","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"[3 overloads]","filterText":"write","insertText":"write($0)","insertTextFormat":2,"kind":2,"label":" write(…)","score":9.6800003051757812,"sortText":"3ee51eb8write","textEdit":{"newText":"write($0)","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"void","filterText":"clearWriteError","insertText":"clearWriteError()","insertTextFormat":2,"kind":2,"label":" clearWriteError()","score":4.8400001525878906,"sortText":"3f651eb8clearWriteError","textEdit":{"newText":"clearWriteError()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"[5 overloads]","filterText":"find","insertText":"find($0)","insertTextFormat":2,"kind":2,"label":" find(…)","score":4.8400001525878906,"sortText":"3f651eb8find","textEdit":{"newText":"find($0)","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"[4 overloads]","filterText":"findUntil","insertText":"findUntil($0)","insertTextFormat":2,"kind":2,"label":" findUntil(…)","score":4.8400001525878906,"sortText":"3f651eb8findUntil","textEdit":{"newText":"findUntil($0)","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"unsigned long","filterText":"getTimeout","insertText":"getTimeout()","insertTextFormat":2,"kind":2,"label":" getTimeout()","score":4.8400001525878906,"sortText":"3f651eb8getTimeout","textEdit":{"newText":"getTimeout()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"int","filterText":"getWriteError","insertText":"getWriteError()","insertTextFormat":2,"kind":2,"label":" getWriteError()","score":4.8400001525878906,"sortText":"3f651eb8getWriteError","textEdit":{"newText":"getWriteError()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"float","filterText":"parseFloat","insertText":"parseFloat()","insertTextFormat":2,"kind":2,"label":" parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR)","score":4.8400001525878906,"sortText":"3f651eb8parseFloat","textEdit":{"newText":"parseFloat()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"long","filterText":"parseInt","insertText":"parseInt()","insertTextFormat":2,"kind":2,"label":" parseInt(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR)","score":4.8400001525878906,"sortText":"3f651eb8parseInt","textEdit":{"newText":"parseInt()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"[11 overloads]","filterText":"print","insertText":"print($0)","insertTextFormat":2,"kind":2,"label":" print(…)","score":4.8400001525878906,"sortText":"3f651eb8print","textEdit":{"newText":"print($0)","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"[12 overloads]","filterText":"println","insertText":"println($0)","insertTextFormat":2,"kind":2,"label":" println(…)","score":4.8400001525878906,"sortText":"3f651eb8println","textEdit":{"newText":"println($0)","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"[2 overloads]","filterText":"readBytes","insertText":"readBytes($0)","insertTextFormat":2,"kind":2,"label":" readBytes(…)","score":4.8400001525878906,"sortText":"3f651eb8readBytes","textEdit":{"newText":"readBytes($0)","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"[2 overloads]","filterText":"readBytesUntil","insertText":"readBytesUntil($0)","insertTextFormat":2,"kind":2,"label":" readBytesUntil(…)","score":4.8400001525878906,"sortText":"3f651eb8readBytesUntil","textEdit":{"newText":"readBytesUntil($0)","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"String","filterText":"readString","insertText":"readString()","insertTextFormat":2,"kind":2,"label":" readString()","score":4.8400001525878906,"sortText":"3f651eb8readString","textEdit":{"newText":"readString()","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"String","filterText":"readStringUntil","insertText":"readStringUntil(${1:char terminator})","insertTextFormat":2,"kind":2,"label":" readStringUntil(char terminator)","score":4.8400001525878906,"sortText":"3f651eb8readStringUntil","textEdit":{"newText":"readStringUntil(${1:char terminator})","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}},{"detail":"void","filterText":"setTimeout","insertText":"setTimeout(${1:unsigned long timeout})","insertTextFormat":2,"kind":2,"label":" setTimeout(unsigned long timeout)","score":4.8400001525878906,"sortText":"3f651eb8setTimeout","textEdit":{"newText":"setTimeout(${1:unsigned long timeout})","range":{"end":{"character":9,"line":18},"start":{"character":9,"line":18}}}}]}}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":78,"jsonrpc":"2.0"}
<<<
Content-Length: 1931

{"id":78,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distancevoid","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":9,"line":11},"start":{"character":5,"line":11}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":14,"line":14},"start":{"character":6,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":24},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":9,"line":21},"start":{"character":5,"line":21}}}]}Content-Length: 637

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":19}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":180}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":181},"contentChanges":[{"range":{"start":{"line":18,"character":9},"end":{"line":18,"character":9}},"text":"b"}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":182},"contentChanges":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":10}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 841

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'be' in 'HardwareSerial'","range":{"end":{"character":11,"line":18},"start":{"character":9,"line":18}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":19}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":182}}
>>>
Content-Length: 509

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":18,"character":11},"end":{"line":18,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'be' in 'HardwareSerial'"}]}},"id":79,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":79,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":183},"contentChanges":[{"range":{"start":{"line":18,"character":11},"end":{"line":18,"character":11}},"text":"g"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 842

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'beg' in 'HardwareSerial'","range":{"end":{"character":12,"line":18},"start":{"character":9,"line":18}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":19}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":183}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":184},"contentChanges":[{"range":{"start":{"line":18,"character":12},"end":{"line":18,"character":12}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 843

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":19}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'begi' in 'HardwareSerial'","range":{"end":{"character":13,"line":18},"start":{"character":9,"line":18}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":184}}
>>>
Content-Length: 511

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":18,"character":13},"end":{"line":18,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":18,"character":9},"end":{"line":18,"character":13}},"severity":1,"code":"no_member","source":"clang","message":"No member named 'begi' in 'HardwareSerial'"}]}},"id":80,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":80,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":185},"contentChanges":[{"range":{"start":{"line":18,"character":13},"end":{"line":18,"character":13}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1149

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":19}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:121:10:\nnote: possible target for call\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:122:10:\nnote: possible target for call","range":{"end":{"character":14,"line":18},"start":{"character":2,"line":18}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":185}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":186},"contentChanges":[{"range":{"start":{"line":18,"character":14},"end":{"line":18,"character":14}},"text":"()"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1276

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"ovl_no_viable_member_function_in_call","message":"No matching member function for call to 'begin'\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:121:10:\nnote: candidate function not viable: requires single argument 'baud', but no arguments were provided\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:122:10:\nnote: candidate function not viable: requires 2 arguments, but 0 were provided","range":{"end":{"character":14,"line":18},"start":{"character":2,"line":18}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":19}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":186}}
>>>
Content-Length: 263

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":18,"character":15}},"id":81,"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"id":81,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[{"label":"begin(unsigned long baud) -> void","parameters":[{"label":[6,24]}]},{"label":"begin(unsigned long, uint8_t) -> void","parameters":[{"label":[6,19]},{"label":[21,28]}]}]}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":18,"character":15},"end":{"line":18,"character":15}},"context":{"diagnostics":[]}},"id":82,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":82,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":187},"contentChanges":[{"range":{"start":{"line":18,"character":15},"end":{"line":18,"character":15}},"text":"9"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":19}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":187}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":18,"character":16},"end":{"line":18,"character":16}},"context":{"diagnostics":[]}},"id":83,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":83,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":188},"contentChanges":[{"range":{"start":{"line":18,"character":16},"end":{"line":18,"character":16}},"text":"6"}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":189},"contentChanges":[{"range":{"start":{"line":18,"character":17},"end":{"line":18,"character":17}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":19}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":189}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":190},"contentChanges":[{"range":{"start":{"line":18,"character":18},"end":{"line":18,"character":18}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":19}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":190}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":18,"character":19},"end":{"line":18,"character":19}},"context":{"diagnostics":[]}},"id":84,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":84,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":18,"character":20},"end":{"line":18,"character":20}},"context":{"diagnostics":[]}},"id":85,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":85,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 340

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":191},"contentChanges":[{"range":{"start":{"line":18,"character":20},"end":{"line":18,"character":20}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":20},"start":{"character":0,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":191}}
>>>
Content-Length: 442

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":193},"contentChanges":[{"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":2}},"text":"\n  "},{"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":193}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":194},"contentChanges":[{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":2}},"text":"p"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 841

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'p'","range":{"end":{"character":3,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":194}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":195},"contentChanges":[{"range":{"start":{"line":20,"character":3},"end":{"line":20,"character":3}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 842

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":4,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pi'","range":{"end":{"character":4,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":195}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":196},"contentChanges":[{"range":{"start":{"line":20,"character":4},"end":{"line":20,"character":4}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1270

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":5,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pin'; did you mean 'sin'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/../lib/gcc/avr/7.3.0/../../../../avr/include/math.h:133:15:\nnote: 'sin' declared here","range":{"end":{"character":5,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":196}}
>>>
Content-Length: 936

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":5},"end":{"line":20,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":5}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":5}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'pin'; did you mean 'sin'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/../lib/gcc/avr/7.3.0/../../../../avr/include/math.h:133:15:\nnote: 'sin' declared here"}]}},"id":86,"jsonrpc":"2.0"}
<<<
Content-Length: 1261

{"id":86,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":5,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":";","range":{"end":{"character":20,"line":18},"start":{"character":20,"line":18}}}]}},"kind":"quickfix","title":"insert ';'"},{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pin'; did you mean 'sin'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/../lib/gcc/avr/7.3.0/../../../../avr/include/math.h:133:15:\nnote: 'sin' declared here","range":{"end":{"character":5,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":"sin","range":{"end":{"character":5,"line":20},"start":{"character":2,"line":20}}}]}},"kind":"quickfix","title":"change 'pin' to 'sin'"}]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":197},"contentChanges":[{"range":{"start":{"line":20,"character":5},"end":{"line":20,"character":5}},"text":"M"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 844

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":6,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pinM'","range":{"end":{"character":6,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":197}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":198},"contentChanges":[{"range":{"start":{"line":20,"character":6},"end":{"line":20,"character":6}},"text":"o"}]},"jsonrpc":"2.0"}Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":199},"contentChanges":[{"range":{"start":{"line":20,"character":7},"end":{"line":20,"character":7}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1227

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":8,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinMol'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":8,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":199}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":200},"contentChanges":[{"range":{"start":{"line":20,"character":8},"end":{"line":20,"character":8}},"text":"d"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1228

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinMold'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":200}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":201},"contentChanges":[{"range":{"start":{"line":20,"character":9},"end":{"line":20,"character":9}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1231

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinMolde'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":10,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":201}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":202},"contentChanges":[{"range":{"start":{"line":20,"character":9},"end":{"line":20,"character":10}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1228

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinMold'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":202}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":203},"contentChanges":[{"range":{"start":{"line":20,"character":8},"end":{"line":20,"character":9}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1227

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":8,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinMol'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":8,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":203}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":204},"contentChanges":[{"range":{"start":{"line":20,"character":8},"end":{"line":20,"character":8}},"text":"d"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1228

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinMold'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":204}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":205},"contentChanges":[{"range":{"start":{"line":20,"character":9},"end":{"line":20,"character":9}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1231

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinMolde'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":10,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":205}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":206},"contentChanges":[{"range":{"start":{"line":20,"character":9},"end":{"line":20,"character":10}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1228

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinMold'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":206}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":207},"contentChanges":[{"range":{"start":{"line":20,"character":8},"end":{"line":20,"character":9}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1227

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":8,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinMol'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":8,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":207}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":208},"contentChanges":[{"range":{"start":{"line":20,"character":7},"end":{"line":20,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 845

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":7,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pinMo'","range":{"end":{"character":7,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":208}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":209},"contentChanges":[{"range":{"start":{"line":20,"character":7},"end":{"line":20,"character":7}},"text":"d"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1227

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":8,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinMod'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":8,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":209}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":210},"contentChanges":[{"range":{"start":{"line":20,"character":8},"end":{"line":20,"character":8}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 860

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":210}}
>>>
Content-Length: 526

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":9},"end":{"line":20,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":9}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]}},"id":87,"jsonrpc":"2.0"}
<<<
Content-Length: 557

{"id":87,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":";","range":{"end":{"character":20,"line":18},"start":{"character":20,"line":18}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ';'"}]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":211},"contentChanges":[{"range":{"start":{"line":20,"character":9},"end":{"line":20,"character":9}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1231

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinModet'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":10,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":211}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":212},"contentChanges":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":10}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1232

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinModetr'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":11,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":212}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":213},"contentChanges":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":11}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1231

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":10,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinModet'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":10,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":213}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":214},"contentChanges":[{"range":{"start":{"line":20,"character":9},"end":{"line":20,"character":10}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 860

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":214}}
>>>
Content-Length: 526

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":9},"end":{"line":20,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":9}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]}},"id":88,"jsonrpc":"2.0"}
<<<
Content-Length: 557

{"id":88,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":";","range":{"end":{"character":20,"line":18},"start":{"character":20,"line":18}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ';'"}]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":215},"contentChanges":[{"range":{"start":{"line":20,"character":9},"end":{"line":20,"character":9}},"text":"()"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1244

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'pinMode'\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: candidate function not viable: requires 2 arguments, but 0 were provided","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":215}}
>>>
Content-Length: 263

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":20,"character":10}},"id":89,"jsonrpc":"2.0"}
<<<
Content-Length: 196

{"id":89,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[{"label":"pinMode(uint8_t pin, uint8_t mode) -> void","parameters":[{"label":[8,19]},{"label":[21,33]}]}]}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":10}},"context":{"diagnostics":[]}},"id":90,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":90,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":91,"jsonrpc":"2.0"}
<<<
Content-Length: 1931

{"id":91,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distancevoid","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":9,"line":11},"start":{"character":5,"line":11}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":14,"line":14},"start":{"character":6,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":9,"line":23},"start":{"character":5,"line":23}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":216},"contentChanges":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":10}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1043

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 't'","range":{"end":{"character":11,"line":20},"start":{"character":10,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":216}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":217},"contentChanges":[{"range":{"start":{"line":20,"character":11},"end":{"line":20,"character":11}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1044

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'tr'","range":{"end":{"character":12,"line":20},"start":{"character":10,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":217}}
>>>
Content-Length: 512

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":12},"end":{"line":20,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":12}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tr'"}]}},"id":92,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":92,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":93,"jsonrpc":"2.0"}
<<<
Content-Length: 1931

{"id":93,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distancevoid","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":9,"line":11},"start":{"character":5,"line":11}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":14,"line":14},"start":{"character":6,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":9,"line":23},"start":{"character":5,"line":23}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":218},"contentChanges":[{"range":{"start":{"line":20,"character":12},"end":{"line":20,"character":12}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1045

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'tri'","range":{"end":{"character":13,"line":20},"start":{"character":10,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":218}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":219},"contentChanges":[{"range":{"start":{"line":20,"character":13},"end":{"line":20,"character":13}},"text":"g"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1046

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'trig'","range":{"end":{"character":14,"line":20},"start":{"character":10,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":219}}
>>>
Content-Length: 514

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":14},"end":{"line":20,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'trig'"}]}},"id":94,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":94,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":95,"jsonrpc":"2.0"}
<<<
Content-Length: 1931

{"id":95,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distancevoid","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":9,"line":11},"start":{"character":5,"line":11}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":14,"line":14},"start":{"character":6,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":9,"line":23},"start":{"character":5,"line":23}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":220},"contentChanges":[{"range":{"start":{"line":20,"character":14},"end":{"line":20,"character":14}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1047

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'trigP'","range":{"end":{"character":15,"line":20},"start":{"character":10,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":220}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":221},"contentChanges":[{"range":{"start":{"line":20,"character":15},"end":{"line":20,"character":15}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1048

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'trigPi'","range":{"end":{"character":16,"line":20},"start":{"character":10,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":221}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":222},"contentChanges":[{"range":{"start":{"line":20,"character":16},"end":{"line":20,"character":16}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1243

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'pinMode'\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: candidate function not viable: requires 2 arguments, but 1 was provided","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":222}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":17},"end":{"line":20,"character":17}},"context":{"diagnostics":[]}},"id":96,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":96,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":97,"jsonrpc":"2.0"}
<<<
Content-Length: 1931

{"id":97,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distancevoid","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":9,"line":11},"start":{"character":5,"line":11}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":14,"line":14},"start":{"character":6,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":9,"line":23},"start":{"character":5,"line":23}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":223},"contentChanges":[{"range":{"start":{"line":20,"character":17},"end":{"line":20,"character":17}},"text":","}]},"jsonrpc":"2.0"}
<<<
Content-Length: 831

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":19,"line":20},"start":{"character":18,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":223}}
>>>
Content-Length: 263

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":20,"character":18}},"id":98,"jsonrpc":"2.0"}
<<<
Content-Length: 196

{"id":98,"jsonrpc":"2.0","result":{"activeParameter":1,"activeSignature":0,"signatures":[{"label":"pinMode(uint8_t pin, uint8_t mode) -> void","parameters":[{"label":[8,19]},{"label":[21,33]}]}]}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":224},"contentChanges":[{"range":{"start":{"line":20,"character":18},"end":{"line":20,"character":18}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 831

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":20,"line":20},"start":{"character":19,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":224}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":225},"contentChanges":[{"range":{"start":{"line":20,"character":19},"end":{"line":20,"character":19}},"text":"O"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1043

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'O'","range":{"end":{"character":20,"line":20},"start":{"character":19,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":225}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":226},"contentChanges":[{"range":{"start":{"line":20,"character":20},"end":{"line":20,"character":20}},"text":"U"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1044

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'OU'","range":{"end":{"character":21,"line":20},"start":{"character":19,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":226}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":227},"contentChanges":[{"range":{"start":{"line":20,"character":21},"end":{"line":20,"character":21}},"text":"T"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1045

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'OUT'","range":{"end":{"character":22,"line":20},"start":{"character":19,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":227}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":228},"contentChanges":[{"range":{"start":{"line":20,"character":22},"end":{"line":20,"character":22}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1046

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'OUTP'","range":{"end":{"character":23,"line":20},"start":{"character":19,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":228}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":229},"contentChanges":[{"range":{"start":{"line":20,"character":23},"end":{"line":20,"character":23}},"text":"U"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1047

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'OUTPU'","range":{"end":{"character":24,"line":20},"start":{"character":19,"line":20}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":229}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":230},"contentChanges":[{"range":{"start":{"line":20,"character":24},"end":{"line":20,"character":24}},"text":"T"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 860

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":230}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":25},"end":{"line":20,"character":25}},"context":{"diagnostics":[]}},"id":99,"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"id":99,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","selection":{"end":{"character":25,"line":20},"start":{"character":25,"line":20}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'OUTPUT'"},"kind":"refactor","title":"Expand macro 'OUTPUT'"}]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":100,"jsonrpc":"2.0"}
<<<
Content-Length: 1932

{"id":100,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distancevoid","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":18,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":9,"line":11},"start":{"character":5,"line":11}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":14,"line":14},"start":{"character":6,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":9,"line":23},"start":{"character":5,"line":23}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":18,"character":19}},"id":101,"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"id":101,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":120},"start":{"character":9,"line":120}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}]}
>>>
Content-Length: 5693

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n  HardwareSerial.h - Hardware serial library for Wiring\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 28 September 2010 by Mark Sproul\n  Modified 14 August 2012 by Alarus\n  Modified 3 December 2013 by Matthijs Kooijman\n*/\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include \u003cinttypes.h\u003e\n\n#include \"Stream.h\"\n\n// Define constants and variables for buffering incoming serial data.  We're\n// using a ring buffer (I think), in which head is the index of the location\n// to which to write the next incoming character and tail is the index of the\n// location from which to read.\n// NOTE: a \"power of 2\" buffer size is reccomended to dramatically\n//       optimize all the modulo operations for ring buffers.\n// WARNING: When buffer sizes are increased to \u003e 256, the buffer index\n// variables are automatically increased in size, but the extra\n// atomicity guards needed for that are not implemented. This will\n// often work, but occasionally a race condition can occur that makes\n// Serial behave erratically. See https://github.com/arduino/Arduino/issues/2405\n#if !defined(SERIAL_TX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) \u003c 1023)\n#define SERIAL_TX_BUFFER_SIZE 16\n#else\n#define SERIAL_TX_BUFFER_SIZE 64\n#endif\n#endif\n#if !defined(SERIAL_RX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) \u003c 1023)\n#define SERIAL_RX_BUFFER_SIZE 16\n#else\n#define SERIAL_RX_BUFFER_SIZE 64\n#endif\n#endif\n#if (SERIAL_TX_BUFFER_SIZE\u003e256)\ntypedef uint16_t tx_buffer_index_t;\n#else\ntypedef uint8_t tx_buffer_index_t;\n#endif\n#if  (SERIAL_RX_BUFFER_SIZE\u003e256)\ntypedef uint16_t rx_buffer_index_t;\n#else\ntypedef uint8_t rx_buffer_index_t;\n#endif\n\n// Define config for Serial.begin(baud, config);\n#define SERIAL_5N1 0x00\n#define SERIAL_6N1 0x02\n#define SERIAL_7N1 0x04\n#define SERIAL_8N1 0x06\n#define SERIAL_5N2 0x08\n#define SERIAL_6N2 0x0A\n#define SERIAL_7N2 0x0C\n#define SERIAL_8N2 0x0E\n#define SERIAL_5E1 0x20\n#define SERIAL_6E1 0x22\n#define SERIAL_7E1 0x24\n#define SERIAL_8E1 0x26\n#define SERIAL_5E2 0x28\n#define SERIAL_6E2 0x2A\n#define SERIAL_7E2 0x2C\n#define SERIAL_8E2 0x2E\n#define SERIAL_5O1 0x30\n#define SERIAL_6O1 0x32\n#define SERIAL_7O1 0x34\n#define SERIAL_8O1 0x36\n#define SERIAL_5O2 0x38\n#define SERIAL_6O2 0x3A\n#define SERIAL_7O2 0x3C\n#define SERIAL_8O2 0x3E\n\nclass HardwareSerial : public Stream\n{\n  protected:\n    volatile uint8_t * const _ubrrh;\n    volatile uint8_t * const _ubrrl;\n    volatile uint8_t * const _ucsra;\n    volatile uint8_t * const _ucsrb;\n    volatile uint8_t * const _ucsrc;\n    volatile uint8_t * const _udr;\n    // Has any byte been written to the UART since begin()\n    bool _written;\n\n    volatile rx_buffer_index_t _rx_buffer_head;\n    volatile rx_buffer_index_t _rx_buffer_tail;\n    volatile tx_buffer_index_t _tx_buffer_head;\n    volatile tx_buffer_index_t _tx_buffer_tail;\n\n    // Don't put any members after these buffers, since only the first\n    // 32 bytes of this struct can be accessed quickly using the ldd\n    // instruction.\n    unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];\n    unsigned char _tx_buffer[SERIAL_TX_BUFFER_SIZE];\n\n  public:\n    inline HardwareSerial(\n      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,\n      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,\n      volatile uint8_t *ucsrc, volatile uint8_t *udr);\n    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }\n    void begin(unsigned long, uint8_t);\n    void end();\n    virtual int available(void);\n    virtual int peek(void);\n    virtual int read(void);\n    virtual int availableForWrite(void);\n    virtual void flush(void);\n    virtual size_t write(uint8_t);\n    inline size_t write(unsigned long n) { return write((uint8_t)n); }\n    inline size_t write(long n) { return write((uint8_t)n); }\n    inline size_t write(unsigned int n) { return write((uint8_t)n); }\n    inline size_t write(int n) { return write((uint8_t)n); }\n    using Print::write; // pull in write(str) and write(buf, size) from Print\n    operator bool() { return true; }\n\n    // Interrupt handlers - Not intended to be called externally\n    inline void _rx_complete_irq(void);\n    void _tx_udr_empty_irq(void);\n};\n\n#if defined(UBRRH) || defined(UBRR0H)\n  extern HardwareSerial Serial;\n  #define HAVE_HWSERIAL0\n#endif\n#if defined(UBRR1H)\n  extern HardwareSerial Serial1;\n  #define HAVE_HWSERIAL1\n#endif\n#if defined(UBRR2H)\n  extern HardwareSerial Serial2;\n  #define HAVE_HWSERIAL2\n#endif\n#if defined(UBRR3H)\n  extern HardwareSerial Serial3;\n  #define HAVE_HWSERIAL3\n#endif\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#endif\n"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":20,"character":9}},"id":102,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":102,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `pinMode`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t mode`\n\n---\n```cpp\nvoid pinMode(uint8_t pin, uint8_t mode)\n```"},"range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}}}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":18,"character":20},"end":{"line":18,"character":20}},"context":{"diagnostics":[]}},"id":103,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":103,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":231},"contentChanges":[{"range":{"start":{"line":18,"character":20},"end":{"line":18,"character":20}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":231}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":18,"character":21},"end":{"line":18,"character":21}},"context":{"diagnostics":[]}},"id":104,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":104,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":26}},"context":{"diagnostics":[]}},"id":105,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":105,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":1},"end":{"line":20,"character":26}},"context":{"diagnostics":[]}},"id":106,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":106,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":26},"end":{"line":20,"character":26}},"context":{"diagnostics":[]}},"id":107,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":107,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 340

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":232},"contentChanges":[{"range":{"start":{"line":20,"character":26},"end":{"line":20,"character":26}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":22},"start":{"character":0,"line":22}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":232}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":233},"contentChanges":[{"range":{"start":{"line":20,"character":26},"end":{"line":21,"character":2}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":233}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":26},"end":{"line":20,"character":26}},"context":{"diagnostics":[]}},"id":108,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":108,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":234},"contentChanges":[{"range":{"start":{"line":20,"character":26},"end":{"line":20,"character":26}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":234}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[]}},"id":109,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":109,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 340

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":235},"contentChanges":[{"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":235}}
>>>
Content-Length: 359

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":236},"contentChanges":[{"range":{"start":{"line":21,"character":2},"end":{"line":21,"character":2}},"text":" pinMode(trigPin, OUTPUT)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":24,"line":9},"start":{"character":19,"line":9}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":22},"start":{"character":0,"line":22}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":236}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":27},"end":{"line":21,"character":27}},"context":{"diagnostics":[]}},"id":110,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":110,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 1284

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":237},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\n\n#line 10 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup();\n#line 18 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid loop();\n#line 10 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n   pinMode(trigPin, OUTPUT)\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":238},"contentChanges":[{"range":{"start":{"line":21,"character":27},"end":{"line":21,"character":27}},"text":";"}]},"jsonrpc":"2.0"}Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":28},"end":{"line":21,"character":28}},"context":{"diagnostics":[]}},"id":111,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":111,"jsonrpc":"2.0","result":[]}Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":238}}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":112,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":112,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":22},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":27},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":9,"line":24},"start":{"character":5,"line":24}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":28},"end":{"line":21,"character":28}},"context":{"diagnostics":[]}},"id":113,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":113,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":114,"jsonrpc":"2.0"}
<<<
Content-Length: 320

{"id":114,"jsonrpc":"2.0","result":[{"newText":"\n  ","range":{"end":{"character":3,"line":21},"start":{"character":27,"line":20}}},{"newText":"\n","range":{"end":{"character":0,"line":27},"start":{"character":48,"line":25}}},{"newText":"\n","range":{"end":{"character":0,"line":29},"start":{"character":1,"line":27}}}]}
>>>
Content-Length: 454

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":240},"contentChanges":[{"range":{"start":{"line":26,"character":0},"end":{"line":27,"character":0}},"rangeLength":1,"text":""},{"range":{"start":{"line":21,"character":2},"end":{"line":21,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":7,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":7,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":240}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":27},"end":{"line":21,"character":27}},"context":{"diagnostics":[]}},"id":115,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":115,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 340

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":241},"contentChanges":[{"range":{"start":{"line":21,"character":27},"end":{"line":21,"character":27}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":241}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":242},"contentChanges":[{"range":{"start":{"line":21,"character":27},"end":{"line":22,"character":2}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":242}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":27},"end":{"line":21,"character":27}},"context":{"diagnostics":[]}},"id":116,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":116,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":26},"end":{"line":21,"character":26}},"context":{"diagnostics":[]}},"id":117,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":117,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":21,"character":25}},"id":118,"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"id":118,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}}},{"kind":1,"range":{"end":{"character":9,"line":21},"start":{"character":2,"line":21}}}]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":21,"character":17}},"id":119,"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"id":119,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}}},{"kind":1,"range":{"end":{"character":9,"line":21},"start":{"character":2,"line":21}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":15},"end":{"line":21,"character":15}},"context":{"diagnostics":[]}},"id":120,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":120,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":14},"end":{"line":21,"character":14}},"context":{"diagnostics":[]}},"id":121,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":121,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":243},"contentChanges":[{"range":{"start":{"line":21,"character":13},"end":{"line":21,"character":14}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 762

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'triPin'; did you mean 'trigPin'? (fix available)\n\nsketch_may25a.ino.cpp:3:11: note: 'trigPin' declared here","range":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"},{"message":"'trigPin' declared here\n\nsketch_may25a.ino.cpp:22:11: error: use of undeclared identifier 'triPin'; did you mean 'trigPin'?","range":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":243}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":244},"contentChanges":[{"range":{"start":{"line":21,"character":12},"end":{"line":21,"character":13}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 422

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'trPin'","range":{"end":{"character":15,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":244}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":245},"contentChanges":[{"range":{"start":{"line":21,"character":11},"end":{"line":21,"character":12}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 421

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'tPin'","range":{"end":{"character":14,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":245}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":246},"contentChanges":[{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":11}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Pin'","range":{"end":{"character":13,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":246}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":247},"contentChanges":[{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":10}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 421

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ePin'","range":{"end":{"character":14,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":247}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":248},"contentChanges":[{"range":{"start":{"line":21,"character":11},"end":{"line":21,"character":11}},"text":"h"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 756

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'ehPin'; did you mean 'redPin'? (fix available)\n\nsketch_may25a.ino.cpp:6:11: note: 'redPin' declared here","range":{"end":{"character":15,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"},{"message":"'redPin' declared here\n\nsketch_may25a.ino.cpp:22:11: error: use of undeclared identifier 'ehPin'; did you mean 'redPin'?","range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":248}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":249},"contentChanges":[{"range":{"start":{"line":21,"character":12},"end":{"line":21,"character":12}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 762

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'ehcPin'; did you mean 'echoPin'? (fix available)\n\nsketch_may25a.ino.cpp:4:11: note: 'echoPin' declared here","range":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"},{"message":"'echoPin' declared here\n\nsketch_may25a.ino.cpp:22:11: error: use of undeclared identifier 'ehcPin'; did you mean 'echoPin'?","range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":249}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":250},"contentChanges":[{"range":{"start":{"line":21,"character":13},"end":{"line":21,"character":13}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 764

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'ehcoPin'; did you mean 'echoPin'? (fix available)\n\nsketch_may25a.ino.cpp:4:11: note: 'echoPin' declared here","range":{"end":{"character":17,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"},{"message":"'echoPin' declared here\n\nsketch_may25a.ino.cpp:22:11: error: use of undeclared identifier 'ehcoPin'; did you mean 'echoPin'?","range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":250}}
>>>
Content-Length: 628

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":14},"end":{"line":21,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'ehcoPin'; did you mean 'echoPin'? (fix available)\n\nsketch_may25a.ino.cpp:4:11: note: 'echoPin' declared here"}]}},"id":122,"jsonrpc":"2.0"}
<<<
Content-Length: 682

{"id":122,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'ehcoPin'; did you mean 'echoPin'? (fix available)\n\nsketch_may25a.ino.cpp:4:11: note: 'echoPin' declared here","range":{"end":{"character":17,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":"echoPin","range":{"end":{"character":17,"line":21},"start":{"character":10,"line":21}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'ehcoPin' to 'echoPin'"}]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":251},"contentChanges":[{"range":{"start":{"line":21,"character":13},"end":{"line":21,"character":14}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 762

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'ehcPin'; did you mean 'echoPin'? (fix available)\n\nsketch_may25a.ino.cpp:4:11: note: 'echoPin' declared here","range":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"},{"message":"'echoPin' declared here\n\nsketch_may25a.ino.cpp:22:11: error: use of undeclared identifier 'ehcPin'; did you mean 'echoPin'?","range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":251}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":252},"contentChanges":[{"range":{"start":{"line":21,"character":12},"end":{"line":21,"character":13}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 756

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'ehPin'; did you mean 'redPin'? (fix available)\n\nsketch_may25a.ino.cpp:6:11: note: 'redPin' declared here","range":{"end":{"character":15,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"},{"message":"'redPin' declared here\n\nsketch_may25a.ino.cpp:22:11: error: use of undeclared identifier 'ehPin'; did you mean 'redPin'?","range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":252}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":253},"contentChanges":[{"range":{"start":{"line":21,"character":12},"end":{"line":21,"character":12}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 762

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'ehcPin'; did you mean 'echoPin'? (fix available)\n\nsketch_may25a.ino.cpp:4:11: note: 'echoPin' declared here","range":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"},{"message":"'echoPin' declared here\n\nsketch_may25a.ino.cpp:22:11: error: use of undeclared identifier 'ehcPin'; did you mean 'echoPin'?","range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":253}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":254},"contentChanges":[{"range":{"start":{"line":21,"character":13},"end":{"line":21,"character":13}},"text":"h"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 764

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'ehchPin'; did you mean 'echoPin'? (fix available)\n\nsketch_may25a.ino.cpp:4:11: note: 'echoPin' declared here","range":{"end":{"character":17,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"},{"message":"'echoPin' declared here\n\nsketch_may25a.ino.cpp:22:11: error: use of undeclared identifier 'ehchPin'; did you mean 'echoPin'?","range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":254}}
>>>
Content-Length: 628

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":14},"end":{"line":21,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'ehchPin'; did you mean 'echoPin'? (fix available)\n\nsketch_may25a.ino.cpp:4:11: note: 'echoPin' declared here"}]}},"id":123,"jsonrpc":"2.0"}
<<<
Content-Length: 682

{"id":123,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'ehchPin'; did you mean 'echoPin'? (fix available)\n\nsketch_may25a.ino.cpp:4:11: note: 'echoPin' declared here","range":{"end":{"character":17,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":"echoPin","range":{"end":{"character":17,"line":21},"start":{"character":10,"line":21}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'ehchPin' to 'echoPin'"}]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":255},"contentChanges":[{"range":{"start":{"line":21,"character":13},"end":{"line":21,"character":14}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 762

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'ehcPin'; did you mean 'echoPin'? (fix available)\n\nsketch_may25a.ino.cpp:4:11: note: 'echoPin' declared here","range":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"},{"message":"'echoPin' declared here\n\nsketch_may25a.ino.cpp:22:11: error: use of undeclared identifier 'ehcPin'; did you mean 'echoPin'?","range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":255}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":256},"contentChanges":[{"range":{"start":{"line":21,"character":12},"end":{"line":21,"character":13}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 756

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'ehPin'; did you mean 'redPin'? (fix available)\n\nsketch_may25a.ino.cpp:6:11: note: 'redPin' declared here","range":{"end":{"character":15,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"},{"message":"'redPin' declared here\n\nsketch_may25a.ino.cpp:22:11: error: use of undeclared identifier 'ehPin'; did you mean 'redPin'?","range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":256}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":257},"contentChanges":[{"range":{"start":{"line":21,"character":11},"end":{"line":21,"character":12}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 421

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ePin'","range":{"end":{"character":14,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":257}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":258},"contentChanges":[{"range":{"start":{"line":21,"character":11},"end":{"line":21,"character":11}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 756

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'ecPin'; did you mean 'redPin'? (fix available)\n\nsketch_may25a.ino.cpp:6:11: note: 'redPin' declared here","range":{"end":{"character":15,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"},{"message":"'redPin' declared here\n\nsketch_may25a.ino.cpp:22:11: error: use of undeclared identifier 'ecPin'; did you mean 'redPin'?","range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":258}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":259},"contentChanges":[{"range":{"start":{"line":21,"character":12},"end":{"line":21,"character":12}},"text":"h"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 762

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'echPin'; did you mean 'echoPin'? (fix available)\n\nsketch_may25a.ino.cpp:4:11: note: 'echoPin' declared here","range":{"end":{"character":16,"line":21},"start":{"character":10,"line":21}},"severity":1,"source":"clang"},{"message":"'echoPin' declared here\n\nsketch_may25a.ino.cpp:22:11: error: use of undeclared identifier 'echPin'; did you mean 'echoPin'?","range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":259}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":260},"contentChanges":[{"range":{"start":{"line":21,"character":13},"end":{"line":21,"character":13}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":260}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":14},"end":{"line":21,"character":14}},"context":{"diagnostics":[]}},"id":124,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":124,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":125,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":125,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":22},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":9,"line":24},"start":{"character":5,"line":24}}}]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":21,"character":15}},"id":126,"jsonrpc":"2.0"}
<<<
Content-Length: 213

{"id":126,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":2,"range":{"end":{"character":17,"line":21},"start":{"character":10,"line":21}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":15},"end":{"line":21,"character":15}},"context":{"diagnostics":[]}},"id":127,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":127,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":21,"character":19}},"id":128,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":128,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":25},"end":{"line":21,"character":25}},"context":{"diagnostics":[]}},"id":129,"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"id":129,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","selection":{"end":{"character":25,"line":21},"start":{"character":25,"line":21}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'OUTPUT'"},"kind":"refactor","title":"Expand macro 'OUTPUT'"}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":22},"end":{"line":21,"character":22}},"context":{"diagnostics":[]}},"id":130,"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"id":130,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","selection":{"end":{"character":22,"line":21},"start":{"character":22,"line":21}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'OUTPUT'"},"kind":"refactor","title":"Expand macro 'OUTPUT'"}]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":261},"contentChanges":[{"range":{"start":{"line":21,"character":21},"end":{"line":21,"character":22}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 422

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'OUPUT'","range":{"end":{"character":24,"line":21},"start":{"character":19,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":261}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":262},"contentChanges":[{"range":{"start":{"line":21,"character":20},"end":{"line":21,"character":21}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 421

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'OPUT'","range":{"end":{"character":23,"line":21},"start":{"character":19,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":262}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":263},"contentChanges":[{"range":{"start":{"line":21,"character":19},"end":{"line":21,"character":20}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'PUT'","range":{"end":{"character":22,"line":21},"start":{"character":19,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":263}}
>>>
Content-Length: 514

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":19},"end":{"line":21,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":21,"character":19},"end":{"line":21,"character":22}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'PUT'"}]}},"id":131,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":131,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":132,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":132,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":22},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":9,"line":24},"start":{"character":5,"line":24}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":264},"contentChanges":[{"range":{"start":{"line":21,"character":19},"end":{"line":21,"character":19}},"text":"I"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 421

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'IPUT'","range":{"end":{"character":23,"line":21},"start":{"character":19,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":264}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":265},"contentChanges":[{"range":{"start":{"line":21,"character":20},"end":{"line":21,"character":20}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 422

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'InPUT'","range":{"end":{"character":24,"line":21},"start":{"character":19,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":265}}
>>>
Content-Length: 516

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":21},"end":{"line":21,"character":21}},"context":{"diagnostics":[{"range":{"start":{"line":21,"character":19},"end":{"line":21,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'InPUT'"}]}},"id":133,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":133,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":134,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":134,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":22},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":9,"line":24},"start":{"character":5,"line":24}}}]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":266},"contentChanges":[{"range":{"start":{"line":21,"character":20},"end":{"line":21,"character":21}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 421

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'IPUT'","range":{"end":{"character":23,"line":21},"start":{"character":19,"line":21}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":266}}
>>>
Content-Length: 515

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":20},"end":{"line":21,"character":20}},"context":{"diagnostics":[{"range":{"start":{"line":21,"character":19},"end":{"line":21,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'IPUT'"}]}},"id":135,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":135,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":136,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":136,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":22},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":9,"line":24},"start":{"character":5,"line":24}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":267},"contentChanges":[{"range":{"start":{"line":21,"character":20},"end":{"line":21,"character":20}},"text":"N"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":267}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":21},"end":{"line":21,"character":21}},"context":{"diagnostics":[]}},"id":137,"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"id":137,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","selection":{"end":{"character":21,"line":21},"start":{"character":21,"line":21}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'INPUT'"},"kind":"refactor","title":"Expand macro 'INPUT'"}]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":21,"character":22}},"id":138,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":138,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":24},"end":{"line":21,"character":24}},"context":{"diagnostics":[]}},"id":139,"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"id":139,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","selection":{"end":{"character":24,"line":21},"start":{"character":24,"line":21}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'INPUT'"},"kind":"refactor","title":"Expand macro 'INPUT'"}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":26},"end":{"line":21,"character":26}},"context":{"diagnostics":[]}},"id":140,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":140,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 340

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":268},"contentChanges":[{"range":{"start":{"line":21,"character":26},"end":{"line":21,"character":26}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":268}}
>>>
Content-Length: 442

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":270},"contentChanges":[{"range":{"start":{"line":22,"character":2},"end":{"line":22,"character":2}},"text":"\n  "},{"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":270}}
>>>
Content-Length: 359

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":271},"contentChanges":[{"range":{"start":{"line":23,"character":2},"end":{"line":23,"character":2}},"text":" pinMode(trigPin, OUTPUT)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":24},"start":{"character":0,"line":24}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":271}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":23,"character":27},"end":{"line":23,"character":27}},"context":{"diagnostics":[]}},"id":141,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":141,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 1312

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":272},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\n\n#line 10 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup();\n#line 20 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid loop();\n#line 10 \"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/.arduinoIDE-unsaved2021425-77249-11qvndu.vval/sketch_may25a/sketch_may25a.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n   pinMode(trigPin, OUTPUT)\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":142,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"id":142,"jsonrpc":"2.0","result":[{"newText":"\n\n  ","range":{"end":{"character":3,"line":23},"start":{"character":26,"line":21}}},{"newText":"\n","range":{"end":{"character":0,"line":30},"start":{"character":1,"line":28}}}]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":143,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":143,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":24},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":28},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":9,"line":26},"start":{"character":5,"line":26}}}]}Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":24},"start":{"character":0,"line":24}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":272}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":273},"contentChanges":[{"range":{"start":{"line":23,"character":2},"end":{"line":23,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":24},"start":{"character":0,"line":24}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":273}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":23,"character":26},"end":{"line":23,"character":26}},"context":{"diagnostics":[]}},"id":144,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":144,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":23,"character":25}},"id":145,"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"id":145,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}}},{"kind":1,"range":{"end":{"character":9,"line":21},"start":{"character":2,"line":21}}},{"kind":1,"range":{"end":{"character":9,"line":23},"start":{"character":2,"line":23}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":23,"character":25},"end":{"line":23,"character":25}},"context":{"diagnostics":[]}},"id":146,"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"id":146,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","selection":{"end":{"character":25,"line":23},"start":{"character":25,"line":23}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'OUTPUT'"},"kind":"refactor","title":"Expand macro 'OUTPUT'"}]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":23,"character":17}},"id":147,"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"id":147,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":9,"line":20},"start":{"character":2,"line":20}}},{"kind":1,"range":{"end":{"character":9,"line":21},"start":{"character":2,"line":21}}},{"kind":1,"range":{"end":{"character":9,"line":23},"start":{"character":2,"line":23}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":23,"character":16},"end":{"line":23,"character":16}},"context":{"diagnostics":[]}},"id":148,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":148,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":23,"character":19}},"id":149,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":149,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 527

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":24,"character":1},"end":{"line":24,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]}},"id":150,"jsonrpc":"2.0"}
<<<
Content-Length: 558

{"id":150,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":24},"start":{"character":0,"line":24}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":";","range":{"end":{"character":26,"line":23},"start":{"character":26,"line":23}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ';'"}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":23,"character":26},"end":{"line":23,"character":26}},"context":{"diagnostics":[]}},"id":151,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":151,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":274},"contentChanges":[{"range":{"start":{"line":23,"character":26},"end":{"line":23,"character":26}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":8,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":8,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":274}}
>>>
Content-Length: 340

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":275},"contentChanges":[{"range":{"start":{"line":23,"character":27},"end":{"line":23,"character":27}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":275}}
>>>
Content-Length: 359

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":276},"contentChanges":[{"range":{"start":{"line":24,"character":2},"end":{"line":24,"character":2}},"text":" pinMode(trigPin, OUTPUT)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":25},"start":{"character":0,"line":25}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":276}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":277},"contentChanges":[{"range":{"start":{"line":24,"character":27},"end":{"line":24,"character":27}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":277}}
>>>
Content-Length: 341

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":278},"contentChanges":[{"range":{"start":{"line":24,"character":28},"end":{"line":24,"character":28}},"text":"\n   "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":278}}
>>>
Content-Length: 359

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":279},"contentChanges":[{"range":{"start":{"line":25,"character":3},"end":{"line":25,"character":3}},"text":" pinMode(trigPin, OUTPUT)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":26}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":279}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":25,"character":28},"end":{"line":25,"character":28}},"context":{"diagnostics":[]}},"id":152,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":152,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":280},"contentChanges":[{"range":{"start":{"line":25,"character":28},"end":{"line":25,"character":28}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":280}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":25,"character":29},"end":{"line":25,"character":29}},"context":{"diagnostics":[]}},"id":153,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":153,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":23,"character":14}},"id":154,"jsonrpc":"2.0"}
<<<
Content-Length: 480

{"id":154,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":2,"range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}}},{"kind":2,"range":{"end":{"character":17,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":18,"line":24},"start":{"character":11,"line":24}}},{"kind":2,"range":{"end":{"character":19,"line":25},"start":{"character":12,"line":25}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":23,"character":10},"end":{"line":23,"character":17}},"context":{"diagnostics":[]}},"id":155,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":155,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":24,"character":8}},"id":156,"jsonrpc":"2.0"}
<<<
Content-Length: 312

{"id":156,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `pinMode`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t mode`\n\n---\n```cpp\nvoid pinMode(uint8_t pin, uint8_t mode)\n```"},"range":{"end":{"character":10,"line":24},"start":{"character":3,"line":24}}}}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":281},"contentChanges":[{"range":{"start":{"line":23,"character":10},"end":{"line":23,"character":17}},"rangeLength":7,"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'r'","range":{"end":{"character":11,"line":23},"start":{"character":10,"line":23}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":281}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":282},"contentChanges":[{"range":{"start":{"line":23,"character":11},"end":{"line":23,"character":11}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 're'","range":{"end":{"character":12,"line":23},"start":{"character":10,"line":23}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":282}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":283},"contentChanges":[{"range":{"start":{"line":23,"character":12},"end":{"line":23,"character":12}},"text":"d"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'red'","range":{"end":{"character":13,"line":23},"start":{"character":10,"line":23}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":283}}
>>>
Content-Length: 514

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":23,"character":13},"end":{"line":23,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":23,"character":10},"end":{"line":23,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'red'"}]}},"id":157,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":157,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":158,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":158,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":30},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":284},"contentChanges":[{"range":{"start":{"line":23,"character":13},"end":{"line":23,"character":13}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 421

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'redP'","range":{"end":{"character":14,"line":23},"start":{"character":10,"line":23}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":284}}
>>>
Content-Length: 515

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":23,"character":14},"end":{"line":23,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":23,"character":10},"end":{"line":23,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'redP'"}]}},"id":159,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":159,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":160,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":160,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":30},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":285},"contentChanges":[{"range":{"start":{"line":23,"character":14},"end":{"line":23,"character":14}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 756

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'redPi'; did you mean 'redPin'? (fix available)\n\nsketch_may25a.ino.cpp:6:11: note: 'redPin' declared here","range":{"end":{"character":15,"line":23},"start":{"character":10,"line":23}},"severity":1,"source":"clang"},{"message":"'redPin' declared here\n\nsketch_may25a.ino.cpp:24:11: error: use of undeclared identifier 'redPi'; did you mean 'redPin'?","range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":285}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":286},"contentChanges":[{"range":{"start":{"line":23,"character":15},"end":{"line":23,"character":15}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":286}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":23,"character":16},"end":{"line":23,"character":16}},"context":{"diagnostics":[]}},"id":161,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":161,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":162,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":162,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":30},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":6,"character":14}},"id":163,"jsonrpc":"2.0"}
<<<
Content-Length: 124

{"id":163,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}}]}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":6,"character":14}},"id":164,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":164,"jsonrpc":"2.0","result":[{"range":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}]}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":7,"character":13}},"id":165,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":165,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":6,"character":10},"end":{"line":6,"character":18}},"context":{"diagnostics":[]}},"id":166,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":166,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":23,"character":12}},"id":167,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":167,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":25,"character":13}},"id":168,"jsonrpc":"2.0"}
<<<
Content-Length: 391

{"id":168,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":2,"range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}}},{"kind":2,"range":{"end":{"character":18,"line":24},"start":{"character":11,"line":24}}},{"kind":2,"range":{"end":{"character":19,"line":25},"start":{"character":12,"line":25}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":25,"character":12},"end":{"line":25,"character":19}},"context":{"diagnostics":[]}},"id":169,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":169,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":24,"character":12}},"id":170,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":170,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `trigPin`  \n\n---\nType: `const int`  \nValue = `11`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int trigPin = 11\n```"},"range":{"end":{"character":18,"line":24},"start":{"character":11,"line":24}}}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":24,"character":13}},"id":171,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":171,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":24,"character":11},"end":{"line":24,"character":18}},"context":{"diagnostics":[]}},"id":172,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":172,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":20,"character":13}},"id":173,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":173,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}]}
>>>
Content-Length: 360

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":287},"contentChanges":[{"range":{"start":{"line":24,"character":11},"end":{"line":24,"character":18}},"rangeLength":7,"text":"greenPin"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":287}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":24,"character":19},"end":{"line":24,"character":19}},"context":{"diagnostics":[]}},"id":174,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":174,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":9,"character":14}},"id":175,"jsonrpc":"2.0"}
<<<
Content-Length: 248

{"id":175,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}]}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":7,"character":13}},"id":176,"jsonrpc":"2.0"}
<<<
Content-Length: 124

{"id":176,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}}]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":7,"character":10},"end":{"line":7,"character":17}},"context":{"diagnostics":[]}},"id":177,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":177,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":21,"character":13}},"id":178,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":178,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":24,"character":13}},"id":179,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":179,"jsonrpc":"2.0","result":[{"range":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":25,"character":14}},"id":180,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":180,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":25,"character":14}},"id":181,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":181,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `trigPin`  \n\n---\nType: `const int`  \nValue = `11`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int trigPin = 11\n```"},"range":{"end":{"character":19,"line":25},"start":{"character":12,"line":25}}}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":21,"character":26},"end":{"line":21,"character":26}},"context":{"diagnostics":[]}},"id":182,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":182,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":26,"character":1},"end":{"line":26,"character":1}},"context":{"diagnostics":[]}},"id":183,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":183,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":25,"character":15}},"id":184,"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"id":184,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":2,"range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}}},{"kind":2,"range":{"end":{"character":19,"line":25},"start":{"character":12,"line":25}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":25,"character":15}},"id":185,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":185,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":25,"character":12},"end":{"line":25,"character":19}},"context":{"diagnostics":[]}},"id":186,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":186,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":24,"character":26}},"id":187,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":187,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":43},"start":{"character":8,"line":43}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}]}
>>>
Content-Length: 359

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":288},"contentChanges":[{"range":{"start":{"line":25,"character":12},"end":{"line":25,"character":19}},"rangeLength":7,"text":"bluePin"}]},"jsonrpc":"2.0"}Content-Length: 8302

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n\n#include \u003cavr/pgmspace.h\u003e\n#include \u003cavr/io.h\u003e\n#include \u003cavr/interrupt.h\u003e\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)\u003c(b)?(a):(b))\n#define max(a,b) ((a)\u003e(b)?(a):(b))\n#define abs(x) ((x)\u003e0?(x):-(x))\n#define constrain(amt,low,high) ((amt)\u003c(low)?(low):((amt)\u003e(high)?(high):(amt)))\n#define round(x)     ((x)\u003e=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) \u0026 0xff))\n#define highByte(w) ((uint8_t) ((w) \u003e\u003e 8))\n\n#define bitRead(value, bit) (((value) \u003e\u003e (bit)) \u0026 0x01)\n#define bitSet(value, bit) ((value) |= (1UL \u003c\u003c (bit)))\n#define bitClear(value, bit) ((value) \u0026= ~(1UL \u003c\u003c (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL \u003c\u003c (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL \u003c\u003c (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) \u0026\u0026 defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}},"jsonrpc":"2.0"}Content-Length: 184

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":288}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":25,"character":19},"end":{"line":25,"character":19}},"context":{"diagnostics":[]}},"id":188,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":188,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":28,"character":13},"end":{"line":28,"character":13}},"context":{"diagnostics":[]}},"id":189,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":189,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":48}},"context":{"diagnostics":[]}},"id":190,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":190,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 340

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":289},"contentChanges":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":48}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":289}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":290},"contentChanges":[{"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":2}},"text":"d"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'd'","range":{"end":{"character":3,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":290}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":291},"contentChanges":[{"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":3}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'di'","range":{"end":{"character":4,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":291}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":292},"contentChanges":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":4}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 847

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'dis'; did you mean 'div'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/../lib/gcc/avr/7.3.0/../../../../avr/include/stdlib.h:162:14:\nnote: 'div' declared here","range":{"end":{"character":5,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":292}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":293},"contentChanges":[{"range":{"start":{"line":30,"character":5},"end":{"line":30,"character":5}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'dist'","range":{"end":{"character":6,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":293}}
>>>
Content-Length: 511

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":30,"character":6},"end":{"line":30,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'dist'"}]}},"id":191,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":191,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":192,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":192,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":294},"contentChanges":[{"range":{"start":{"line":30,"character":6},"end":{"line":30,"character":6}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'dista'","range":{"end":{"character":7,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":294}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":295},"contentChanges":[{"range":{"start":{"line":30,"character":7},"end":{"line":30,"character":7}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 621

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'distan'","range":{"end":{"character":8,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":295}}
>>>
Content-Length: 513

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":30,"character":8},"end":{"line":30,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'distan'"}]}},"id":193,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":193,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":194,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":194,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":296},"contentChanges":[{"range":{"start":{"line":30,"character":8},"end":{"line":30,"character":8}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 964

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'distanc'; did you mean 'distance'? (fix available)\n\nsketch_may25a.ino.cpp:10:7: note: 'distance' declared here","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"},{"message":"'distance' declared here\n\nsketch_may25a.ino.cpp:31:3: error: use of undeclared identifier 'distanc'; did you mean 'distance'?","range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":296}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":297},"contentChanges":[{"range":{"start":{"line":30,"character":9},"end":{"line":30,"character":9}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":297}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":10}},"context":{"diagnostics":[]}},"id":195,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":195,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":196,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":196,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":298},"contentChanges":[{"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":10}},"text":" "}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":299},"contentChanges":[{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":11}},"text":"="}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":299}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":300},"contentChanges":[{"range":{"start":{"line":30,"character":12},"end":{"line":30,"character":12}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":300}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":301},"contentChanges":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":13}},"text":"g"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 618

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'g'","range":{"end":{"character":14,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":301}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":302},"contentChanges":[{"range":{"start":{"line":30,"character":14},"end":{"line":30,"character":14}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 619

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ge'","range":{"end":{"character":15,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":302}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":303},"contentChanges":[{"range":{"start":{"line":30,"character":15},"end":{"line":30,"character":15}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 620

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'get'","range":{"end":{"character":16,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":303}}
>>>
Content-Length: 514

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":30,"character":16},"end":{"line":30,"character":16}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'get'"}]}},"id":197,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":197,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":198,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":198,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":304},"contentChanges":[{"range":{"start":{"line":30,"character":16},"end":{"line":30,"character":16}},"text":"D"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 621

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getD'","range":{"end":{"character":17,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":304}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":305},"contentChanges":[{"range":{"start":{"line":30,"character":17},"end":{"line":30,"character":17}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 622

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDi'","range":{"end":{"character":18,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":305}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":306},"contentChanges":[{"range":{"start":{"line":30,"character":18},"end":{"line":30,"character":18}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 623

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDis'","range":{"end":{"character":19,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":306}}
>>>
Content-Length: 517

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":30,"character":19},"end":{"line":30,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDis'"}]}},"id":199,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":199,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":200,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":200,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":307},"contentChanges":[{"range":{"start":{"line":30,"character":19},"end":{"line":30,"character":19}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 624

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDist'","range":{"end":{"character":20,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":307}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":308},"contentChanges":[{"range":{"start":{"line":30,"character":20},"end":{"line":30,"character":20}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 625

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDista'","range":{"end":{"character":21,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":308}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":309},"contentChanges":[{"range":{"start":{"line":30,"character":21},"end":{"line":30,"character":21}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 626

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistan'","range":{"end":{"character":22,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":309}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":310},"contentChanges":[{"range":{"start":{"line":30,"character":22},"end":{"line":30,"character":22}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 627

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistanc'","range":{"end":{"character":23,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":310}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":311},"contentChanges":[{"range":{"start":{"line":30,"character":23},"end":{"line":30,"character":23}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 975

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'getDistance'; did you mean 'distance'? (fix available)\n\nsketch_may25a.ino.cpp:10:7: note: 'distance' declared here","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"message":"'distance' declared here\n\nsketch_may25a.ino.cpp:31:14: error: use of undeclared identifier 'getDistance'; did you mean 'distance'?","range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":311}}
>>>
Content-Length: 634

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":30,"character":24},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'getDistance'; did you mean 'distance'? (fix available)\n\nsketch_may25a.ino.cpp:10:7: note: 'distance' declared here"}]}},"id":201,"jsonrpc":"2.0"}
<<<
Content-Length: 694

{"id":201,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'getDistance'; did you mean 'distance'? (fix available)\n\nsketch_may25a.ino.cpp:10:7: note: 'distance' declared here","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp":[{"newText":"distance","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'getDistance' to 'distance'"}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":312},"contentChanges":[{"range":{"start":{"line":30,"character":24},"end":{"line":30,"character":24}},"text":"()"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 628

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":31}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":312}}
>>>
Content-Length: 264

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":30,"character":25}},"id":202,"jsonrpc":"2.0"}
<<<
Content-Length: 93

{"id":202,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[]}}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":203,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":203,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":30,"character":26},"end":{"line":30,"character":26}},"context":{"diagnostics":[]}},"id":204,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":204,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":313},"contentChanges":[{"range":{"start":{"line":30,"character":26},"end":{"line":30,"character":26}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":313}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":30,"character":27},"end":{"line":30,"character":27}},"context":{"diagnostics":[]}},"id":205,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":205,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":206,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":206,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":31},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 340

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":314},"contentChanges":[{"range":{"start":{"line":30,"character":27},"end":{"line":30,"character":27}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp","version":314}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}},"id":207,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":207,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"}},"id":208,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":208,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":32},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"context":{"diagnostics":[]}},"id":209,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":209,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":14},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}},"id":210,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":210,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":15},"end":{"line":0,"character":15}},"context":{"diagnostics":[]}},"id":211,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":211,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":212,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":212,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":24},"end":{"line":0,"character":24}},"context":{"diagnostics":[]}},"id":213,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":213,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":25},"end":{"line":0,"character":25}},"context":{"diagnostics":[]}},"id":214,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":214,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":9}},"context":{"diagnostics":[]}},"id":215,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":215,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}},"id":216,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":216,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"context":{"diagnostics":[]}},"id":217,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":217,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":14},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}},"id":218,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":218,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":15},"end":{"line":0,"character":15}},"context":{"diagnostics":[]}},"id":219,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":219,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":16},"end":{"line":0,"character":16}},"context":{"diagnostics":[]}},"id":220,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":220,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":221,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":221,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":18},"end":{"line":0,"character":18}},"context":{"diagnostics":[]}},"id":222,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":222,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":223,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":223,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":23},"end":{"line":0,"character":23}},"context":{"diagnostics":[]}},"id":224,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":224,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":4},"end":{"line":0,"character":4}},"context":{"diagnostics":[]}},"id":225,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":225,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":5},"end":{"line":0,"character":5}},"context":{"diagnostics":[]}},"id":226,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":226,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":4},"end":{"line":0,"character":4}},"context":{"diagnostics":[]}},"id":227,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":227,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":6},"end":{"line":0,"character":6}},"context":{"diagnostics":[]}},"id":228,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":228,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}},"id":229,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":229,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":14},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}},"id":230,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":230,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":16},"end":{"line":0,"character":16}},"context":{"diagnostics":[]}},"id":231,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":231,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":18},"end":{"line":0,"character":18}},"context":{"diagnostics":[]}},"id":232,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":232,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":233,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":233,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":21,"character":19}},"id":234,"jsonrpc":"2.0"}
<<<
Content-Length: 215

{"id":234,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `INPUT`  \n\n---\n```cpp\n#define INPUT 0x0\n```"},"range":{"end":{"character":24,"line":21},"start":{"character":19,"line":21}}}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":235,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":235,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":236,"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"id":236,"jsonrpc":"2.0","result":[{"newText":"\n  ","range":{"end":{"character":3,"line":24},"start":{"character":26,"line":23}}},{"newText":"\n  ","range":{"end":{"character":4,"line":25},"start":{"character":29,"line":24}}},{"newText":"\n","range":{"end":{"character":0,"line":32},"start":{"character":27,"line":30}}},{"newText":"\n","range":{"end":{"character":0,"line":34},"start":{"character":1,"line":32}}}]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"context":{"diagnostics":[]}},"id":237,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":237,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"context":{"diagnostics":[]}},"id":238,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":238,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":16},"end":{"line":0,"character":16}},"context":{"diagnostics":[]}},"id":239,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":239,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":18},"end":{"line":0,"character":18}},"context":{"diagnostics":[]}},"id":240,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":240,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":241,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":241,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":242,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":242,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":23},"end":{"line":0,"character":23}},"context":{"diagnostics":[]}},"id":243,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":243,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":29},"end":{"line":0,"character":29}},"context":{"diagnostics":[]}},"id":244,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":244,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":245,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":245,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":246,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":246,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":3},"end":{"line":0,"character":3}},"context":{"diagnostics":[]}},"id":247,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":247,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}},"id":248,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":248,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}},"id":249,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":249,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"context":{"diagnostics":[]}},"id":250,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":250,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":5},"end":{"line":0,"character":16}},"context":{"diagnostics":[]}},"id":251,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":251,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":5},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":252,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":252,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":253,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":253,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":29,"character":45}},"id":254,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":254,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"position":{"line":29,"character":45}},"id":255,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":255,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":256,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":256,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":25},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":257,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":257,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":258,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":258,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":259,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":259,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":260,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":260,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":25},"end":{"line":0,"character":25}},"context":{"diagnostics":[]}},"id":261,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":261,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":26},"end":{"line":0,"character":26}},"context":{"diagnostics":[]}},"id":262,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":262,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":25},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":263,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":263,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":26},"end":{"line":0,"character":26}},"context":{"diagnostics":[]}},"id":264,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":264,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":3},"end":{"line":0,"character":3}},"context":{"diagnostics":[]}},"id":265,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":265,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"context":{"diagnostics":[]}},"id":266,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":266,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":13},"end":{"line":0,"character":13}},"context":{"diagnostics":[]}},"id":267,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":267,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":268,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":268,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":269,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":269,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":13},"end":{"line":0,"character":13}},"context":{"diagnostics":[]}},"id":270,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":270,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":15},"end":{"line":0,"character":15}},"context":{"diagnostics":[]}},"id":271,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":271,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":15},"end":{"line":0,"character":15}},"context":{"diagnostics":[]}},"id":272,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":272,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":16},"end":{"line":0,"character":16}},"context":{"diagnostics":[]}},"id":273,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":273,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":274,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":274,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":18},"end":{"line":0,"character":18}},"context":{"diagnostics":[]}},"id":275,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":275,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":26},"end":{"line":0,"character":26}},"context":{"diagnostics":[]}},"id":276,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":276,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":277,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":277,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":278,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":278,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":29},"end":{"line":0,"character":29}},"context":{"diagnostics":[]}},"id":279,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":279,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":34},"end":{"line":0,"character":34}},"context":{"diagnostics":[]}},"id":280,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":280,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":38},"end":{"line":0,"character":38}},"context":{"diagnostics":[]}},"id":281,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":281,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":39},"end":{"line":0,"character":39}},"context":{"diagnostics":[]}},"id":282,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":282,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":41},"end":{"line":0,"character":41}},"context":{"diagnostics":[]}},"id":283,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":283,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":43},"end":{"line":0,"character":43}},"context":{"diagnostics":[]}},"id":284,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":284,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":44},"end":{"line":0,"character":44}},"context":{"diagnostics":[]}},"id":285,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":285,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":5},"end":{"line":0,"character":5}},"context":{"diagnostics":[]}},"id":286,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":286,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":5},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":287,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":287,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":288,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":288,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":289,"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"id":289,"jsonrpc":"2.0","result":[{"newText":"\n  ","range":{"end":{"character":3,"line":24},"start":{"character":26,"line":23}}},{"newText":"\n  ","range":{"end":{"character":4,"line":25},"start":{"character":29,"line":24}}},{"newText":"\n","range":{"end":{"character":0,"line":32},"start":{"character":27,"line":30}}},{"newText":"\n","range":{"end":{"character":0,"line":34},"start":{"character":1,"line":32}}}]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server091364670/sketch/sketch_may25a.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":290,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":290,"jsonrpc":"2.0","result":[]}






Started logging.

>>>
Content-Length: 2201

{"method":"initialize","params":{"processId":79719,"rootPath":"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch","rootUri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 1485

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\n\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 22 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n  pinMode(redPin, OUTPUT);\n   pinMode(greenPin, OUTPUT);\n    pinMode(bluePin, OUTPUT);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\")\n\n  if (distance \u003c= 10) {\n     \n     analogWrite(redPin, 255);\n     analogWrite(redPin, 0);\n     analogWrite(redPin, 0);\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20){\n  analogWrite(redPin, 255);\n     analogWrite(redPin, 0);\n     analogWrite(redPin, 0);\n  }\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":1,"jsonrpc":"2.0"}Content-Length: 325

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"context":{"diagnostics":[]}},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 627

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":4,"line":35},"start":{"character":2,"line":35}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":1}}Content-Length: 1923

{"id":1,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":45},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}Content-Length: 36

{"id":2,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 1923

{"id":3,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":45},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7.4074074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7.4074074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11.111111111111111}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11.111111111111111}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14.814814814814815}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14.814814814814815}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18.518518518518519}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18.518518518518519}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22.222222222222221}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22.222222222222221}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25.925925925925927}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25.925925925925927}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29.62962962962963}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29.62962962962963}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33.333333333333336}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33.333333333333336}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37.037037037037038}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37.037037037037038}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40.74074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40.74074074074074}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44.444444444444443}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44.444444444444443}}}
>>>
Content-Length: 1489

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":2},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\n\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 22 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n  pinMode(redPin, OUTPUT);\n   pinMode(greenPin, OUTPUT);\n    pinMode(bluePin, OUTPUT);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\")\n\n  if (distance \u003c= 10) {\n     \n     analogWrite(redPin, 255);\n     analogWrite(redPin, 0);\n     analogWrite(redPin, 0);\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20){\n  analogWrite(redPin, 255);\n     analogWrite(redPin, 0);\n     analogWrite(redPin, 0);\n  }\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":23}},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":4,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 1923

{"id":5,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":45},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":28},"end":{"line":42,"character":28}},"context":{"diagnostics":[]}},"id":6,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":6,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 62

{"method":"$/cancelRequest","params":{"id":2},"jsonrpc":"2.0"}Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":28}},"id":7,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":7,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 62

{"method":"$/cancelRequest","params":{"id":4},"jsonrpc":"2.0"}
<<<
Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48.148148148148145}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48.148148148148145}}}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":29}},"id":8,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":8,"jsonrpc":"2.0","result":null}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51.851851851851855}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51.851851851851855}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55.555555555555557}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55.555555555555557}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59.25925925925926}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59.25925925925926}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62.962962962962962}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62.962962962962962}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66.666666666666671}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66.666666666666671}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70.370370370370367}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70.370370370370367}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/27","percentage":74.074074074074076}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/27","percentage":77.777777777777771}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/27","percentage":81.481481481481481}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/27","percentage":85.18518518518519}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/27","percentage":88.888888888888886}}}
>>>
Content-Length: 275

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":9,"jsonrpc":"2.0"}
<<<
Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/27","percentage":92.592592592592595}}}Content-Length: 1199

{"id":9,"jsonrpc":"2.0","result":[{"newText":"\n  ","range":{"end":{"character":3,"line":24},"start":{"character":26,"line":23}}},{"newText":"\n  ","range":{"end":{"character":4,"line":25},"start":{"character":29,"line":24}}},{"newText":"\n\n    ","range":{"end":{"character":2,"line":35},"start":{"character":23,"line":33}}},{"newText":"\n\n    ","range":{"end":{"character":5,"line":37},"start":{"character":23,"line":35}}},{"newText":"\n    ","range":{"end":{"character":5,"line":38},"start":{"character":30,"line":37}}},{"newText":"\n    ","range":{"end":{"character":5,"line":39},"start":{"character":28,"line":38}}},{"newText":"\n  ","range":{"end":{"character":4,"line":40},"start":{"character":3,"line":40}}},{"newText":" ","range":{"end":{"character":44,"line":40},"start":{"character":44,"line":40}}},{"newText":"\n    ","range":{"end":{"character":2,"line":41},"start":{"character":45,"line":40}}},{"newText":"\n    ","range":{"end":{"character":5,"line":42},"start":{"character":27,"line":41}}},{"newText":"\n    ","range":{"end":{"character":5,"line":43},"start":{"character":28,"line":42}}},{"newText":"\n","range":{"end":{"character":0,"line":47},"start":{"character":1,"line":45}}}]}
>>>
Content-Length: 1440

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":14},"contentChanges":[{"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":5}},"rangeLength":1,"text":""},{"range":{"start":{"line":42,"character":4},"end":{"line":42,"character":5}},"rangeLength":1,"text":""},{"range":{"start":{"line":41,"character":2},"end":{"line":41,"character":2}},"text":"  "},{"range":{"start":{"line":40,"character":44},"end":{"line":40,"character":44}},"text":" "},{"range":{"start":{"line":40,"character":3},"end":{"line":40,"character":3}},"text":"\n "},{"range":{"start":{"line":39,"character":4},"end":{"line":39,"character":5}},"rangeLength":1,"text":""},{"range":{"start":{"line":38,"character":4},"end":{"line":38,"character":5}},"rangeLength":1,"text":""},{"range":{"start":{"line":37,"character":0},"end":{"line":37,"character":1}},"rangeLength":1,"text":""},{"range":{"start":{"line":36,"character":0},"end":{"line":36,"character":5}},"rangeLength":5,"text":""},{"range":{"start":{"line":35,"character":2},"end":{"line":35,"character":2}},"text":"  "},{"range":{"start":{"line":25,"character":2},"end":{"line":25,"character":4}},"rangeLength":2,"text":""},{"range":{"start":{"line":24,"character":2},"end":{"line":24,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/27","percentage":96.296296296296291}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 853

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":6,"line":35},"start":{"character":4,"line":35}},"severity":1,"source":"clang"},{"code":"readability-misleading-indentation","message":"Different indentation for 'if' and corresponding 'else'","range":{"end":{"character":6,"line":41},"start":{"character":2,"line":41}},"severity":2,"source":"clang-tidy"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":14}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":43,"character":27},"end":{"line":43,"character":27}},"context":{"diagnostics":[]}},"id":10,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":10,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":11,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":11,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":46},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 1485

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":15},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\n\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 22 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\")\n\n    if (distance \u003c= 10) {\n\n    analogWrite(redPin, 255);\n    analogWrite(redPin, 0);\n    analogWrite(redPin, 0);\n  }\n  else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 255);\n    analogWrite(redPin, 0);\n    analogWrite(redPin, 0);\n  }\n}\n\n"}]},"jsonrpc":"2.0"}Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":39,"character":27},"end":{"line":39,"character":27}},"context":{"diagnostics":[]}},"id":12,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":12,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":13,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":13,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":46},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":21}},"id":14,"jsonrpc":"2.0"}
<<<
Content-Length: 248

{"id":14,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":35,"character":4}},"id":15,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":15,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 527

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":35,"character":4},"end":{"line":35,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":35,"character":4},"end":{"line":35,"character":6}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]}},"id":16,"jsonrpc":"2.0"}
<<<
Content-Length: 558

{"id":16,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":6,"line":35},"start":{"character":4,"line":35}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp":[{"newText":";","range":{"end":{"character":23,"line":33},"start":{"character":23,"line":33}}}]}},"isPreferred":true,"kind":"quickfix","title":"insert ';'"}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":33,"character":23},"end":{"line":33,"character":23}},"context":{"diagnostics":[]}},"id":17,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":17,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":16},"contentChanges":[{"range":{"start":{"line":33,"character":23},"end":{"line":33,"character":23}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":1,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":1,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 653

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"readability-misleading-indentation","message":"Different indentation for 'if' and corresponding 'else'","range":{"end":{"character":6,"line":41},"start":{"character":2,"line":41}},"severity":2,"source":"clang-tidy"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":16}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":33,"character":24},"end":{"line":33,"character":24}},"context":{"diagnostics":[]}},"id":18,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":18,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":19,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":19,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":46},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":37,"character":27}},"id":20,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"id":20,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":16}},"id":21,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":21,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":9}},"id":22,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"id":22,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":8}},"id":23,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":23,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":3}},"id":24,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":24,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":2}},"id":25,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":25,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 552

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":41,"character":2},"end":{"line":41,"character":2}},"context":{"diagnostics":[{"range":{"start":{"line":41,"character":2},"end":{"line":41,"character":6}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]}},"id":26,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":26,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":17},"contentChanges":[{"range":{"start":{"line":41,"character":0},"end":{"line":41,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 653

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"readability-misleading-indentation","message":"Different indentation for 'if' and corresponding 'else'","range":{"end":{"character":4,"line":41},"start":{"character":0,"line":41}},"severity":2,"source":"clang-tidy"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":17}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":18},"contentChanges":[{"range":{"start":{"line":40,"character":3},"end":{"line":41,"character":0}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":18}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":40,"character":3},"end":{"line":40,"character":3}},"context":{"diagnostics":[]}},"id":27,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":27,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":28,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":28,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":45},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":19},"contentChanges":[{"range":{"start":{"line":40,"character":3},"end":{"line":40,"character":3}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":19}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":40,"character":4},"end":{"line":40,"character":4}},"context":{"diagnostics":[]}},"id":29,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":29,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":30,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":30,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":45},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":31,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"id":31,"jsonrpc":"2.0","result":[{"newText":"\n\n  ","range":{"end":{"character":4,"line":35},"start":{"character":24,"line":33}}},{"newText":"\n","range":{"end":{"character":0,"line":47},"start":{"character":1,"line":45}}}]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":20},"contentChanges":[{"range":{"start":{"line":35,"character":2},"end":{"line":35,"character":4}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":20}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":40,"character":4},"end":{"line":40,"character":4}},"context":{"diagnostics":[]}},"id":32,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":32,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":33,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":33,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":45},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":41,"character":29},"end":{"line":41,"character":29}},"context":{"diagnostics":[]}},"id":34,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":34,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":27},"end":{"line":42,"character":27}},"context":{"diagnostics":[]}},"id":35,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":35,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":43,"character":27},"end":{"line":43,"character":27}},"context":{"diagnostics":[]}},"id":36,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":36,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":45,"character":1},"end":{"line":45,"character":1}},"context":{"diagnostics":[]}},"id":37,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":37,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":44,"character":3},"end":{"line":44,"character":3}},"context":{"diagnostics":[]}},"id":38,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":38,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":21},"contentChanges":[{"range":{"start":{"line":44,"character":3},"end":{"line":44,"character":3}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":21}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":22},"contentChanges":[{"range":{"start":{"line":44,"character":4},"end":{"line":44,"character":4}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 609

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'e'","range":{"end":{"character":5,"line":44},"start":{"character":4,"line":44}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":22}}
>>>
Content-Length: 508

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":44,"character":5},"end":{"line":44,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":44,"character":4},"end":{"line":44,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'e'"}]}},"id":39,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":39,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":40,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":40,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":45},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":23},"contentChanges":[{"range":{"start":{"line":44,"character":5},"end":{"line":44,"character":5}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 610

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'el'","range":{"end":{"character":6,"line":44},"start":{"character":4,"line":44}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":23}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":24},"contentChanges":[{"range":{"start":{"line":44,"character":6},"end":{"line":44,"character":6}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'els'","range":{"end":{"character":7,"line":44},"start":{"character":4,"line":44}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":24}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":25},"contentChanges":[{"range":{"start":{"line":44,"character":7},"end":{"line":44,"character":7}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 595

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"expected_statement","message":"Expected statement","range":{"end":{"character":1,"line":45},"start":{"character":0,"line":45}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":25}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":26},"contentChanges":[{"range":{"start":{"line":44,"character":8},"end":{"line":44,"character":8}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 595

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"expected_statement","message":"Expected statement","range":{"end":{"character":1,"line":45},"start":{"character":0,"line":45}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":26}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":27},"contentChanges":[{"range":{"start":{"line":44,"character":9},"end":{"line":44,"character":9}},"text":"{}"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":27}}
>>>
Content-Length: 346

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":28},"contentChanges":[{"range":{"start":{"line":44,"character":10},"end":{"line":44,"character":10}},"text":"\n    \n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":28}}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":6}},"id":41,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":41,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":15,"line":41},"start":{"character":4,"line":41}}}}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":42,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":42,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":47},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":4}},"id":43,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":43,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":15,"line":41},"start":{"character":4,"line":41}}}}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":4}},"id":44,"jsonrpc":"2.0"}
<<<
Content-Length: 564

{"id":44,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":37},"start":{"character":4,"line":37}}},{"kind":1,"range":{"end":{"character":15,"line":38},"start":{"character":4,"line":38}}},{"kind":1,"range":{"end":{"character":15,"line":39},"start":{"character":4,"line":39}}},{"kind":1,"range":{"end":{"character":15,"line":41},"start":{"character":4,"line":41}}},{"kind":1,"range":{"end":{"character":15,"line":42},"start":{"character":4,"line":42}}},{"kind":1,"range":{"end":{"character":15,"line":43},"start":{"character":4,"line":43}}}]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":41,"character":4},"end":{"line":44,"character":10}},"context":{"diagnostics":[]}},"id":45,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":45,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":41,"character":4},"end":{"line":43,"character":27}},"context":{"diagnostics":[]}},"id":46,"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"id":46,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":27,"line":43},"start":{"character":4,"line":41}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 417

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":29},"contentChanges":[{"range":{"start":{"line":45,"character":4},"end":{"line":45,"character":4}},"text":"analogWrite(redPin, 255);\n    analogWrite(redPin, 0);\n    analogWrite(redPin, 0);"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":29}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":17}},"id":47,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":47,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":48,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":48,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":49},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":16}},"id":49,"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"id":49,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":27},"end":{"line":47,"character":27}},"context":{"diagnostics":[]}},"id":50,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":50,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":15}},"id":51,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"id":51,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":17}},"id":52,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":52,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":22}},"id":53,"jsonrpc":"2.0"}
<<<
Content-Length: 310

{"id":53,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":23}},"id":54,"jsonrpc":"2.0"}
<<<
Content-Length: 310

{"id":54,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":23,"line":45},"start":{"character":22,"line":45}}}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":25}},"id":55,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":55,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":24}},"id":56,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":56,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":24},"end":{"line":46,"character":25}},"context":{"diagnostics":[]}},"id":57,"jsonrpc":"2.0"}
<<<
Content-Length: 448

{"id":57,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":25,"line":46},"start":{"character":24,"line":46}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":24}},"id":58,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":58,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":24}},"id":59,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":59,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":45,"character":25},"end":{"line":45,"character":25}},"context":{"diagnostics":[]}},"id":60,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":60,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":45,"character":28},"end":{"line":45,"character":28}},"context":{"diagnostics":[]}},"id":61,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":61,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":27}},"id":62,"jsonrpc":"2.0"}
<<<
Content-Length: 828

{"id":62,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":37},"start":{"character":4,"line":37}}},{"kind":1,"range":{"end":{"character":15,"line":38},"start":{"character":4,"line":38}}},{"kind":1,"range":{"end":{"character":15,"line":39},"start":{"character":4,"line":39}}},{"kind":1,"range":{"end":{"character":15,"line":41},"start":{"character":4,"line":41}}},{"kind":1,"range":{"end":{"character":15,"line":42},"start":{"character":4,"line":42}}},{"kind":1,"range":{"end":{"character":15,"line":43},"start":{"character":4,"line":43}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}},{"kind":1,"range":{"end":{"character":15,"line":47},"start":{"character":4,"line":47}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":45,"character":27},"end":{"line":45,"character":27}},"context":{"diagnostics":[]}},"id":63,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":63,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":30},"contentChanges":[{"range":{"start":{"line":45,"character":26},"end":{"line":45,"character":27}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":30}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":31},"contentChanges":[{"range":{"start":{"line":45,"character":25},"end":{"line":45,"character":26}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":31}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":32},"contentChanges":[{"range":{"start":{"line":45,"character":24},"end":{"line":45,"character":25}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 599

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":25,"line":45},"start":{"character":24,"line":45}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":32}}
>>>
Content-Length: 500

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":45,"character":24},"end":{"line":45,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":45,"character":24},"end":{"line":45,"character":25}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":64,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":64,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":65,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":65,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":49},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":33},"contentChanges":[{"range":{"start":{"line":45,"character":24},"end":{"line":45,"character":24}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":33}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":45,"character":25},"end":{"line":45,"character":25}},"context":{"diagnostics":[]}},"id":66,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":66,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":67,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":67,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":49},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":25}},"id":68,"jsonrpc":"2.0"}
<<<
Content-Length: 828

{"id":68,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":37},"start":{"character":4,"line":37}}},{"kind":1,"range":{"end":{"character":15,"line":38},"start":{"character":4,"line":38}}},{"kind":1,"range":{"end":{"character":15,"line":39},"start":{"character":4,"line":39}}},{"kind":1,"range":{"end":{"character":15,"line":41},"start":{"character":4,"line":41}}},{"kind":1,"range":{"end":{"character":15,"line":42},"start":{"character":4,"line":42}}},{"kind":1,"range":{"end":{"character":15,"line":43},"start":{"character":4,"line":43}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}},{"kind":1,"range":{"end":{"character":15,"line":47},"start":{"character":4,"line":47}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":25},"end":{"line":46,"character":25}},"context":{"diagnostics":[]}},"id":69,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":69,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":34},"contentChanges":[{"range":{"start":{"line":46,"character":24},"end":{"line":46,"character":25}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 599

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":25,"line":46},"start":{"character":24,"line":46}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":34}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":35},"contentChanges":[{"range":{"start":{"line":46,"character":24},"end":{"line":46,"character":24}},"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":35}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":36},"contentChanges":[{"range":{"start":{"line":46,"character":25},"end":{"line":46,"character":25}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":36}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":37},"contentChanges":[{"range":{"start":{"line":46,"character":26},"end":{"line":46,"character":26}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":37}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":27},"end":{"line":46,"character":27}},"context":{"diagnostics":[]}},"id":70,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":70,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":71,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":71,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":49},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":35,"character":11}},"id":72,"jsonrpc":"2.0"}
<<<
Content-Length: 248

{"id":72,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":14}},"id":73,"jsonrpc":"2.0"}
<<<
Content-Length: 224

{"id":73,"jsonrpc":"2.0","result":[{"range":{"end":{"character":19,"line":108},"start":{"character":14,"line":108}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}]}
>>>
Content-Length: 6071

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","languageId":"cpp","version":1,"text":"/*\n Print.cpp - Base class that provides print() and println()\n Copyright (c) 2008 David A. Mellis.  All right reserved.\n \n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n \n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n \n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n \n Modified 23 November 2006 by David A. Mellis\n Modified 03 August 2015 by Chuck Todd\n */\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n#include \"Arduino.h\"\n\n#include \"Print.h\"\n\n// Public Methods //////////////////////////////////////////////////////////////\n\n/* default implementation: may be overridden */\nsize_t Print::write(const uint8_t *buffer, size_t size)\n{\n  size_t n = 0;\n  while (size--) {\n    if (write(*buffer++)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const __FlashStringHelper *ifsh)\n{\n  PGM_P p = reinterpret_cast\u003cPGM_P\u003e(ifsh);\n  size_t n = 0;\n  while (1) {\n    unsigned char c = pgm_read_byte(p++);\n    if (c == 0) break;\n    if (write(c)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const String \u0026s)\n{\n  return write(s.c_str(), s.length());\n}\n\nsize_t Print::print(const char str[])\n{\n  return write(str);\n}\n\nsize_t Print::print(char c)\n{\n  return write(c);\n}\n\nsize_t Print::print(unsigned char b, int base)\n{\n  return print((unsigned long) b, base);\n}\n\nsize_t Print::print(int n, int base)\n{\n  return print((long) n, base);\n}\n\nsize_t Print::print(unsigned int n, int base)\n{\n  return print((unsigned long) n, base);\n}\n\nsize_t Print::print(long n, int base)\n{\n  if (base == 0) {\n    return write(n);\n  } else if (base == 10) {\n    if (n \u003c 0) {\n      int t = print('-');\n      n = -n;\n      return printNumber(n, 10) + t;\n    }\n    return printNumber(n, 10);\n  } else {\n    return printNumber(n, base);\n  }\n}\n\nsize_t Print::print(unsigned long n, int base)\n{\n  if (base == 0) return write(n);\n  else return printNumber(n, base);\n}\n\nsize_t Print::print(double n, int digits)\n{\n  return printFloat(n, digits);\n}\n\nsize_t Print::println(const __FlashStringHelper *ifsh)\n{\n  size_t n = print(ifsh);\n  n += println();\n  return n;\n}\n\nsize_t Print::print(const Printable\u0026 x)\n{\n  return x.printTo(*this);\n}\n\nsize_t Print::println(void)\n{\n  return write(\"\\r\\n\");\n}\n\nsize_t Print::println(const String \u0026s)\n{\n  size_t n = print(s);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const char c[])\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(char c)\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned char b, int base)\n{\n  size_t n = print(b, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(double num, int digits)\n{\n  size_t n = print(num, digits);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const Printable\u0026 x)\n{\n  size_t n = print(x);\n  n += println();\n  return n;\n}\n\n// Private Methods /////////////////////////////////////////////////////////////\n\nsize_t Print::printNumber(unsigned long n, uint8_t base)\n{\n  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.\n  char *str = \u0026buf[sizeof(buf) - 1];\n\n  *str = '\\0';\n\n  // prevent crash if called with base == 1\n  if (base \u003c 2) base = 10;\n\n  do {\n    char c = n % base;\n    n /= base;\n\n    *--str = c \u003c 10 ? c + '0' : c + 'A' - 10;\n  } while(n);\n\n  return write(str);\n}\n\nsize_t Print::printFloat(double number, uint8_t digits) \n{ \n  size_t n = 0;\n  \n  if (isnan(number)) return print(\"nan\");\n  if (isinf(number)) return print(\"inf\");\n  if (number \u003e 4294967040.0) return print (\"ovf\");  // constant determined empirically\n  if (number \u003c-4294967040.0) return print (\"ovf\");  // constant determined empirically\n  \n  // Handle negative numbers\n  if (number \u003c 0.0)\n  {\n     n += print('-');\n     number = -number;\n  }\n\n  // Round correctly so that print(1.999, 2) prints as \"2.00\"\n  double rounding = 0.5;\n  for (uint8_t i=0; i\u003cdigits; ++i)\n    rounding /= 10.0;\n  \n  number += rounding;\n\n  // Extract the integer part of the number and print it\n  unsigned long int_part = (unsigned long)number;\n  double remainder = number - (double)int_part;\n  n += print(int_part);\n\n  // Print the decimal point, but only if there are digits beyond\n  if (digits \u003e 0) {\n    n += print('.'); \n  }\n\n  // Extract digits from the remainder one at a time\n  while (digits-- \u003e 0)\n  {\n    remainder *= 10.0;\n    unsigned int toPrint = (unsigned int)(remainder);\n    n += print(toPrint);\n    remainder -= toPrint; \n  } \n  \n  return n;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 184

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":15}},"id":74,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":74,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":15}},"id":75,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":75,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 522

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":76,"jsonrpc":"2.0"}
<<<
Content-Length: 448

{"id":76,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":3},"end":{"line":48,"character":3}},"context":{"diagnostics":[]}},"id":77,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":77,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":12}},"id":78,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":78,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":15,"line":47},"start":{"character":4,"line":47}}}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":38},"contentChanges":[{"range":{"start":{"line":48,"character":3},"end":{"line":48,"character":3}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":38}}
>>>
Content-Length: 442

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":40},"contentChanges":[{"range":{"start":{"line":49,"character":2},"end":{"line":49,"character":2}},"text":"\n  "},{"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":40}}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":7},"end":{"line":0,"character":7}},"context":{"diagnostics":[]}},"id":79,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":79,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":80,"jsonrpc":"2.0"}
<<<
Content-Length: 1924

{"id":80,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":8},"end":{"line":0,"character":8}},"context":{"diagnostics":[]}},"id":81,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":81,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}},"id":82,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":82,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"context":{"diagnostics":[]}},"id":83,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":83,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}},"id":84,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":84,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":85,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":85,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"context":{"diagnostics":[]}},"id":86,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":86,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"context":{"diagnostics":[]}},"id":87,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":87,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":16}},"id":88,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":88,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":15}},"id":89,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":89,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":16}},"id":90,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":90,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":16}},"id":91,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":91,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 522

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":16},"end":{"line":30,"character":16}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":92,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":92,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":24}},"id":93,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":93,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 522

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":24},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":94,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":94,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":18}},"id":95,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":95,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":17}},"id":96,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":96,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 522

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":97,"jsonrpc":"2.0"}
<<<
Content-Length: 448

{"id":97,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":24,"character":22}},"id":98,"jsonrpc":"2.0"}
<<<
Content-Length: 221

{"id":98,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":43},"start":{"character":8,"line":43}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}]}
>>>
Content-Length: 8302

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n\n#include \u003cavr/pgmspace.h\u003e\n#include \u003cavr/io.h\u003e\n#include \u003cavr/interrupt.h\u003e\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)\u003c(b)?(a):(b))\n#define max(a,b) ((a)\u003e(b)?(a):(b))\n#define abs(x) ((x)\u003e0?(x):-(x))\n#define constrain(amt,low,high) ((amt)\u003c(low)?(low):((amt)\u003e(high)?(high):(amt)))\n#define round(x)     ((x)\u003e=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) \u0026 0xff))\n#define highByte(w) ((uint8_t) ((w) \u003e\u003e 8))\n\n#define bitRead(value, bit) (((value) \u003e\u003e (bit)) \u0026 0x01)\n#define bitSet(value, bit) ((value) |= (1UL \u003c\u003c (bit)))\n#define bitClear(value, bit) ((value) \u0026= ~(1UL \u003c\u003c (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL \u003c\u003c (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL \u003c\u003c (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) \u0026\u0026 defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}},"jsonrpc":"2.0"}Content-Length: 184

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":18,"character":12}},"id":99,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":99,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":120},"start":{"character":9,"line":120}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}]}
>>>
Content-Length: 5693

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n  HardwareSerial.h - Hardware serial library for Wiring\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 28 September 2010 by Mark Sproul\n  Modified 14 August 2012 by Alarus\n  Modified 3 December 2013 by Matthijs Kooijman\n*/\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include \u003cinttypes.h\u003e\n\n#include \"Stream.h\"\n\n// Define constants and variables for buffering incoming serial data.  We're\n// using a ring buffer (I think), in which head is the index of the location\n// to which to write the next incoming character and tail is the index of the\n// location from which to read.\n// NOTE: a \"power of 2\" buffer size is reccomended to dramatically\n//       optimize all the modulo operations for ring buffers.\n// WARNING: When buffer sizes are increased to \u003e 256, the buffer index\n// variables are automatically increased in size, but the extra\n// atomicity guards needed for that are not implemented. This will\n// often work, but occasionally a race condition can occur that makes\n// Serial behave erratically. See https://github.com/arduino/Arduino/issues/2405\n#if !defined(SERIAL_TX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) \u003c 1023)\n#define SERIAL_TX_BUFFER_SIZE 16\n#else\n#define SERIAL_TX_BUFFER_SIZE 64\n#endif\n#endif\n#if !defined(SERIAL_RX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) \u003c 1023)\n#define SERIAL_RX_BUFFER_SIZE 16\n#else\n#define SERIAL_RX_BUFFER_SIZE 64\n#endif\n#endif\n#if (SERIAL_TX_BUFFER_SIZE\u003e256)\ntypedef uint16_t tx_buffer_index_t;\n#else\ntypedef uint8_t tx_buffer_index_t;\n#endif\n#if  (SERIAL_RX_BUFFER_SIZE\u003e256)\ntypedef uint16_t rx_buffer_index_t;\n#else\ntypedef uint8_t rx_buffer_index_t;\n#endif\n\n// Define config for Serial.begin(baud, config);\n#define SERIAL_5N1 0x00\n#define SERIAL_6N1 0x02\n#define SERIAL_7N1 0x04\n#define SERIAL_8N1 0x06\n#define SERIAL_5N2 0x08\n#define SERIAL_6N2 0x0A\n#define SERIAL_7N2 0x0C\n#define SERIAL_8N2 0x0E\n#define SERIAL_5E1 0x20\n#define SERIAL_6E1 0x22\n#define SERIAL_7E1 0x24\n#define SERIAL_8E1 0x26\n#define SERIAL_5E2 0x28\n#define SERIAL_6E2 0x2A\n#define SERIAL_7E2 0x2C\n#define SERIAL_8E2 0x2E\n#define SERIAL_5O1 0x30\n#define SERIAL_6O1 0x32\n#define SERIAL_7O1 0x34\n#define SERIAL_8O1 0x36\n#define SERIAL_5O2 0x38\n#define SERIAL_6O2 0x3A\n#define SERIAL_7O2 0x3C\n#define SERIAL_8O2 0x3E\n\nclass HardwareSerial : public Stream\n{\n  protected:\n    volatile uint8_t * const _ubrrh;\n    volatile uint8_t * const _ubrrl;\n    volatile uint8_t * const _ucsra;\n    volatile uint8_t * const _ucsrb;\n    volatile uint8_t * const _ucsrc;\n    volatile uint8_t * const _udr;\n    // Has any byte been written to the UART since begin()\n    bool _written;\n\n    volatile rx_buffer_index_t _rx_buffer_head;\n    volatile rx_buffer_index_t _rx_buffer_tail;\n    volatile tx_buffer_index_t _tx_buffer_head;\n    volatile tx_buffer_index_t _tx_buffer_tail;\n\n    // Don't put any members after these buffers, since only the first\n    // 32 bytes of this struct can be accessed quickly using the ldd\n    // instruction.\n    unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];\n    unsigned char _tx_buffer[SERIAL_TX_BUFFER_SIZE];\n\n  public:\n    inline HardwareSerial(\n      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,\n      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,\n      volatile uint8_t *ucsrc, volatile uint8_t *udr);\n    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }\n    void begin(unsigned long, uint8_t);\n    void end();\n    virtual int available(void);\n    virtual int peek(void);\n    virtual int read(void);\n    virtual int availableForWrite(void);\n    virtual void flush(void);\n    virtual size_t write(uint8_t);\n    inline size_t write(unsigned long n) { return write((uint8_t)n); }\n    inline size_t write(long n) { return write((uint8_t)n); }\n    inline size_t write(unsigned int n) { return write((uint8_t)n); }\n    inline size_t write(int n) { return write((uint8_t)n); }\n    using Print::write; // pull in write(str) and write(buf, size) from Print\n    operator bool() { return true; }\n\n    // Interrupt handlers - Not intended to be called externally\n    inline void _rx_complete_irq(void);\n    void _tx_udr_empty_irq(void);\n};\n\n#if defined(UBRRH) || defined(UBRR0H)\n  extern HardwareSerial Serial;\n  #define HAVE_HWSERIAL0\n#endif\n#if defined(UBRR1H)\n  extern HardwareSerial Serial1;\n  #define HAVE_HWSERIAL1\n#endif\n#if defined(UBRR2H)\n  extern HardwareSerial Serial2;\n  #define HAVE_HWSERIAL2\n#endif\n#if defined(UBRR3H)\n  extern HardwareSerial Serial3;\n  #define HAVE_HWSERIAL3\n#endif\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#endif\n"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":7,"character":1}},"id":100,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":100,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":7,"character":1}},"id":101,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":101,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 277

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":102,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":102,"jsonrpc":"2.0","result":[{"newText":"\n","range":{"end":{"character":0,"line":51},"start":{"character":3,"line":48}}},{"newText":"\n","range":{"end":{"character":0,"line":53},"start":{"character":1,"line":51}}}]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":2,"character":9}},"id":103,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":103,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":7,"character":22},"end":{"line":7,"character":22}},"context":{"diagnostics":[]}},"id":104,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":104,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":4},"end":{"line":0,"character":4}},"context":{"diagnostics":[]}},"id":105,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":105,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":5},"end":{"line":0,"character":5}},"context":{"diagnostics":[]}},"id":106,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":106,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":9}},"context":{"diagnostics":[]}},"id":107,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":107,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":13},"end":{"line":0,"character":13}},"context":{"diagnostics":[]}},"id":108,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":108,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":14},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}},"id":109,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":109,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":110,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":110,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":19},"end":{"line":0,"character":19}},"context":{"diagnostics":[]}},"id":111,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":111,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":112,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":112,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":18},"end":{"line":0,"character":18}},"context":{"diagnostics":[]}},"id":113,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":113,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":19},"end":{"line":0,"character":19}},"context":{"diagnostics":[]}},"id":114,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":114,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":7},"end":{"line":0,"character":7}},"context":{"diagnostics":[]}},"id":115,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":115,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"context":{"diagnostics":[]}},"id":116,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":116,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":16},"end":{"line":0,"character":16}},"context":{"diagnostics":[]}},"id":117,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":117,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":7},"end":{"line":0,"character":7}},"context":{"diagnostics":[]}},"id":118,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":118,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":9}},"context":{"diagnostics":[]}},"id":119,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":119,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"context":{"diagnostics":[]}},"id":120,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":120,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":16},"end":{"line":0,"character":16}},"context":{"diagnostics":[]}},"id":121,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":121,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":122,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":122,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":22},"end":{"line":0,"character":22}},"context":{"diagnostics":[]}},"id":123,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":123,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":124,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":124,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":16,"character":14},"end":{"line":16,"character":14}},"context":{"diagnostics":[]}},"id":125,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":125,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":17}},"id":126,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":126,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":17}},"id":127,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":127,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":18}},"id":128,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":128,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":18}},"id":129,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":129,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":130,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":130,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":19}},"id":131,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":131,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":19}},"id":132,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":132,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":19},"end":{"line":30,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":133,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":133,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":21}},"id":134,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":134,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":135,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":135,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":25,"character":27},"end":{"line":25,"character":27}},"context":{"diagnostics":[]}},"id":136,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":136,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":17}},"id":137,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":137,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":138,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":138,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":25,"character":22}},"id":139,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"id":139,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `OUTPUT`  \n\n---\n```cpp\n#define OUTPUT 0x1\n```"},"range":{"end":{"character":25,"line":25},"start":{"character":19,"line":25}}}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":25,"character":23}},"id":140,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":140,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":43},"start":{"character":8,"line":43}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}]}
>>>
Content-Length: 8302

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n\n#include \u003cavr/pgmspace.h\u003e\n#include \u003cavr/io.h\u003e\n#include \u003cavr/interrupt.h\u003e\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)\u003c(b)?(a):(b))\n#define max(a,b) ((a)\u003e(b)?(a):(b))\n#define abs(x) ((x)\u003e0?(x):-(x))\n#define constrain(amt,low,high) ((amt)\u003c(low)?(low):((amt)\u003e(high)?(high):(amt)))\n#define round(x)     ((x)\u003e=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) \u0026 0xff))\n#define highByte(w) ((uint8_t) ((w) \u003e\u003e 8))\n\n#define bitRead(value, bit) (((value) \u003e\u003e (bit)) \u0026 0x01)\n#define bitSet(value, bit) ((value) |= (1UL \u003c\u003c (bit)))\n#define bitClear(value, bit) ((value) \u0026= ~(1UL \u003c\u003c (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL \u003c\u003c (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL \u003c\u003c (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) \u0026\u0026 defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}},"jsonrpc":"2.0"}Content-Length: 184

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":5,"character":15}},"id":141,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":141,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":3,"character":9}},"id":142,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":142,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":143,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":143,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":37,"character":21}},"id":144,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":144,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":18,"character":13}},"id":145,"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"id":145,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":120},"start":{"character":9,"line":120}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}]}
>>>
Content-Length: 5693

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n  HardwareSerial.h - Hardware serial library for Wiring\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 28 September 2010 by Mark Sproul\n  Modified 14 August 2012 by Alarus\n  Modified 3 December 2013 by Matthijs Kooijman\n*/\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include \u003cinttypes.h\u003e\n\n#include \"Stream.h\"\n\n// Define constants and variables for buffering incoming serial data.  We're\n// using a ring buffer (I think), in which head is the index of the location\n// to which to write the next incoming character and tail is the index of the\n// location from which to read.\n// NOTE: a \"power of 2\" buffer size is reccomended to dramatically\n//       optimize all the modulo operations for ring buffers.\n// WARNING: When buffer sizes are increased to \u003e 256, the buffer index\n// variables are automatically increased in size, but the extra\n// atomicity guards needed for that are not implemented. This will\n// often work, but occasionally a race condition can occur that makes\n// Serial behave erratically. See https://github.com/arduino/Arduino/issues/2405\n#if !defined(SERIAL_TX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) \u003c 1023)\n#define SERIAL_TX_BUFFER_SIZE 16\n#else\n#define SERIAL_TX_BUFFER_SIZE 64\n#endif\n#endif\n#if !defined(SERIAL_RX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) \u003c 1023)\n#define SERIAL_RX_BUFFER_SIZE 16\n#else\n#define SERIAL_RX_BUFFER_SIZE 64\n#endif\n#endif\n#if (SERIAL_TX_BUFFER_SIZE\u003e256)\ntypedef uint16_t tx_buffer_index_t;\n#else\ntypedef uint8_t tx_buffer_index_t;\n#endif\n#if  (SERIAL_RX_BUFFER_SIZE\u003e256)\ntypedef uint16_t rx_buffer_index_t;\n#else\ntypedef uint8_t rx_buffer_index_t;\n#endif\n\n// Define config for Serial.begin(baud, config);\n#define SERIAL_5N1 0x00\n#define SERIAL_6N1 0x02\n#define SERIAL_7N1 0x04\n#define SERIAL_8N1 0x06\n#define SERIAL_5N2 0x08\n#define SERIAL_6N2 0x0A\n#define SERIAL_7N2 0x0C\n#define SERIAL_8N2 0x0E\n#define SERIAL_5E1 0x20\n#define SERIAL_6E1 0x22\n#define SERIAL_7E1 0x24\n#define SERIAL_8E1 0x26\n#define SERIAL_5E2 0x28\n#define SERIAL_6E2 0x2A\n#define SERIAL_7E2 0x2C\n#define SERIAL_8E2 0x2E\n#define SERIAL_5O1 0x30\n#define SERIAL_6O1 0x32\n#define SERIAL_7O1 0x34\n#define SERIAL_8O1 0x36\n#define SERIAL_5O2 0x38\n#define SERIAL_6O2 0x3A\n#define SERIAL_7O2 0x3C\n#define SERIAL_8O2 0x3E\n\nclass HardwareSerial : public Stream\n{\n  protected:\n    volatile uint8_t * const _ubrrh;\n    volatile uint8_t * const _ubrrl;\n    volatile uint8_t * const _ucsra;\n    volatile uint8_t * const _ucsrb;\n    volatile uint8_t * const _ucsrc;\n    volatile uint8_t * const _udr;\n    // Has any byte been written to the UART since begin()\n    bool _written;\n\n    volatile rx_buffer_index_t _rx_buffer_head;\n    volatile rx_buffer_index_t _rx_buffer_tail;\n    volatile tx_buffer_index_t _tx_buffer_head;\n    volatile tx_buffer_index_t _tx_buffer_tail;\n\n    // Don't put any members after these buffers, since only the first\n    // 32 bytes of this struct can be accessed quickly using the ldd\n    // instruction.\n    unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];\n    unsigned char _tx_buffer[SERIAL_TX_BUFFER_SIZE];\n\n  public:\n    inline HardwareSerial(\n      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,\n      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,\n      volatile uint8_t *ucsrc, volatile uint8_t *udr);\n    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }\n    void begin(unsigned long, uint8_t);\n    void end();\n    virtual int available(void);\n    virtual int peek(void);\n    virtual int read(void);\n    virtual int availableForWrite(void);\n    virtual void flush(void);\n    virtual size_t write(uint8_t);\n    inline size_t write(unsigned long n) { return write((uint8_t)n); }\n    inline size_t write(long n) { return write((uint8_t)n); }\n    inline size_t write(unsigned int n) { return write((uint8_t)n); }\n    inline size_t write(int n) { return write((uint8_t)n); }\n    using Print::write; // pull in write(str) and write(buf, size) from Print\n    operator bool() { return true; }\n\n    // Interrupt handlers - Not intended to be called externally\n    inline void _rx_complete_irq(void);\n    void _tx_udr_empty_irq(void);\n};\n\n#if defined(UBRRH) || defined(UBRR0H)\n  extern HardwareSerial Serial;\n  #define HAVE_HWSERIAL0\n#endif\n#if defined(UBRR1H)\n  extern HardwareSerial Serial1;\n  #define HAVE_HWSERIAL1\n#endif\n#if defined(UBRR2H)\n  extern HardwareSerial Serial2;\n  #define HAVE_HWSERIAL2\n#endif\n#if defined(UBRR3H)\n  extern HardwareSerial Serial3;\n  #define HAVE_HWSERIAL3\n#endif\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#endif\n"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":2,"character":2}},"id":146,"jsonrpc":"2.0"}
<<<
Content-Length: 265

{"id":146,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `trigPin`  \n\n---\nType: `const int`  \nValue = `11`  \n\n---\n```cpp\nconst int trigPin = 11\n```"},"range":{"end":{"character":5,"line":2},"start":{"character":0,"line":2}}}}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":2,"character":1}},"id":147,"jsonrpc":"2.0"}
<<<
Content-Length: 265

{"id":147,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `trigPin`  \n\n---\nType: `const int`  \nValue = `11`  \n\n---\n```cpp\nconst int trigPin = 11\n```"},"range":{"end":{"character":5,"line":2},"start":{"character":0,"line":2}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":16,"character":14},"end":{"line":16,"character":14}},"context":{"diagnostics":[]}},"id":148,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":148,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":6,"character":22}},"id":149,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":149,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":3,"character":10}},"id":150,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":150,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":151,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":151,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":37}},"id":152,"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"id":152,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `distance`  \n\n---\nType: `float`  \nValue = `0.000000e+00`  \n\n---\n```cpp\nfloat distance = 0\n```"},"range":{"end":{"character":38,"line":40},"start":{"character":30,"line":40}}}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":37}},"id":153,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":153,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":36}},"id":154,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":154,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":18,"character":3}},"id":155,"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"id":155,"jsonrpc":"2.0","result":[{"range":{"end":{"character":23,"line":69},"start":{"character":17,"line":69}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp"}]}
>>>
Content-Length: 3001

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp","languageId":"cpp","version":1,"text":"/*\n  HardwareSerial0.cpp - Hardware serial library for Wiring\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 23 November 2006 by David A. Mellis\n  Modified 28 September 2010 by Mark Sproul\n  Modified 14 August 2012 by Alarus\n  Modified 3 December 2013 by Matthijs Kooijman\n*/\n\n#include \"Arduino.h\"\n#include \"HardwareSerial.h\"\n#include \"HardwareSerial_private.h\"\n\n// Each HardwareSerial is defined in its own file, since the linker pulls\n// in the entire file when any element inside is used. --gc-sections can\n// additionally cause unused symbols to be dropped, but ISRs have the\n// \"used\" attribute so are never dropped and they keep the\n// HardwareSerial instance in as well. Putting each instance in its own\n// file prevents the linker from pulling in any unused instances in the\n// first place.\n\n#if defined(HAVE_HWSERIAL0)\n\n#if defined(USART_RX_vect)\n  ISR(USART_RX_vect)\n#elif defined(USART0_RX_vect)\n  ISR(USART0_RX_vect)\n#elif defined(USART_RXC_vect)\n  ISR(USART_RXC_vect) // ATmega8\n#else\n  #error \"Don't know what the Data Received vector is called for Serial\"\n#endif\n  {\n    Serial._rx_complete_irq();\n  }\n\n#if defined(UART0_UDRE_vect)\nISR(UART0_UDRE_vect)\n#elif defined(UART_UDRE_vect)\nISR(UART_UDRE_vect)\n#elif defined(USART0_UDRE_vect)\nISR(USART0_UDRE_vect)\n#elif defined(USART_UDRE_vect)\nISR(USART_UDRE_vect)\n#else\n  #error \"Don't know what the Data Register Empty vector is called for Serial\"\n#endif\n{\n  Serial._tx_udr_empty_irq();\n}\n\n#if defined(UBRRH) \u0026\u0026 defined(UBRRL)\n  HardwareSerial Serial(\u0026UBRRH, \u0026UBRRL, \u0026UCSRA, \u0026UCSRB, \u0026UCSRC, \u0026UDR);\n#else\n  HardwareSerial Serial(\u0026UBRR0H, \u0026UBRR0L, \u0026UCSR0A, \u0026UCSR0B, \u0026UCSR0C, \u0026UDR0);\n#endif\n\n// Function that can be weakly referenced by serialEventRun to prevent\n// pulling in this file if it's not otherwise used.\nbool Serial0_available() {\n  return Serial.available();\n}\n\n#endif // HAVE_HWSERIAL0\n"}},"jsonrpc":"2.0"}Content-Length: 194

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp"}}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":156,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":156,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":157,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":157,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":158,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":158,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":159,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":159,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":24}},"id":160,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":160,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":27}},"id":161,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":161,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":25,"character":27},"end":{"line":25,"character":27}},"context":{"diagnostics":[]}},"id":162,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":162,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":9,"character":11}},"id":163,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":163,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":24,"character":17}},"id":164,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":164,"jsonrpc":"2.0","result":[{"range":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":19}},"id":165,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":165,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":166,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":166,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":27},"end":{"line":47,"character":27}},"context":{"diagnostics":[]}},"id":167,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":167,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":168,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":168,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":22},"end":{"line":0,"character":22}},"context":{"diagnostics":[]}},"id":169,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":169,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":17}},"id":170,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":170,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":171,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":171,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":172,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":172,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":18},"end":{"line":0,"character":18}},"context":{"diagnostics":[]}},"id":173,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":173,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":19},"end":{"line":0,"character":19}},"context":{"diagnostics":[]}},"id":174,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":174,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":175,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":175,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":22},"end":{"line":0,"character":22}},"context":{"diagnostics":[]}},"id":176,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":176,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":177,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":177,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":7},"end":{"line":0,"character":7}},"context":{"diagnostics":[]}},"id":178,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":178,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":9}},"context":{"diagnostics":[]}},"id":179,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":179,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}},"id":180,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":180,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"context":{"diagnostics":[]}},"id":181,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":181,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":14},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}},"id":182,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":182,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":15},"end":{"line":0,"character":15}},"context":{"diagnostics":[]}},"id":183,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":183,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":19},"end":{"line":0,"character":19}},"context":{"diagnostics":[]}},"id":184,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":184,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":185,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":185,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":186,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":186,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":23},"end":{"line":0,"character":23}},"context":{"diagnostics":[]}},"id":187,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":187,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":24},"end":{"line":0,"character":24}},"context":{"diagnostics":[]}},"id":188,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":188,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":25},"end":{"line":0,"character":25}},"context":{"diagnostics":[]}},"id":189,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":189,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":190,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":190,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":29},"end":{"line":0,"character":29}},"context":{"diagnostics":[]}},"id":191,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":191,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":192,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":192,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":193,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":193,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":194,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":194,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":195,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":195,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":196,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":196,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":197,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":197,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":198,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":198,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":199,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":199,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":200,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":200,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":201,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":201,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":22},"end":{"line":0,"character":22}},"context":{"diagnostics":[]}},"id":202,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":202,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}},"id":203,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":203,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":29},"end":{"line":0,"character":29}},"context":{"diagnostics":[]}},"id":204,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":204,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":205,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":205,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":29},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":206,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":206,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":3},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":207,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":207,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":2},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":208,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":208,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":209,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":209,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":210,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":210,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}},"id":211,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":211,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":212,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":212,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":213,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":213,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":214,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":214,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":29},"end":{"line":0,"character":29}},"context":{"diagnostics":[]}},"id":215,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":215,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":216,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":216,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":217,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":217,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":24},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":218,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":218,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":219,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":219,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":3},"end":{"line":0,"character":3}},"context":{"diagnostics":[]}},"id":220,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":220,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":7},"end":{"line":0,"character":7}},"context":{"diagnostics":[]}},"id":221,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":221,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"context":{"diagnostics":[]}},"id":222,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":222,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":13},"end":{"line":0,"character":13}},"context":{"diagnostics":[]}},"id":223,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":223,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":14},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}},"id":224,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":224,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":225,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":225,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":18},"end":{"line":0,"character":18}},"context":{"diagnostics":[]}},"id":226,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":226,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":19},"end":{"line":0,"character":19}},"context":{"diagnostics":[]}},"id":227,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":227,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":6},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":228,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":228,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":12}},"id":229,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":229,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":21}},"id":230,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":230,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":20}},"id":231,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":231,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":20}},"id":232,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":232,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":20}},"id":233,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":233,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":20}},"id":234,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":234,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":235,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":235,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":236,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":236,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":21}},"id":237,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":237,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":20}},"id":238,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":238,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":20},"end":{"line":30,"character":20}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":239,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":239,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":19}},"id":240,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":240,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":241,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":241,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":242,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":242,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":18}},"id":243,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":243,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 364

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":41},"contentChanges":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"rangeLength":11,"text":"getDistance"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":15}},"id":244,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":244,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":9}},"id":245,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":245,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":24},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":246,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":246,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":5}},"id":247,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":247,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":2}},"id":248,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":248,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":5}},"id":249,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":249,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":19}},"id":250,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":250,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"context":{"diagnostics":[]}},"id":251,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":251,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":252,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":252,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":253,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":253,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":19},"end":{"line":0,"character":19}},"context":{"diagnostics":[]}},"id":254,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":254,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":255,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":255,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":256,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":256,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":257,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":257,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":258,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":258,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":259,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":259,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":260,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":260,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":261,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":261,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":20}},"id":262,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":262,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":20}},"id":263,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":263,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":20}},"id":264,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":264,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":20}},"id":265,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":265,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":20}},"id":266,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":266,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":20}},"id":267,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":267,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":20}},"id":268,"jsonrpc":"2.0"}
<<<
Content-Length: 566

{"id":268,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":3,"range":{"end":{"character":10,"line":30},"start":{"character":2,"line":30}}},{"kind":2,"range":{"end":{"character":23,"line":32},"start":{"character":15,"line":32}}},{"kind":2,"range":{"end":{"character":14,"line":35},"start":{"character":6,"line":35}}},{"kind":2,"range":{"end":{"character":26,"line":40},"start":{"character":18,"line":40}}},{"kind":2,"range":{"end":{"character":38,"line":40},"start":{"character":30,"line":40}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":39,"character":20}},"id":269,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":269,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":20}},"id":270,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":270,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":37,"character":20}},"id":271,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":271,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":35,"character":20}},"id":272,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":272,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":33,"character":20}},"id":273,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":273,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":20}},"id":274,"jsonrpc":"2.0"}
<<<
Content-Length: 566

{"id":274,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":3,"range":{"end":{"character":10,"line":30},"start":{"character":2,"line":30}}},{"kind":2,"range":{"end":{"character":23,"line":32},"start":{"character":15,"line":32}}},{"kind":2,"range":{"end":{"character":14,"line":35},"start":{"character":6,"line":35}}},{"kind":2,"range":{"end":{"character":26,"line":40},"start":{"character":18,"line":40}}},{"kind":2,"range":{"end":{"character":38,"line":40},"start":{"character":30,"line":40}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":20}},"id":275,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":275,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":20}},"id":276,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":276,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":13},"end":{"line":28,"character":13}},"context":{"diagnostics":[]}},"id":277,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":277,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":20}},"id":278,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":278,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":29,"character":20},"end":{"line":29,"character":20}},"context":{"diagnostics":[]}},"id":279,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":279,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":20}},"id":280,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":280,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":20}},"id":281,"jsonrpc":"2.0"}
<<<
Content-Length: 566

{"id":281,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":3,"range":{"end":{"character":10,"line":30},"start":{"character":2,"line":30}}},{"kind":2,"range":{"end":{"character":23,"line":32},"start":{"character":15,"line":32}}},{"kind":2,"range":{"end":{"character":14,"line":35},"start":{"character":6,"line":35}}},{"kind":2,"range":{"end":{"character":26,"line":40},"start":{"character":18,"line":40}}},{"kind":2,"range":{"end":{"character":38,"line":40},"start":{"character":30,"line":40}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":33,"character":20}},"id":282,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":282,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":35,"character":20}},"id":283,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":283,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":37,"character":20}},"id":284,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":284,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":20}},"id":285,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":285,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":39,"character":20}},"id":286,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":286,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":20}},"id":287,"jsonrpc":"2.0"}
<<<
Content-Length: 566

{"id":287,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":3,"range":{"end":{"character":10,"line":30},"start":{"character":2,"line":30}}},{"kind":2,"range":{"end":{"character":23,"line":32},"start":{"character":15,"line":32}}},{"kind":2,"range":{"end":{"character":14,"line":35},"start":{"character":6,"line":35}}},{"kind":2,"range":{"end":{"character":26,"line":40},"start":{"character":18,"line":40}}},{"kind":2,"range":{"end":{"character":38,"line":40},"start":{"character":30,"line":40}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":20}},"id":288,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":288,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":20}},"id":289,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":289,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":20}},"id":290,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":290,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":20}},"id":291,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":291,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":20}},"id":292,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":292,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":20}},"id":293,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":293,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":294,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":294,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":295,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":295,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":296,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":296,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":297,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":297,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":16}},"id":298,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":298,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":16}},"id":299,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":299,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":300,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":300,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":23,"character":26},"end":{"line":23,"character":26}},"context":{"diagnostics":[]}},"id":301,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":301,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":302,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":302,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":303,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":303,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":22},"end":{"line":0,"character":22}},"context":{"diagnostics":[]}},"id":304,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":304,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":23},"end":{"line":0,"character":23}},"context":{"diagnostics":[]}},"id":305,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":305,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":24},"end":{"line":0,"character":24}},"context":{"diagnostics":[]}},"id":306,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":306,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":25},"end":{"line":0,"character":25}},"context":{"diagnostics":[]}},"id":307,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":307,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":308,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":308,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":29},"end":{"line":0,"character":29}},"context":{"diagnostics":[]}},"id":309,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":309,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":7},"end":{"line":0,"character":7}},"context":{"diagnostics":[]}},"id":310,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":310,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":6},"end":{"line":0,"character":6}},"context":{"diagnostics":[]}},"id":311,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":311,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}},"id":312,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":312,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":18},"end":{"line":0,"character":18}},"context":{"diagnostics":[]}},"id":313,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":313,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":314,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":314,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":315,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":315,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":25},"end":{"line":0,"character":25}},"context":{"diagnostics":[]}},"id":316,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":316,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":26},"end":{"line":0,"character":26}},"context":{"diagnostics":[]}},"id":317,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":317,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":318,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":318,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":319,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":319,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":32},"end":{"line":0,"character":32}},"context":{"diagnostics":[]}},"id":320,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":320,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":34},"end":{"line":0,"character":34}},"context":{"diagnostics":[]}},"id":321,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":321,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":35},"end":{"line":0,"character":35}},"context":{"diagnostics":[]}},"id":322,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":322,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":34},"end":{"line":0,"character":34}},"context":{"diagnostics":[]}},"id":323,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":323,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":35},"end":{"line":0,"character":35}},"context":{"diagnostics":[]}},"id":324,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":324,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":3},"end":{"line":0,"character":3}},"context":{"diagnostics":[]}},"id":325,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":325,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":5},"end":{"line":0,"character":5}},"context":{"diagnostics":[]}},"id":326,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":326,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":7},"end":{"line":0,"character":7}},"context":{"diagnostics":[]}},"id":327,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":327,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}},"id":328,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":328,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"context":{"diagnostics":[]}},"id":329,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":329,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"context":{"diagnostics":[]}},"id":330,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":330,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":14},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}},"id":331,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":331,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":15},"end":{"line":0,"character":15}},"context":{"diagnostics":[]}},"id":332,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":332,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":16},"end":{"line":0,"character":16}},"context":{"diagnostics":[]}},"id":333,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":333,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":334,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":334,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":335,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":335,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":31},"end":{"line":0,"character":31}},"context":{"diagnostics":[]}},"id":336,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":336,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":35},"end":{"line":0,"character":35}},"context":{"diagnostics":[]}},"id":337,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":337,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":37},"end":{"line":0,"character":37}},"context":{"diagnostics":[]}},"id":338,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":338,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":38},"end":{"line":0,"character":38}},"context":{"diagnostics":[]}},"id":339,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":339,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":36},"end":{"line":0,"character":36}},"context":{"diagnostics":[]}},"id":340,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":340,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":37},"end":{"line":0,"character":37}},"context":{"diagnostics":[]}},"id":341,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":341,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":39},"end":{"line":0,"character":39}},"context":{"diagnostics":[]}},"id":342,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":342,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":40},"end":{"line":0,"character":40}},"context":{"diagnostics":[]}},"id":343,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":343,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":8},"end":{"line":0,"character":8}},"context":{"diagnostics":[]}},"id":344,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":344,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}},"id":345,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":345,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"context":{"diagnostics":[]}},"id":346,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":346,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":14},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}},"id":347,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":347,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":16},"end":{"line":0,"character":16}},"context":{"diagnostics":[]}},"id":348,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":348,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":19},"end":{"line":0,"character":19}},"context":{"diagnostics":[]}},"id":349,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":349,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":22},"end":{"line":0,"character":22}},"context":{"diagnostics":[]}},"id":350,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":350,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":23},"end":{"line":0,"character":23}},"context":{"diagnostics":[]}},"id":351,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":351,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":352,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":352,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":353,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":353,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":2},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":354,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":354,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":355,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":355,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":356,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":356,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":43,"character":27},"end":{"line":43,"character":27}},"context":{"diagnostics":[]}},"id":357,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":357,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":358,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":358,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"context":{"diagnostics":[]}},"id":359,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":359,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":22}},"id":360,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":360,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":361,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":361,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":362,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":362,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":363,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":363,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":40},"end":{"line":0,"character":40}},"context":{"diagnostics":[]}},"id":364,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":364,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":35},"end":{"line":0,"character":35}},"context":{"diagnostics":[]}},"id":365,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":365,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":36},"end":{"line":0,"character":36}},"context":{"diagnostics":[]}},"id":366,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":366,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":2},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}},"id":367,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":367,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":2},"end":{"line":0,"character":19}},"context":{"diagnostics":[]}},"id":368,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":368,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":2},"end":{"line":0,"character":20}},"context":{"diagnostics":[]}},"id":369,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":369,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"context":{"diagnostics":[]}},"id":370,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":370,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":3},"end":{"line":48,"character":3}},"context":{"diagnostics":[]}},"id":371,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":371,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":25}},"id":372,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":372,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":24}},"id":373,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":373,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":23}},"id":374,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":374,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":33,"character":14}},"id":375,"jsonrpc":"2.0"}
<<<
Content-Length: 225

{"id":375,"jsonrpc":"2.0","result":[{"range":{"end":{"character":21,"line":137},"start":{"character":14,"line":137}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}]}
>>>
Content-Length: 6071

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","languageId":"cpp","version":1,"text":"/*\n Print.cpp - Base class that provides print() and println()\n Copyright (c) 2008 David A. Mellis.  All right reserved.\n \n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n \n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n \n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n \n Modified 23 November 2006 by David A. Mellis\n Modified 03 August 2015 by Chuck Todd\n */\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n#include \"Arduino.h\"\n\n#include \"Print.h\"\n\n// Public Methods //////////////////////////////////////////////////////////////\n\n/* default implementation: may be overridden */\nsize_t Print::write(const uint8_t *buffer, size_t size)\n{\n  size_t n = 0;\n  while (size--) {\n    if (write(*buffer++)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const __FlashStringHelper *ifsh)\n{\n  PGM_P p = reinterpret_cast\u003cPGM_P\u003e(ifsh);\n  size_t n = 0;\n  while (1) {\n    unsigned char c = pgm_read_byte(p++);\n    if (c == 0) break;\n    if (write(c)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const String \u0026s)\n{\n  return write(s.c_str(), s.length());\n}\n\nsize_t Print::print(const char str[])\n{\n  return write(str);\n}\n\nsize_t Print::print(char c)\n{\n  return write(c);\n}\n\nsize_t Print::print(unsigned char b, int base)\n{\n  return print((unsigned long) b, base);\n}\n\nsize_t Print::print(int n, int base)\n{\n  return print((long) n, base);\n}\n\nsize_t Print::print(unsigned int n, int base)\n{\n  return print((unsigned long) n, base);\n}\n\nsize_t Print::print(long n, int base)\n{\n  if (base == 0) {\n    return write(n);\n  } else if (base == 10) {\n    if (n \u003c 0) {\n      int t = print('-');\n      n = -n;\n      return printNumber(n, 10) + t;\n    }\n    return printNumber(n, 10);\n  } else {\n    return printNumber(n, base);\n  }\n}\n\nsize_t Print::print(unsigned long n, int base)\n{\n  if (base == 0) return write(n);\n  else return printNumber(n, base);\n}\n\nsize_t Print::print(double n, int digits)\n{\n  return printFloat(n, digits);\n}\n\nsize_t Print::println(const __FlashStringHelper *ifsh)\n{\n  size_t n = print(ifsh);\n  n += println();\n  return n;\n}\n\nsize_t Print::print(const Printable\u0026 x)\n{\n  return x.printTo(*this);\n}\n\nsize_t Print::println(void)\n{\n  return write(\"\\r\\n\");\n}\n\nsize_t Print::println(const String \u0026s)\n{\n  size_t n = print(s);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const char c[])\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(char c)\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned char b, int base)\n{\n  size_t n = print(b, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(double num, int digits)\n{\n  size_t n = print(num, digits);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const Printable\u0026 x)\n{\n  size_t n = print(x);\n  n += println();\n  return n;\n}\n\n// Private Methods /////////////////////////////////////////////////////////////\n\nsize_t Print::printNumber(unsigned long n, uint8_t base)\n{\n  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.\n  char *str = \u0026buf[sizeof(buf) - 1];\n\n  *str = '\\0';\n\n  // prevent crash if called with base == 1\n  if (base \u003c 2) base = 10;\n\n  do {\n    char c = n % base;\n    n /= base;\n\n    *--str = c \u003c 10 ? c + '0' : c + 'A' - 10;\n  } while(n);\n\n  return write(str);\n}\n\nsize_t Print::printFloat(double number, uint8_t digits) \n{ \n  size_t n = 0;\n  \n  if (isnan(number)) return print(\"nan\");\n  if (isinf(number)) return print(\"inf\");\n  if (number \u003e 4294967040.0) return print (\"ovf\");  // constant determined empirically\n  if (number \u003c-4294967040.0) return print (\"ovf\");  // constant determined empirically\n  \n  // Handle negative numbers\n  if (number \u003c 0.0)\n  {\n     n += print('-');\n     number = -number;\n  }\n\n  // Round correctly so that print(1.999, 2) prints as \"2.00\"\n  double rounding = 0.5;\n  for (uint8_t i=0; i\u003cdigits; ++i)\n    rounding /= 10.0;\n  \n  number += rounding;\n\n  // Extract the integer part of the number and print it\n  unsigned long int_part = (unsigned long)number;\n  double remainder = number - (double)int_part;\n  n += print(int_part);\n\n  // Print the decimal point, but only if there are digits beyond\n  if (digits \u003e 0) {\n    n += print('.'); \n  }\n\n  // Extract digits from the remainder one at a time\n  while (digits-- \u003e 0)\n  {\n    remainder *= 10.0;\n    unsigned int toPrint = (unsigned int)(remainder);\n    n += print(toPrint);\n    remainder -= toPrint; \n  } \n  \n  return n;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 184

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":3},"end":{"line":0,"character":3}},"context":{"diagnostics":[]}},"id":376,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":376,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":4},"end":{"line":0,"character":4}},"context":{"diagnostics":[]}},"id":377,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":377,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":4},"end":{"line":0,"character":4}},"context":{"diagnostics":[]}},"id":378,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":378,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"context":{"diagnostics":[]}},"id":379,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":379,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":14},"end":{"line":0,"character":14}},"context":{"diagnostics":[]}},"id":380,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":380,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":15},"end":{"line":0,"character":15}},"context":{"diagnostics":[]}},"id":381,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":381,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}},"id":382,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":382,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":5},"end":{"line":0,"character":7}},"context":{"diagnostics":[]}},"id":383,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":383,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":24}},"id":384,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":384,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":25}},"id":385,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":385,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":24}},"id":386,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":386,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":33,"character":20}},"id":387,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":387,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":33,"character":19},"end":{"line":33,"character":21}},"context":{"diagnostics":[]}},"id":388,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":388,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":21,"line":33},"start":{"character":19,"line":33}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":33,"character":21}},"id":389,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":389,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":33,"character":22},"end":{"line":33,"character":22}},"context":{"diagnostics":[]}},"id":390,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":390,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":33,"character":22}},"id":391,"jsonrpc":"2.0"}
<<<
Content-Length: 315

{"id":391,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\n→ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t println(const char[])\n```"},"range":{"end":{"character":23,"line":33},"start":{"character":22,"line":33}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":33,"character":20}},"id":392,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":392,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":33,"character":16}},"id":393,"jsonrpc":"2.0"}
<<<
Content-Length: 314

{"id":393,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\n→ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t println(const char[])\n```"},"range":{"end":{"character":16,"line":33},"start":{"character":9,"line":33}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":33,"character":17}},"id":394,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":394,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":33,"character":17},"end":{"line":33,"character":21}},"context":{"diagnostics":[]}},"id":395,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":395,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":21,"line":33},"start":{"character":17,"line":33}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":33,"character":17},"end":{"line":33,"character":22}},"context":{"diagnostics":[]}},"id":396,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":396,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":22,"line":33},"start":{"character":17,"line":33}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":42},"contentChanges":[{"range":{"start":{"line":33,"character":17},"end":{"line":33,"character":22}},"rangeLength":5,"text":"in"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 612

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'in'","range":{"end":{"character":19,"line":33},"start":{"character":17,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":42}}
>>>
Content-Length: 514

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":33,"character":19},"end":{"line":33,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":33,"character":17},"end":{"line":33,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'in'"}]}},"id":397,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":397,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":398,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":398,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":15}},"context":{"diagnostics":[]}},"id":399,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":399,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":1},"end":{"line":0,"character":1}},"context":{"diagnostics":[]}},"id":400,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":400,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":33,"character":21},"end":{"line":33,"character":21}},"context":{"diagnostics":[]}},"id":401,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":401,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":25},"end":{"line":32,"character":25}},"context":{"diagnostics":[]}},"id":402,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":402,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":43},"contentChanges":[{"range":{"start":{"line":31,"character":0},"end":{"line":31,"character":0}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 612

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'in'","range":{"end":{"character":19,"line":34},"start":{"character":17,"line":34}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":43}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":44},"contentChanges":[{"range":{"start":{"line":32,"character":0},"end":{"line":32,"character":0}},"text":"char in = \" in\""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 870

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"init_conversion_failed","message":"Cannot initialize a variable of type 'char' with an lvalue of type 'const char [4]'","range":{"end":{"character":7,"line":32},"start":{"character":5,"line":32}},"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":8,"line":33},"start":{"character":2,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":44}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":15},"end":{"line":32,"character":15}},"context":{"diagnostics":[]}},"id":403,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":403,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":404,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":404,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":52},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":14}},"id":405,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":405,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":14},"end":{"line":32,"character":14}},"context":{"diagnostics":[]}},"id":406,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":406,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":15},"end":{"line":32,"character":15}},"context":{"diagnostics":[]}},"id":407,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":407,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":45},"contentChanges":[{"range":{"start":{"line":32,"character":15},"end":{"line":32,"character":15}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 664

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"init_conversion_failed","message":"Cannot initialize a variable of type 'char' with an lvalue of type 'const char [4]'","range":{"end":{"character":7,"line":32},"start":{"character":5,"line":32}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":45}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":15},"end":{"line":32,"character":15}},"context":{"diagnostics":[]}},"id":408,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":408,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":409,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":409,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":52},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":14}},"id":410,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":410,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":7}},"id":411,"jsonrpc":"2.0"}
<<<
Content-Length: 213

{"id":411,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":7,"line":32},"start":{"character":5,"line":32}}},{"kind":2,"range":{"end":{"character":19,"line":34},"start":{"character":17,"line":34}}}]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":4}},"id":412,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":412,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":46},"contentChanges":[{"range":{"start":{"line":32,"character":0},"end":{"line":32,"character":0}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 664

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"init_conversion_failed","message":"Cannot initialize a variable of type 'char' with an lvalue of type 'const char [4]'","range":{"end":{"character":9,"line":32},"start":{"character":7,"line":32}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":46}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":2}},"context":{"diagnostics":[]}},"id":413,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":413,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":414,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":414,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":52},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":4}},"id":415,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":415,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":7}},"id":416,"jsonrpc":"2.0"}
<<<
Content-Length: 267

{"id":416,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `in`  \n\n---\nType: `char`  \n\n---\n```cpp\n// In loop\nchar in = <recovery - expr>(\" in\")\n```"},"range":{"end":{"character":9,"line":32},"start":{"character":7,"line":32}}}}
>>>
Content-Length: 564

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":7},"end":{"line":32,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":32,"character":7},"end":{"line":32,"character":9}},"severity":1,"code":"init_conversion_failed","source":"clang","message":"Cannot initialize a variable of type 'char' with an lvalue of type 'const char [4]'"}]}},"id":417,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":417,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":7}},"id":418,"jsonrpc":"2.0"}
<<<
Content-Length: 310

{"id":418,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":15,"line":43},"start":{"character":4,"line":43}}}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":9}},"id":419,"jsonrpc":"2.0"}
<<<
Content-Length: 267

{"id":419,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `in`  \n\n---\nType: `char`  \n\n---\n```cpp\n// In loop\nchar in = <recovery - expr>(\" in\")\n```"},"range":{"end":{"character":9,"line":32},"start":{"character":7,"line":32}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":18},"end":{"line":32,"character":18}},"context":{"diagnostics":[]}},"id":420,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":420,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":47},"contentChanges":[{"range":{"start":{"line":32,"character":0},"end":{"line":32,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 664

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"init_conversion_failed","message":"Cannot initialize a variable of type 'char' with an lvalue of type 'const char [4]'","range":{"end":{"character":7,"line":32},"start":{"character":5,"line":32}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":47}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":48},"contentChanges":[{"range":{"start":{"line":32,"character":15},"end":{"line":32,"character":16}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 870

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"init_conversion_failed","message":"Cannot initialize a variable of type 'char' with an lvalue of type 'const char [4]'","range":{"end":{"character":7,"line":32},"start":{"character":5,"line":32}},"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":8,"line":33},"start":{"character":2,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":48}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":15},"end":{"line":32,"character":15}},"context":{"diagnostics":[]}},"id":421,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":421,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":422,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":422,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":52},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":49},"contentChanges":[{"range":{"start":{"line":32,"character":0},"end":{"line":32,"character":15}},"rangeLength":15,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 612

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'in'","range":{"end":{"character":19,"line":34},"start":{"character":17,"line":34}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":49}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":50},"contentChanges":[{"range":{"start":{"line":31,"character":0},"end":{"line":32,"character":0}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 612

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'in'","range":{"end":{"character":19,"line":33},"start":{"character":17,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":50}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":23}},"id":423,"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"id":423,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `double`\n- `int = 2`\n\n---\n```cpp\n// In Print\npublic: size_t print(double, int = 2)\n```"},"range":{"end":{"character":23,"line":32},"start":{"character":15,"line":32}}}}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":424,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":424,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 359

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":51},"contentChanges":[{"range":{"start":{"line":33,"character":17},"end":{"line":33,"character":19}},"rangeLength":2,"text":"\" in\""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":51}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":33,"character":17},"end":{"line":33,"character":22}},"context":{"diagnostics":[]}},"id":425,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":425,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":22,"line":33},"start":{"character":17,"line":33}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":426,"jsonrpc":"2.0"}Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":23}},"id":427,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":426,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}Content-Length: 321

{"id":427,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `double`\n- `int = 2`\n\n---\n```cpp\n// In Print\npublic: size_t print(double, int = 2)\n```"},"range":{"end":{"character":23,"line":32},"start":{"character":15,"line":32}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":23}},"id":428,"jsonrpc":"2.0"}
<<<
Content-Length: 321

{"id":428,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `print`  \n\n---\n→ `size_t`  \nParameters:  \n- `double`\n- `int = 2`\n\n---\n```cpp\n// In Print\npublic: size_t print(double, int = 2)\n```"},"range":{"end":{"character":23,"line":32},"start":{"character":15,"line":32}}}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":11},"end":{"line":0,"character":11}},"context":{"diagnostics":[]}},"id":429,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":429,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":4},"end":{"line":0,"character":4}},"context":{"diagnostics":[]}},"id":430,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":430,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":35},"end":{"line":0,"character":35}},"context":{"diagnostics":[]}},"id":431,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":431,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":432,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":432,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":15}},"id":433,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":433,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":37,"character":12}},"id":434,"jsonrpc":"2.0"}
<<<
Content-Length: 310

{"id":434,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":15,"line":37},"start":{"character":4,"line":37}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":35,"character":10}},"id":435,"jsonrpc":"2.0"}
<<<
Content-Length: 271

{"id":435,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `distance`  \n\n---\nType: `float`  \nValue = `0.000000e+00`  \n\n---\n```cpp\nfloat distance = 0\n```"},"range":{"end":{"character":14,"line":35},"start":{"character":6,"line":35}}}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":436,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":436,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"context":{"diagnostics":[]}},"id":437,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":437,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":35},"end":{"line":0,"character":35}},"context":{"diagnostics":[]}},"id":438,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":438,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":36},"end":{"line":0,"character":36}},"context":{"diagnostics":[]}},"id":439,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":439,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":9}},"context":{"diagnostics":[]}},"id":440,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":440,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":8},"end":{"line":0,"character":8}},"context":{"diagnostics":[]}},"id":441,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":441,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":9},"end":{"line":0,"character":9}},"context":{"diagnostics":[]}},"id":442,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":442,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}},"id":443,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":443,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":444,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":444,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":445,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":445,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":29},"end":{"line":0,"character":29}},"context":{"diagnostics":[]}},"id":446,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":446,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":447,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":447,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":27},"end":{"line":0,"character":27}},"context":{"diagnostics":[]}},"id":448,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":448,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"context":{"diagnostics":[]}},"id":449,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":449,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":30},"end":{"line":0,"character":30}},"context":{"diagnostics":[]}},"id":450,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":450,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":29},"end":{"line":0,"character":29}},"context":{"diagnostics":[]}},"id":451,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":451,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":20}},"id":452,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":452,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":16},"end":{"line":42,"character":22}},"context":{"diagnostics":[]}},"id":453,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":453,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":27},"end":{"line":42,"character":27}},"context":{"diagnostics":[]}},"id":454,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":454,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":18}},"id":455,"jsonrpc":"2.0"}
<<<
Content-Length: 1014

{"id":455,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":38,"character":16},"end":{"line":38,"character":22}},"context":{"diagnostics":[]}},"id":456,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":456,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":18}},"id":457,"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"id":457,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}}}}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":52},"contentChanges":[{"range":{"start":{"line":38,"character":16},"end":{"line":38,"character":22}},"rangeLength":6,"text":"b"}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":53},"contentChanges":[{"range":{"start":{"line":38,"character":17},"end":{"line":38,"character":17}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 612

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bl'","range":{"end":{"character":18,"line":38},"start":{"character":16,"line":38}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":53}}
>>>
Content-Length: 514

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":38,"character":18},"end":{"line":38,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":38,"character":16},"end":{"line":38,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'bl'"}]}},"id":458,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":458,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":459,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":459,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":54},"contentChanges":[{"range":{"start":{"line":38,"character":18},"end":{"line":38,"character":18}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 613

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ble'","range":{"end":{"character":19,"line":38},"start":{"character":16,"line":38}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":54}}
>>>
Content-Length: 515

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":38,"character":19},"end":{"line":38,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":38,"character":16},"end":{"line":38,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'ble'"}]}},"id":460,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":460,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":461,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":461,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":55},"contentChanges":[{"range":{"start":{"line":38,"character":18},"end":{"line":38,"character":19}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 612

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bl'","range":{"end":{"character":18,"line":38},"start":{"character":16,"line":38}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":55}}
>>>
Content-Length: 514

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":38,"character":18},"end":{"line":38,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":38,"character":16},"end":{"line":38,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'bl'"}]}},"id":462,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":462,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":463,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":463,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":56},"contentChanges":[{"range":{"start":{"line":38,"character":18},"end":{"line":38,"character":18}},"text":"u"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 613

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blu'","range":{"end":{"character":19,"line":38},"start":{"character":16,"line":38}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":56}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":57},"contentChanges":[{"range":{"start":{"line":38,"character":19},"end":{"line":38,"character":19}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'blue'; did you mean 'true'? (fix available)","range":{"end":{"character":20,"line":38},"start":{"character":16,"line":38}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":57}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":58},"contentChanges":[{"range":{"start":{"line":38,"character":20},"end":{"line":38,"character":20}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 615

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blueP'","range":{"end":{"character":21,"line":38},"start":{"character":16,"line":38}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":58}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":59},"contentChanges":[{"range":{"start":{"line":38,"character":21},"end":{"line":38,"character":21}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 957

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'bluePi'; did you mean 'bluePin'? (fix available)\n\nDistanceSensor.ino.cpp:8:11: note: 'bluePin' declared here","range":{"end":{"character":22,"line":38},"start":{"character":16,"line":38}},"severity":1,"source":"clang"},{"message":"'bluePin' declared here\n\nDistanceSensor.ino.cpp:39:17: error: use of undeclared identifier 'bluePi'; did you mean 'bluePin'?","range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":59}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":60},"contentChanges":[{"range":{"start":{"line":38,"character":22},"end":{"line":38,"character":22}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":60}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":38,"character":23},"end":{"line":38,"character":23}},"context":{"diagnostics":[]}},"id":464,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":464,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":465,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":465,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":18}},"id":466,"jsonrpc":"2.0"}
<<<
Content-Length: 307

{"id":466,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `bluePin`  \n\n---\nType: `const int`  \nValue = `6`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int bluePin = 6\n```"},"range":{"end":{"character":23,"line":38},"start":{"character":16,"line":38}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":23}},"id":467,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":467,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":23,"line":38},"start":{"character":16,"line":38}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":21}},"id":468,"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"id":468,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":2,"range":{"end":{"character":17,"line":25},"start":{"character":10,"line":25}}},{"kind":2,"range":{"end":{"character":23,"line":38},"start":{"character":16,"line":38}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":38,"character":16},"end":{"line":38,"character":23}},"context":{"diagnostics":[]}},"id":469,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":469,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":20}},"id":470,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":470,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":39,"character":20}},"id":471,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":471,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":17}},"id":472,"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"id":472,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":18}},"id":473,"jsonrpc":"2.0"}
<<<
Content-Length: 925

{"id":473,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":18}},"id":474,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":474,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 359

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":61},"contentChanges":[{"range":{"start":{"line":42,"character":16},"end":{"line":42,"character":22}},"rangeLength":6,"text":"bluePin"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":18}},"id":475,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":475,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":61}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":17}},"id":476,"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"id":476,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}}}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":477,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":477,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":23},"end":{"line":42,"character":23}},"context":{"diagnostics":[]}},"id":478,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":478,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":17}},"id":479,"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"id":479,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":17}},"id":480,"jsonrpc":"2.0"}
<<<
Content-Length: 836

{"id":480,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":17}},"id":481,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":481,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":16},"end":{"line":46,"character":22}},"context":{"diagnostics":[]}},"id":482,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":482,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 359

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":62},"contentChanges":[{"range":{"start":{"line":46,"character":16},"end":{"line":46,"character":22}},"rangeLength":6,"text":"bluePin"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":62}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":20}},"id":483,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":483,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":484,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":484,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":19}},"id":485,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":485,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":23},"end":{"line":46,"character":23}},"context":{"diagnostics":[]}},"id":486,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":486,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":6,"character":16}},"id":487,"jsonrpc":"2.0"}
<<<
Content-Length: 267

{"id":487,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `greenPin`  \n\n---\nType: `const int`  \nValue = `5`  \n\n---\n```cpp\nconst int greenPin = 5\n```"},"range":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}}}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":7,"character":14}},"id":488,"jsonrpc":"2.0"}
<<<
Content-Length: 480

{"id":488,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":2,"range":{"end":{"character":17,"line":25},"start":{"character":10,"line":25}}},{"kind":2,"range":{"end":{"character":23,"line":38},"start":{"character":16,"line":38}}},{"kind":2,"range":{"end":{"character":23,"line":42},"start":{"character":16,"line":42}}},{"kind":2,"range":{"end":{"character":23,"line":46},"start":{"character":16,"line":46}}}]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":14}},"context":{"diagnostics":[]}},"id":489,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":489,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":6,"character":15}},"id":490,"jsonrpc":"2.0"}
<<<
Content-Length: 213

{"id":490,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":2,"range":{"end":{"character":18,"line":24},"start":{"character":10,"line":24}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":6,"character":15}},"id":491,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":491,"jsonrpc":"2.0","result":[{"range":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":6,"character":10},"end":{"line":6,"character":18}},"context":{"diagnostics":[]}},"id":492,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":492,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":22}},"id":493,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":493,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":20}},"id":494,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":494,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":25,"character":16}},"id":495,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":495,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":23,"character":15}},"id":496,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":496,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":24,"character":15}},"id":497,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":497,"jsonrpc":"2.0","result":[{"range":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":39,"character":17}},"id":498,"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"id":498,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":39,"character":18}},"id":499,"jsonrpc":"2.0"}
<<<
Content-Length: 747

{"id":499,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":39},"start":{"character":16,"line":39}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":39,"character":18}},"id":500,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":500,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":19}},"id":501,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":501,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":39,"character":16},"end":{"line":39,"character":22}},"context":{"diagnostics":[]}},"id":502,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":502,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":18}},"id":503,"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"id":503,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `distance`  \n\n---\nType: `float`  \nValue = `0.000000e+00`  \n\n---\n```cpp\nfloat distance = 0\n```"},"range":{"end":{"character":26,"line":40},"start":{"character":18,"line":40}}}}
>>>
Content-Length: 360

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":63},"contentChanges":[{"range":{"start":{"line":39,"character":16},"end":{"line":39,"character":22}},"rangeLength":6,"text":"greenPin"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":19}},"id":504,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":504,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":63}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":19}},"id":505,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":505,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":506,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":506,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":39,"character":24},"end":{"line":39,"character":24}},"context":{"diagnostics":[]}},"id":507,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":507,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":18}},"id":508,"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"id":508,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":16}},"id":509,"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"id":509,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":17}},"id":510,"jsonrpc":"2.0"}
<<<
Content-Length: 658

{"id":510,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":43},"start":{"character":16,"line":43}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":43,"character":16},"end":{"line":43,"character":22}},"context":{"diagnostics":[]}},"id":511,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":511,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":17}},"id":512,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":512,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 360

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":64},"contentChanges":[{"range":{"start":{"line":43,"character":16},"end":{"line":43,"character":22}},"rangeLength":6,"text":"greenPin"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":64}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":17}},"id":513,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":513,"jsonrpc":"2.0","result":[{"range":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":514,"jsonrpc":"2.0"}Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":17}},"id":515,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":514,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}Content-Length: 309

{"id":515,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `greenPin`  \n\n---\nType: `const int`  \nValue = `5`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int greenPin = 5\n```"},"range":{"end":{"character":24,"line":43},"start":{"character":16,"line":43}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":43,"character":24},"end":{"line":43,"character":24}},"context":{"diagnostics":[]}},"id":516,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":516,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":18}},"id":517,"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"id":517,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":45,"character":27},"end":{"line":45,"character":27}},"context":{"diagnostics":[]}},"id":518,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":518,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":21}},"id":519,"jsonrpc":"2.0"}
<<<
Content-Length: 569

{"id":519,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":2,"range":{"end":{"character":16,"line":23},"start":{"character":10,"line":23}}},{"kind":2,"range":{"end":{"character":22,"line":37},"start":{"character":16,"line":37}}},{"kind":2,"range":{"end":{"character":22,"line":41},"start":{"character":16,"line":41}}},{"kind":2,"range":{"end":{"character":22,"line":45},"start":{"character":16,"line":45}}},{"kind":2,"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":21}},"id":520,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":520,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 360

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":65},"contentChanges":[{"range":{"start":{"line":47,"character":16},"end":{"line":47,"character":22}},"rangeLength":6,"text":"greenPin"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":65}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":24},"end":{"line":47,"character":24}},"context":{"diagnostics":[]}},"id":521,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":521,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":522,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":522,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":15}},"id":523,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":523,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":15}},"id":524,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":524,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":16},"end":{"line":30,"character":16}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":525,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":525,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":29},"end":{"line":47,"character":29}},"context":{"diagnostics":[]}},"id":526,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":526,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":0,"character":12},"end":{"line":0,"character":12}},"context":{"diagnostics":[]}},"id":527,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":527,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":3},"end":{"line":48,"character":3}},"context":{"diagnostics":[]}},"id":528,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":528,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":5,"character":17}},"id":529,"jsonrpc":"2.0"}
<<<
Content-Length: 263

{"id":529,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":18,"line":5},"start":{"character":17,"line":5}}}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":5,"character":20}},"id":530,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":530,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":16}},"id":531,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":531,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":532,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":532,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":16},"end":{"line":30,"character":16}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":533,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":533,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":23,"character":26},"end":{"line":23,"character":26}},"context":{"diagnostics":[]}},"id":534,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":534,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":34}},"id":535,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":535,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":23}},"id":536,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":536,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":20}},"id":537,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":537,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 523

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'getDistance'"}]}},"id":538,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":538,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":13},"end":{"line":29,"character":46}},"context":{"diagnostics":[]}},"id":539,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":539,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":46}},"id":540,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":540,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":27},"end":{"line":30,"character":27}},"context":{"diagnostics":[]}},"id":541,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":541,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":66},"contentChanges":[{"range":{"start":{"line":30,"character":27},"end":{"line":30,"character":27}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":66}}
>>>
Content-Length: 340

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":67},"contentChanges":[{"range":{"start":{"line":30,"character":28},"end":{"line":30,"character":28}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":67}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":68},"contentChanges":[{"range":{"start":{"line":31,"character":0},"end":{"line":31,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":68}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":69},"contentChanges":[{"range":{"start":{"line":31,"character":0},"end":{"line":31,"character":0}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":69}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":31,"character":0},"end":{"line":31,"character":2}},"context":{"diagnostics":[]}},"id":542,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":542,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":543,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":543,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":52},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":70},"contentChanges":[{"range":{"start":{"line":30,"character":28},"end":{"line":31,"character":2}},"rangeLength":3,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":70}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":27}},"id":544,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":544,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":28,"line":47},"start":{"character":27,"line":47}}}}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":545,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":545,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":27}},"id":546,"jsonrpc":"2.0"}
<<<
Content-Length: 829

{"id":546,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":37},"start":{"character":4,"line":37}}},{"kind":1,"range":{"end":{"character":15,"line":38},"start":{"character":4,"line":38}}},{"kind":1,"range":{"end":{"character":15,"line":39},"start":{"character":4,"line":39}}},{"kind":1,"range":{"end":{"character":15,"line":41},"start":{"character":4,"line":41}}},{"kind":1,"range":{"end":{"character":15,"line":42},"start":{"character":4,"line":42}}},{"kind":1,"range":{"end":{"character":15,"line":43},"start":{"character":4,"line":43}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}},{"kind":1,"range":{"end":{"character":15,"line":47},"start":{"character":4,"line":47}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":26},"end":{"line":47,"character":27}},"context":{"diagnostics":[]}},"id":547,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":547,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":27,"line":47},"start":{"character":26,"line":47}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":23}},"id":548,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":548,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":23,"line":46},"start":{"character":16,"line":46}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":28}},"id":549,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":549,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":27}},"id":550,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":550,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":28,"line":42},"start":{"character":27,"line":42}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":28},"end":{"line":42,"character":28}},"context":{"diagnostics":[]}},"id":551,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":551,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":37,"character":26}},"id":552,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":552,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":37,"character":24},"end":{"line":37,"character":27}},"context":{"diagnostics":[]}},"id":553,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":553,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":27,"line":37},"start":{"character":24,"line":37}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":37,"character":26}},"id":554,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":554,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":39,"character":29}},"id":555,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":555,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":27}},"id":556,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":556,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":28,"line":41},"start":{"character":27,"line":41}}}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":1}},"id":557,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":557,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":2}},"id":558,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":558,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":26}},"id":559,"jsonrpc":"2.0"}
<<<
Content-Length: 829

{"id":559,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":37},"start":{"character":4,"line":37}}},{"kind":1,"range":{"end":{"character":15,"line":38},"start":{"character":4,"line":38}}},{"kind":1,"range":{"end":{"character":15,"line":39},"start":{"character":4,"line":39}}},{"kind":1,"range":{"end":{"character":15,"line":41},"start":{"character":4,"line":41}}},{"kind":1,"range":{"end":{"character":15,"line":42},"start":{"character":4,"line":42}}},{"kind":1,"range":{"end":{"character":15,"line":43},"start":{"character":4,"line":43}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}},{"kind":1,"range":{"end":{"character":15,"line":47},"start":{"character":4,"line":47}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":25},"end":{"line":42,"character":26}},"context":{"diagnostics":[]}},"id":560,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":560,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":26,"line":42},"start":{"character":25,"line":42}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":31}},"id":561,"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"id":561,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `distance`  \n\n---\nType: `float`  \nValue = `0.000000e+00`  \n\n---\n```cpp\nfloat distance = 0\n```"},"range":{"end":{"character":38,"line":40},"start":{"character":30,"line":40}}}}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":71},"contentChanges":[{"range":{"start":{"line":42,"character":25},"end":{"line":42,"character":26}},"rangeLength":1,"text":"5"}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":72},"contentChanges":[{"range":{"start":{"line":42,"character":26},"end":{"line":42,"character":26}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":71}}Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":72}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":27},"end":{"line":42,"character":27}},"context":{"diagnostics":[]}},"id":562,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":562,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":563,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":563,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":31}},"id":564,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":564,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":37,"character":27}},"id":565,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":565,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":28,"line":37},"start":{"character":27,"line":37}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":30},"end":{"line":46,"character":30}},"context":{"diagnostics":[]}},"id":566,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":566,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":26}},"id":567,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":567,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":27}},"id":568,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":568,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":25},"end":{"line":46,"character":28}},"context":{"diagnostics":[]}},"id":569,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":569,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":28,"line":46},"start":{"character":25,"line":46}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":27}},"id":570,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":570,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":27}},"id":571,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":571,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":27}},"id":572,"jsonrpc":"2.0"}
<<<
Content-Length: 829

{"id":572,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":37},"start":{"character":4,"line":37}}},{"kind":1,"range":{"end":{"character":15,"line":38},"start":{"character":4,"line":38}}},{"kind":1,"range":{"end":{"character":15,"line":39},"start":{"character":4,"line":39}}},{"kind":1,"range":{"end":{"character":15,"line":41},"start":{"character":4,"line":41}}},{"kind":1,"range":{"end":{"character":15,"line":42},"start":{"character":4,"line":42}}},{"kind":1,"range":{"end":{"character":15,"line":43},"start":{"character":4,"line":43}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}},{"kind":1,"range":{"end":{"character":15,"line":47},"start":{"character":4,"line":47}}}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":27}},"id":573,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":573,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 355

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":73},"contentChanges":[{"range":{"start":{"line":47,"character":26},"end":{"line":47,"character":27}},"rangeLength":1,"text":"255"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":27}},"id":574,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":574,"jsonrpc":"2.0","result":[]}Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":73}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":27}},"id":575,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":575,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":576,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":576,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":27}},"id":577,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":577,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":25},"end":{"line":46,"character":28}},"context":{"diagnostics":[]}},"id":578,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":578,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":28,"line":46},"start":{"character":25,"line":46}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":27}},"id":579,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":579,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":74},"contentChanges":[{"range":{"start":{"line":46,"character":25},"end":{"line":46,"character":28}},"rangeLength":3,"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":74}}
>>>
Content-Length: 383

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":75},"contentChanges":[{"range":{"start":{"line":30,"character":0},"end":{"line":31,"character":0}},"rangeLength":29,"text":"  distance = getDistance();   \n"}]},"jsonrpc":"2.0"}Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":26},"end":{"line":46,"character":26}},"context":{"diagnostics":[]}},"id":580,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":580,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":581,"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":75}}Content-Length: 1925

{"id":581,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":26}},"id":582,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":582,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":583,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":583,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":26},"end":{"line":46,"character":26}},"context":{"diagnostics":[]}},"id":584,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":584,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":44,"character":10},"end":{"line":44,"character":10}},"context":{"diagnostics":[]}},"id":585,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":585,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":26}},"id":586,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":586,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":26}},"id":587,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":587,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":614},"jsonrpc":"2.0"}Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":26},"end":{"line":42,"character":26}},"context":{"diagnostics":[]}},"id":588,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":588,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":26}},"id":589,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":589,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":26}},"id":590,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":590,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":41,"character":24},"end":{"line":41,"character":27}},"context":{"diagnostics":[]}},"id":591,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":591,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":27,"line":41},"start":{"character":24,"line":41}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":26}},"id":592,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":592,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":26}},"id":593,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":593,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":26}},"id":594,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":594,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":26}},"id":595,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":595,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":26}},"id":596,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":596,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 355

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":76},"contentChanges":[{"range":{"start":{"line":42,"character":25},"end":{"line":42,"character":27}},"rangeLength":2,"text":"255"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":26}},"id":597,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":597,"jsonrpc":"2.0","result":[]}Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":76}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":27}},"id":598,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":598,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":599,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":599,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":27}},"id":600,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":600,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":28,"line":41},"start":{"character":27,"line":41}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":28},"end":{"line":42,"character":28}},"context":{"diagnostics":[]}},"id":601,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":601,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":26}},"id":602,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":602,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":41,"character":24},"end":{"line":41,"character":27}},"context":{"diagnostics":[]}},"id":603,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":603,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":27,"line":41},"start":{"character":24,"line":41}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":27}},"id":604,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":604,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":28,"line":41},"start":{"character":27,"line":41}}}}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":77},"contentChanges":[{"range":{"start":{"line":41,"character":24},"end":{"line":41,"character":27}},"rangeLength":3,"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 428

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getDistance'","range":{"end":{"character":24,"line":30},"start":{"character":13,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp","version":77}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":41,"character":25},"end":{"line":41,"character":25}},"context":{"diagnostics":[]}},"id":605,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":605,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"}},"id":606,"jsonrpc":"2.0"}
<<<
Content-Length: 1925

{"id":606,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":26},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":51},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":9,"line":28},"start":{"character":5,"line":28}}}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":28}},"id":607,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":607,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":28},"end":{"line":46,"character":28}},"context":{"diagnostics":[]}},"id":608,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":608,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":37,"character":26}},"id":609,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":609,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":38,"character":25}},"id":610,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":610,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":41,"character":24}},"id":611,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":611,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":28}},"id":612,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":612,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":29,"line":43},"start":{"character":28,"line":43}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":22}},"id":613,"jsonrpc":"2.0"}
<<<
Content-Length: 307

{"id":613,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `bluePin`  \n\n---\nType: `const int`  \nValue = `6`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int bluePin = 6\n```"},"range":{"end":{"character":23,"line":46},"start":{"character":16,"line":46}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server411883416/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":45}},"id":614,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":614,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 60

{"method":"shutdown","params":null,"id":615,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":615,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 47

{"method":"exit","params":null,"jsonrpc":"2.0"}<<< Read Error: EOF







Started logging.

>>>
Content-Length: 2201

{"method":"initialize","params":{"processId":30491,"rootPath":"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch","rootUri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 2072

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\n\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 22 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 48 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nfloat getDistance();\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\");\n\n  if (distance \u003c= 10) {\n\n    analogWrite(redPin, 255);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 0);\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 0);\n    analogWrite(bluePin, 255);\n    analogWrite(greenPin, 0);\n  } else {\n    analogWrite(redPin, 0);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 255);\n  }\n\n  delay(50);\n}\n\n\nfloat getDistance() {\n  float echoTime;\n  float calculatedDistance;\n\n  digitalWrite(trigPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigPin, LOW);\n\n  echoTime = pulseIn(echoPin, HIGH);\n  calculatedDistance = echoTime / 148.0;\n\n  return(calculatedDistance);\n}\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/getDistance.ino\"\n\n"}},"jsonrpc":"2.0"}Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"}},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp","version":1}}Content-Length: 2314

{"id":1,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":17,"line":16},"start":{"character":6,"line":16}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":28},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":10,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":53},"start":{"character":0,"line":30}},"selectionRange":{"end":{"character":9,"line":30},"start":{"character":5,"line":30}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":68},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":17,"line":56},"start":{"character":6,"line":56}}}]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":50,"character":3},"end":{"line":50,"character":3}},"context":{"diagnostics":[]}},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":2,"jsonrpc":"2.0","result":[]}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7.4074074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7.4074074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11.111111111111111}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11.111111111111111}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14.814814814814815}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14.814814814814815}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18.518518518518519}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18.518518518518519}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22.222222222222221}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22.222222222222221}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25.925925925925927}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25.925925925925927}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29.62962962962963}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29.62962962962963}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33.333333333333336}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33.333333333333336}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37.037037037037038}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37.037037037037038}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40.74074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40.74074074074074}}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":12},"end":{"line":52,"character":12}},"context":{"diagnostics":[]}},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":3,"jsonrpc":"2.0","result":[]}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44.444444444444443}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44.444444444444443}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48.148148148148145}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48.148148148148145}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51.851851851851855}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51.851851851851855}}}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"position":{"line":31,"character":43}},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":4,"jsonrpc":"2.0","result":[]}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55.555555555555557}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55.555555555555557}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59.25925925925926}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59.25925925925926}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62.962962962962962}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62.962962962962962}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66.666666666666671}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66.666666666666671}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70.370370370370367}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70.370370370370367}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/27","percentage":74.074074074074076}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/27","percentage":77.777777777777771}}}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"position":{"line":31,"character":43}},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":5,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":31,"character":43},"end":{"line":31,"character":43}},"context":{"diagnostics":[]}},"id":6,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":6,"jsonrpc":"2.0","result":[]}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/27","percentage":81.481481481481481}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/27","percentage":85.18518518518519}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/27","percentage":88.888888888888886}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/27","percentage":92.592592592592595}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/27","percentage":96.296296296296291}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":5,"character":21},"end":{"line":5,"character":21}},"context":{"diagnostics":[]}},"id":7,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":7,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":7,"character":22},"end":{"line":7,"character":22}},"context":{"diagnostics":[]}},"id":8,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":8,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":6,"character":23},"end":{"line":6,"character":23}},"context":{"diagnostics":[]}},"id":9,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":9,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":5,"character":21},"end":{"line":5,"character":21}},"context":{"diagnostics":[]}},"id":10,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":10,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":6,"character":23},"end":{"line":6,"character":23}},"context":{"diagnostics":[]}},"id":11,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":11,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":7,"character":22},"end":{"line":7,"character":22}},"context":{"diagnostics":[]}},"id":12,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":12,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":6,"character":23},"end":{"line":6,"character":23}},"context":{"diagnostics":[]}},"id":13,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":13,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":5,"character":21},"end":{"line":5,"character":21}},"context":{"diagnostics":[]}},"id":14,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":14,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":7,"character":22},"end":{"line":7,"character":22}},"context":{"diagnostics":[]}},"id":15,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":15,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":6,"character":23},"end":{"line":6,"character":23}},"context":{"diagnostics":[]}},"id":16,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":16,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":5,"character":21},"end":{"line":5,"character":21}},"context":{"diagnostics":[]}},"id":17,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":17,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":6,"character":23},"end":{"line":6,"character":23}},"context":{"diagnostics":[]}},"id":18,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":18,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":7,"character":22},"end":{"line":7,"character":22}},"context":{"diagnostics":[]}},"id":19,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":19,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":7,"character":22},"end":{"line":7,"character":22}},"context":{"diagnostics":[]}},"id":20,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":20,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"position":{"line":5,"character":20}},"id":21,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":21,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 63

{"method":"$/cancelRequest","params":{"id":20},"jsonrpc":"2.0"}Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":5,"character":0},"end":{"line":5,"character":20}},"context":{"diagnostics":[]}},"id":22,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":22,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":5,"character":21},"end":{"line":5,"character":21}},"context":{"diagnostics":[]}},"id":23,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":23,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server205635024/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":26,"character":28},"end":{"line":26,"character":28}},"context":{"diagnostics":[]}},"id":24,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":24,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 59

{"method":"shutdown","params":null,"id":25,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":25,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 47

{"method":"exit","params":null,"jsonrpc":"2.0"}<<< Read Error: EOF







Started logging.

>>>
Content-Length: 2201

{"method":"initialize","params":{"processId":31403,"rootPath":"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch","rootUri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 2072

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\n\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 22 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 48 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nfloat getDistance();\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\");\n\n  if (distance \u003c= 10) {\n\n    analogWrite(redPin, 255);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 0);\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 0);\n    analogWrite(bluePin, 255);\n    analogWrite(greenPin, 0);\n  } else {\n    analogWrite(redPin, 0);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 255);\n  }\n\n  delay(50);\n}\n\n\nfloat getDistance() {\n  float echoTime;\n  float calculatedDistance;\n\n  digitalWrite(trigPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigPin, LOW);\n\n  echoTime = pulseIn(echoPin, HIGH);\n  calculatedDistance = echoTime / 148.0;\n\n  return(calculatedDistance);\n}\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/getDistance.ino\"\n\n"}},"jsonrpc":"2.0"}Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"}},"id":1,"jsonrpc":"2.0"}Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":26,"character":28},"end":{"line":26,"character":28}},"context":{"diagnostics":[]}},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":1}}Content-Length: 2314

{"id":1,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":17,"line":16},"start":{"character":6,"line":16}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":28},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":10,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":53},"start":{"character":0,"line":30}},"selectionRange":{"end":{"character":9,"line":30},"start":{"character":5,"line":30}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":68},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":17,"line":56},"start":{"character":6,"line":56}}}]}Content-Length: 36

{"id":2,"jsonrpc":"2.0","result":[]}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7.4074074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7.4074074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11.111111111111111}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11.111111111111111}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14.814814814814815}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14.814814814814815}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18.518518518518519}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18.518518518518519}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22.222222222222221}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22.222222222222221}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25.925925925925927}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25.925925925925927}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29.62962962962963}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29.62962962962963}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33.333333333333336}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33.333333333333336}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37.037037037037038}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37.037037037037038}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40.74074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40.74074074074074}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44.444444444444443}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44.444444444444443}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48.148148148148145}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48.148148148148145}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51.851851851851855}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51.851851851851855}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55.555555555555557}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55.555555555555557}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59.25925925925926}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59.25925925925926}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62.962962962962962}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62.962962962962962}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66.666666666666671}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66.666666666666671}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70.370370370370367}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70.370370370370367}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/27","percentage":74.074074074074076}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/27","percentage":77.777777777777771}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/27","percentage":81.481481481481481}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/27","percentage":85.18518518518519}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/27","percentage":88.888888888888886}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/27","percentage":92.592592592592595}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/27","percentage":96.296296296296291}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":10}},"context":{"diagnostics":[]}},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":3,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":27},"end":{"line":47,"character":27}},"context":{"diagnostics":[]}},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":4,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":28},"end":{"line":48,"character":28}},"context":{"diagnostics":[]}},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":5,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":31},"end":{"line":49,"character":31}},"context":{"diagnostics":[]}},"id":6,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":6,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":41,"character":29},"end":{"line":41,"character":29}},"context":{"diagnostics":[]}},"id":7,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":7,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":50,"character":3},"end":{"line":50,"character":3}},"context":{"diagnostics":[]}},"id":8,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":8,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":41,"character":29},"end":{"line":41,"character":29}},"context":{"diagnostics":[]}},"id":9,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":9,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":12},"end":{"line":52,"character":12}},"context":{"diagnostics":[]}},"id":10,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":10,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":34,"character":25},"end":{"line":34,"character":25}},"context":{"diagnostics":[]}},"id":11,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":11,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":37,"character":23},"end":{"line":37,"character":23}},"context":{"diagnostics":[]}},"id":12,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":12,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":3}},"id":13,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":13,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":3}},"id":14,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":14,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":3}},"id":15,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":15,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":4}},"id":16,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":16,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":4},"end":{"line":46,"character":4}},"context":{"diagnostics":[]}},"id":17,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":17,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":4},"end":{"line":48,"character":28}},"context":{"diagnostics":[]}},"id":18,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":18,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":28},"end":{"line":48,"character":28}},"context":{"diagnostics":[]}},"id":19,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":19,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":31},"end":{"line":49,"character":31}},"context":{"diagnostics":[]}},"id":20,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":20,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":49,"character":24}},"id":21,"jsonrpc":"2.0"}
<<<
Content-Length: 828

{"id":21,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":39},"start":{"character":4,"line":39}}},{"kind":1,"range":{"end":{"character":15,"line":40},"start":{"character":4,"line":40}}},{"kind":1,"range":{"end":{"character":15,"line":41},"start":{"character":4,"line":41}}},{"kind":1,"range":{"end":{"character":15,"line":43},"start":{"character":4,"line":43}}},{"kind":1,"range":{"end":{"character":15,"line":44},"start":{"character":4,"line":44}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":47},"start":{"character":4,"line":47}}},{"kind":1,"range":{"end":{"character":15,"line":48},"start":{"character":4,"line":48}}},{"kind":1,"range":{"end":{"character":15,"line":49},"start":{"character":4,"line":49}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":24},"end":{"line":49,"character":24}},"context":{"diagnostics":[]}},"id":22,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":22,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":50,"character":3},"end":{"line":50,"character":3}},"context":{"diagnostics":[]}},"id":23,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":23,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 349

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":2},"contentChanges":[{"range":{"start":{"line":50,"character":2},"end":{"line":50,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 820

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":21,"line":56},"start":{"character":20,"line":56}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nDistanceSensor.ino.cpp:31:13: note: to match this '{'","range":{"end":{"character":0,"line":71},"start":{"character":0,"line":71}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nDistanceSensor.ino.cpp:72:1: error: expected '}'","range":{"end":{"character":13,"line":30},"start":{"character":12,"line":30}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":2}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":3},"contentChanges":[{"range":{"start":{"line":46,"character":9},"end":{"line":46,"character":10}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":3}}
>>>
Content-Length: 2074

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":4},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\n\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 22 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 48 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nfloat getDistance();\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\");\n\n  if (distance \u003c= 10) {\n\n    analogWrite(redPin, 255);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 0);\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 0);\n    analogWrite(bluePin, 255);\n    analogWrite(greenPin, 0);\n  } else \n    analogWrite(redPin, 0);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 255);\n  \n\n  delay(50);\n}\n\n\nfloat getDistance() {\n  float echoTime;\n  float calculatedDistance;\n\n  digitalWrite(trigPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigPin, LOW);\n\n  echoTime = pulseIn(echoPin, HIGH);\n  calculatedDistance = echoTime / 148.0;\n\n  return(calculatedDistance);\n}\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/getDistance.ino\"\n\n"}]},"jsonrpc":"2.0"}Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":40,"character":23}},"id":24,"jsonrpc":"2.0"}
<<<
Content-Length: 310

{"id":24,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":23,"line":40},"start":{"character":16,"line":40}}}}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"}},"id":25,"jsonrpc":"2.0"}
<<<
Content-Length: 2315

{"id":25,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":17,"line":16},"start":{"character":6,"line":16}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":28},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":10,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":53},"start":{"character":0,"line":30}},"selectionRange":{"end":{"character":9,"line":30},"start":{"character":5,"line":30}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":68},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":17,"line":56},"start":{"character":6,"line":56}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":46},"end":{"line":42,"character":46}},"context":{"diagnostics":[]}},"id":26,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":26,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":3}},"id":27,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":27,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":5},"contentChanges":[{"range":{"start":{"line":42,"character":45},"end":{"line":42,"character":46}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1207

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":8,"line":46},"start":{"character":4,"line":46}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":15,"line":48},"start":{"character":4,"line":48}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":15,"line":49},"start":{"character":4,"line":49}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":7,"line":52},"start":{"character":2,"line":52}},"severity":1,"source":"clang"},{"code":"extraneous_closing_brace","message":"Extraneous closing brace ('}')","range":{"end":{"character":1,"line":53},"start":{"character":0,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":5}}
>>>
Content-Length: 349

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":6},"contentChanges":[{"range":{"start":{"line":46,"character":2},"end":{"line":46,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 403

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":7,"line":46},"start":{"character":3,"line":46}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":6}}
>>>
Content-Length: 334

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":7},"contentChanges":[{"range":{"start":{"line":46,"character":2},"end":{"line":46,"character":2}},"text":"}"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":1,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":1,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 1207

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":8,"line":46},"start":{"character":4,"line":46}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":15,"line":48},"start":{"character":4,"line":48}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":15,"line":49},"start":{"character":4,"line":49}},"severity":1,"source":"clang"},{"code":"missing_type_specifier","message":"C++ requires a type specifier for all declarations","range":{"end":{"character":7,"line":52},"start":{"character":2,"line":52}},"severity":1,"source":"clang"},{"code":"extraneous_closing_brace","message":"Extraneous closing brace ('}')","range":{"end":{"character":1,"line":53},"start":{"character":0,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":7}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":3},"end":{"line":46,"character":3}},"context":{"diagnostics":[]}},"id":28,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":28,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":8},"contentChanges":[{"range":{"start":{"line":42,"character":45},"end":{"line":42,"character":45}},"text":"{"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":8}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":46},"end":{"line":42,"character":46}},"context":{"diagnostics":[]}},"id":29,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":29,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":44,"character":15}},"id":30,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"id":30,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":42,"character":21}},"id":31,"jsonrpc":"2.0"}
<<<
Content-Length: 248

{"id":31,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":37,"character":23},"end":{"line":37,"character":23}},"context":{"diagnostics":[]}},"id":32,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":32,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":40,"character":28},"end":{"line":40,"character":28}},"context":{"diagnostics":[]}},"id":33,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":33,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":26}},"id":34,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"id":34,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":26}},"id":35,"jsonrpc":"2.0"}
<<<
Content-Length: 828

{"id":35,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":39},"start":{"character":4,"line":39}}},{"kind":1,"range":{"end":{"character":15,"line":40},"start":{"character":4,"line":40}}},{"kind":1,"range":{"end":{"character":15,"line":41},"start":{"character":4,"line":41}}},{"kind":1,"range":{"end":{"character":15,"line":43},"start":{"character":4,"line":43}}},{"kind":1,"range":{"end":{"character":15,"line":44},"start":{"character":4,"line":44}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":47},"start":{"character":4,"line":47}}},{"kind":1,"range":{"end":{"character":15,"line":48},"start":{"character":4,"line":48}}},{"kind":1,"range":{"end":{"character":15,"line":49},"start":{"character":4,"line":49}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":26},"end":{"line":48,"character":26}},"context":{"diagnostics":[]}},"id":36,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":36,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":28},"end":{"line":48,"character":28}},"context":{"diagnostics":[]}},"id":37,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":37,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":14},"end":{"line":48,"character":28}},"context":{"diagnostics":[]}},"id":38,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":38,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":28},"end":{"line":48,"character":28}},"context":{"diagnostics":[]}},"id":39,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":39,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":31}},"context":{"diagnostics":[]}},"id":40,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":40,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":16}},"id":41,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":41,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":9},"contentChanges":[{"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":31}},"rangeLength":31,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":9}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":27},"end":{"line":47,"character":27}},"context":{"diagnostics":[]}},"id":42,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":42,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 342

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":10},"contentChanges":[{"range":{"start":{"line":47,"character":27},"end":{"line":47,"character":27}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":10}}
>>>
Content-Length: 365

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":11},"contentChanges":[{"range":{"start":{"line":48,"character":4},"end":{"line":48,"character":4}},"text":"    analogWrite(greenPin, 255);"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":11}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":35},"end":{"line":48,"character":35}},"context":{"diagnostics":[]}},"id":43,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":43,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":26}},"id":44,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":44,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":49,"character":22}},"id":45,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":45,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":12},"contentChanges":[{"range":{"start":{"line":49,"character":28},"end":{"line":50,"character":0}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":12}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":13},"contentChanges":[{"range":{"start":{"line":49,"character":27},"end":{"line":49,"character":28}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":7,"line":52},"start":{"character":2,"line":52}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":13}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":27},"end":{"line":49,"character":27}},"context":{"diagnostics":[]}},"id":46,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":46,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 429

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":15},"contentChanges":[{"range":{"start":{"line":49,"character":27},"end":{"line":49,"character":27}},"text":";"},{"range":{"start":{"line":49,"character":28},"end":{"line":49,"character":28}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":15}}
>>>
Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":47,"jsonrpc":"2.0"}
<<<
Content-Length: 613

{"id":47,"jsonrpc":"2.0","result":[{"newText":"\n    ","range":{"end":{"character":4,"line":47},"start":{"character":8,"line":46}}},{"newText":"\n  ","range":{"end":{"character":8,"line":48},"start":{"character":27,"line":47}}},{"newText":"\n  ","range":{"end":{"character":4,"line":49},"start":{"character":35,"line":48}}},{"newText":"\n\n\n\n  ","range":{"end":{"character":2,"line":53},"start":{"character":28,"line":49}}},{"newText":" ","range":{"end":{"character":8,"line":68},"start":{"character":8,"line":68}}},{"newText":"\n","range":{"end":{"character":0,"line":72},"start":{"character":76,"line":70}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":49,"character":15}},"id":48,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"id":48,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":14}},"id":49,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"id":49,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":44,"character":30},"end":{"line":44,"character":30}},"context":{"diagnostics":[]}},"id":50,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":50,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":51,"jsonrpc":"2.0"}
<<<
Content-Length: 613

{"id":51,"jsonrpc":"2.0","result":[{"newText":"\n    ","range":{"end":{"character":4,"line":47},"start":{"character":8,"line":46}}},{"newText":"\n  ","range":{"end":{"character":8,"line":48},"start":{"character":27,"line":47}}},{"newText":"\n  ","range":{"end":{"character":4,"line":49},"start":{"character":35,"line":48}}},{"newText":"\n\n\n\n  ","range":{"end":{"character":2,"line":53},"start":{"character":28,"line":49}}},{"newText":" ","range":{"end":{"character":8,"line":68},"start":{"character":8,"line":68}}},{"newText":"\n","range":{"end":{"character":0,"line":72},"start":{"character":76,"line":70}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":34,"character":25},"end":{"line":34,"character":25}},"context":{"diagnostics":[]}},"id":52,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":52,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":7}},"id":53,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":53,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":8}},"id":54,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":54,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":19,"line":48},"start":{"character":8,"line":48}}}}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":8}},"id":55,"jsonrpc":"2.0"}
<<<
Content-Length: 828

{"id":55,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":39},"start":{"character":4,"line":39}}},{"kind":1,"range":{"end":{"character":15,"line":40},"start":{"character":4,"line":40}}},{"kind":1,"range":{"end":{"character":15,"line":41},"start":{"character":4,"line":41}}},{"kind":1,"range":{"end":{"character":15,"line":43},"start":{"character":4,"line":43}}},{"kind":1,"range":{"end":{"character":15,"line":44},"start":{"character":4,"line":44}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":47},"start":{"character":4,"line":47}}},{"kind":1,"range":{"end":{"character":19,"line":48},"start":{"character":8,"line":48}}},{"kind":1,"range":{"end":{"character":15,"line":49},"start":{"character":4,"line":49}}}]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":8},"end":{"line":48,"character":8}},"context":{"diagnostics":[]}},"id":56,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":56,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":17}},"id":57,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":57,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":19,"line":48},"start":{"character":8,"line":48}}}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":19}},"id":58,"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"id":58,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":22,"line":47},"start":{"character":16,"line":47}}}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":16},"contentChanges":[{"range":{"start":{"line":46,"character":9},"end":{"line":46,"character":9}},"text":"{}"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":16}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":10}},"context":{"diagnostics":[]}},"id":59,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":59,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":10}},"id":60,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":60,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":15,"line":47},"start":{"character":4,"line":47}}}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":11}},"id":61,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":61,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":11},"end":{"line":46,"character":11}},"context":{"diagnostics":[]}},"id":62,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":62,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":10}},"id":63,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":63,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":17},"contentChanges":[{"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":11}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 821

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":21,"line":57},"start":{"character":20,"line":57}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nDistanceSensor.ino.cpp:31:13: note: to match this '{'","range":{"end":{"character":0,"line":72},"start":{"character":0,"line":72}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nDistanceSensor.ino.cpp:73:1: error: expected '}'","range":{"end":{"character":13,"line":30},"start":{"character":12,"line":30}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":17}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":10}},"context":{"diagnostics":[]}},"id":64,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":64,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":18},"contentChanges":[{"range":{"start":{"line":51,"character":0},"end":{"line":51,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 821

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"function_definition_not_allowed","message":"Function definition is not allowed here","range":{"end":{"character":21,"line":57},"start":{"character":20,"line":57}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nDistanceSensor.ino.cpp:31:13: note: to match this '{'","range":{"end":{"character":0,"line":72},"start":{"character":0,"line":72}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nDistanceSensor.ino.cpp:73:1: error: expected '}'","range":{"end":{"character":13,"line":30},"start":{"character":12,"line":30}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":18}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":19},"contentChanges":[{"range":{"start":{"line":51,"character":0},"end":{"line":51,"character":0}},"text":"  }"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":19}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":51,"character":3},"end":{"line":51,"character":3}},"context":{"diagnostics":[]}},"id":65,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":65,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":66,"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"id":66,"jsonrpc":"2.0","result":[{"newText":"\n    ","range":{"end":{"character":8,"line":48},"start":{"character":27,"line":47}}},{"newText":"\n  ","range":{"end":{"character":2,"line":51},"start":{"character":28,"line":49}}},{"newText":" ","range":{"end":{"character":8,"line":68},"start":{"character":8,"line":68}}},{"newText":"\n","range":{"end":{"character":0,"line":72},"start":{"character":76,"line":70}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":49,"character":12}},"id":67,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"id":67,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":68,"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"id":68,"jsonrpc":"2.0","result":[{"newText":"\n    ","range":{"end":{"character":8,"line":48},"start":{"character":27,"line":47}}},{"newText":"\n  ","range":{"end":{"character":2,"line":51},"start":{"character":28,"line":49}}},{"newText":" ","range":{"end":{"character":8,"line":68},"start":{"character":8,"line":68}}},{"newText":"\n","range":{"end":{"character":0,"line":72},"start":{"character":76,"line":70}}}]}
>>>
Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":49,"character":12}},"id":69,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":69,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":15,"line":49},"start":{"character":4,"line":49}}}}
>>>
Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":70,"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"id":70,"jsonrpc":"2.0","result":[{"newText":"\n    ","range":{"end":{"character":8,"line":48},"start":{"character":27,"line":47}}},{"newText":"\n  ","range":{"end":{"character":2,"line":51},"start":{"character":28,"line":49}}},{"newText":" ","range":{"end":{"character":8,"line":68},"start":{"character":8,"line":68}}},{"newText":"\n","range":{"end":{"character":0,"line":72},"start":{"character":76,"line":70}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":15}},"id":71,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"id":71,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":15}},"id":72,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":72,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":19,"line":48},"start":{"character":8,"line":48}}}}
>>>
Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":73,"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"id":73,"jsonrpc":"2.0","result":[{"newText":"\n    ","range":{"end":{"character":8,"line":48},"start":{"character":27,"line":47}}},{"newText":"\n  ","range":{"end":{"character":2,"line":51},"start":{"character":28,"line":49}}},{"newText":" ","range":{"end":{"character":8,"line":68},"start":{"character":8,"line":68}}},{"newText":"\n","range":{"end":{"character":0,"line":72},"start":{"character":76,"line":70}}}]}
>>>
Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":74,"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"id":74,"jsonrpc":"2.0","result":[{"newText":"\n    ","range":{"end":{"character":8,"line":48},"start":{"character":27,"line":47}}},{"newText":"\n  ","range":{"end":{"character":2,"line":51},"start":{"character":28,"line":49}}},{"newText":" ","range":{"end":{"character":8,"line":68},"start":{"character":8,"line":68}}},{"newText":"\n","range":{"end":{"character":0,"line":72},"start":{"character":76,"line":70}}}]}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":8}},"id":75,"jsonrpc":"2.0"}
<<<
Content-Length: 828

{"id":75,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":39},"start":{"character":4,"line":39}}},{"kind":1,"range":{"end":{"character":15,"line":40},"start":{"character":4,"line":40}}},{"kind":1,"range":{"end":{"character":15,"line":41},"start":{"character":4,"line":41}}},{"kind":1,"range":{"end":{"character":15,"line":43},"start":{"character":4,"line":43}}},{"kind":1,"range":{"end":{"character":15,"line":44},"start":{"character":4,"line":44}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":47},"start":{"character":4,"line":47}}},{"kind":1,"range":{"end":{"character":19,"line":48},"start":{"character":8,"line":48}}},{"kind":1,"range":{"end":{"character":15,"line":49},"start":{"character":4,"line":49}}}]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":8},"end":{"line":48,"character":8}},"context":{"diagnostics":[]}},"id":76,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":76,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":20},"contentChanges":[{"range":{"start":{"line":48,"character":6},"end":{"line":48,"character":8}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":20}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":6},"end":{"line":48,"character":6}},"context":{"diagnostics":[]}},"id":77,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":77,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":21},"contentChanges":[{"range":{"start":{"line":48,"character":4},"end":{"line":48,"character":6}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":21}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":4},"end":{"line":48,"character":4}},"context":{"diagnostics":[]}},"id":78,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":78,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":22},"contentChanges":[{"range":{"start":{"line":49,"character":28},"end":{"line":50,"character":0}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":22}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":28},"end":{"line":49,"character":28}},"context":{"diagnostics":[]}},"id":79,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":79,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":21}},"id":80,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":80,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":56},"start":{"character":6,"line":56}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 276

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":81,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":81,"jsonrpc":"2.0","result":[{"newText":" ","range":{"end":{"character":8,"line":67},"start":{"character":8,"line":67}}},{"newText":"\n","range":{"end":{"character":0,"line":71},"start":{"character":76,"line":69}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":31,"character":46}},"id":82,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":82,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 76

{"method":"$/setTraceNotification","params":{"value":"off"},"jsonrpc":"2.0"}Content-Length: 76

{"method":"$/setTraceNotification","params":{"value":"off"},"jsonrpc":"2.0"}Content-Length: 76

{"method":"$/setTraceNotification","params":{"value":"off"},"jsonrpc":"2.0"}Content-Length: 76

{"method":"$/setTraceNotification","params":{"value":"off"},"jsonrpc":"2.0"}Content-Length: 76

{"method":"$/setTraceNotification","params":{"value":"off"},"jsonrpc":"2.0"}Content-Length: 76

{"method":"$/setTraceNotification","params":{"value":"off"},"jsonrpc":"2.0"}Content-Length: 76

{"method":"$/setTraceNotification","params":{"value":"off"},"jsonrpc":"2.0"}Content-Length: 76

{"method":"$/setTraceNotification","params":{"value":"off"},"jsonrpc":"2.0"}Content-Length: 76

{"method":"$/setTraceNotification","params":{"value":"off"},"jsonrpc":"2.0"}Content-Length: 76

{"method":"$/setTraceNotification","params":{"value":"off"},"jsonrpc":"2.0"}Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":26}},"context":{"diagnostics":[]}},"id":83,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":83,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":23},"contentChanges":[{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":26}},"text":"å"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 406

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'å'","range":{"end":{"character":27,"line":25},"start":{"character":26,"line":25}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":23}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":24},"contentChanges":[{"range":{"start":{"line":25,"character":27},"end":{"line":25,"character":27}},"text":"å"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 408

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'åå'","range":{"end":{"character":28,"line":25},"start":{"character":26,"line":25}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":24}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":25},"contentChanges":[{"range":{"start":{"line":25,"character":28},"end":{"line":25,"character":28}},"text":"å"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 410

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'ååå'","range":{"end":{"character":29,"line":25},"start":{"character":26,"line":25}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":25}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":26},"contentChanges":[{"range":{"start":{"line":25,"character":29},"end":{"line":25,"character":29}},"text":"å"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 412

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'åååå'","range":{"end":{"character":30,"line":25},"start":{"character":26,"line":25}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":26}}
>>>
Content-Length: 506

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":25,"character":30},"end":{"line":25,"character":30}},"context":{"diagnostics":[{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":30}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'åååå'"}]}},"id":84,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":84,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 670

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":30},"contentChanges":[{"range":{"start":{"line":25,"character":29},"end":{"line":25,"character":30}},"rangeLength":1,"text":""},{"range":{"start":{"line":25,"character":28},"end":{"line":25,"character":29}},"rangeLength":1,"text":""},{"range":{"start":{"line":25,"character":27},"end":{"line":25,"character":28}},"rangeLength":1,"text":""},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":27}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp","version":30}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":26}},"context":{"diagnostics":[]}},"id":85,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":85,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"position":{"line":49,"character":9}},"id":86,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":86,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":15,"line":49},"start":{"character":4,"line":49}}}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":50,"character":3},"end":{"line":50,"character":3}},"context":{"diagnostics":[]}},"id":87,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":87,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server434220294/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":9},"end":{"line":46,"character":9}},"context":{"diagnostics":[]}},"id":88,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":88,"jsonrpc":"2.0","result":[]}






Started logging.

>>>
Content-Length: 2201

{"method":"initialize","params":{"processId":31403,"rootPath":"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server600052137/sketch","rootUri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server600052137/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 2072

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server600052137/sketch/DistanceSensor.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\n\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 22 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 48 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nfloat getDistance();\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\");\n\n  if (distance \u003c= 10) {\n\n    analogWrite(redPin, 255);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 0);\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 0);\n    analogWrite(bluePin, 255);\n    analogWrite(greenPin, 0);\n  } else {\n    analogWrite(redPin, 0);\n    analogWrite(greenPin, 255);\n    analogWrite(bluePin, 0);\n  }\n\n  delay(50);\n}\n\n\nfloat getDistance() {\n  float echoTime;\n  float calculatedDistance;\n\n  digitalWrite(trigPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigPin, LOW);\n\n  echoTime = pulseIn(echoPin, HIGH);\n  calculatedDistance = echoTime / 148.0;\n\n  return(calculatedDistance);\n}\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/getDistance.ino\"\n\n"}},"jsonrpc":"2.0"}Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server600052137/sketch/DistanceSensor.ino.cpp"}},"id":1,"jsonrpc":"2.0"}Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server600052137/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":11},"end":{"line":46,"character":11}},"context":{"diagnostics":[]}},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/26","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/26","percentage":0}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/26","percentage":3.8461538461538463}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/26","percentage":3.8461538461538463}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/26","percentage":3.8461538461538463}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/26","percentage":3.8461538461538463}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/26","percentage":3.8461538461538463}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/26","percentage":3.8461538461538463}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/26","percentage":3.8461538461538463}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/26","percentage":3.8461538461538463}}}Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server600052137/sketch/DistanceSensor.ino.cpp","version":1}}Content-Length: 2314

{"id":1,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":17,"line":16},"start":{"character":6,"line":16}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":28},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":10,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":53},"start":{"character":0,"line":30}},"selectionRange":{"end":{"character":9,"line":30},"start":{"character":5,"line":30}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":68},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":17,"line":56},"start":{"character":6,"line":56}}}]}Content-Length: 36

{"id":2,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 456

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server600052137/sketch/DistanceSensor.ino.cpp","version":3},"contentChanges":[{"range":{"start":{"line":46,"character":10},"end":{"line":46,"character":11}},"rangeLength":1,"text":""},{"range":{"start":{"line":46,"character":9},"end":{"line":46,"character":10}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 62

{"method":"$/cancelRequest","params":{"id":1},"jsonrpc":"2.0"}Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server600052137/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":9},"end":{"line":46,"character":9}},"context":{"diagnostics":[]}},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 99

{"error":{"code":-32602,"message":"onCodeAction called for non-added file"},"id":3,"jsonrpc":"2.0"}<<< Read Error: read |0: file already closed
--- Stream closed, err=%!s(<nil>)







Started logging.

>>>
Content-Length: 2201

{"method":"initialize","params":{"processId":31403,"rootPath":"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch","rootUri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 2072

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\n\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 22 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 48 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nfloat getDistance();\n#line 10 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\");\n\n  if (distance \u003c= 10) {\n\n    analogWrite(redPin, 255);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 0);\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 0);\n    analogWrite(bluePin, 255);\n    analogWrite(greenPin, 0);\n  } else {\n    analogWrite(redPin, 0);\n    analogWrite(greenPin, 255);\n    analogWrite(bluePin, 0);\n  }\n\n  delay(50);\n}\n\n\nfloat getDistance() {\n  float echoTime;\n  float calculatedDistance;\n\n  digitalWrite(trigPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigPin, LOW);\n\n  echoTime = pulseIn(echoPin, HIGH);\n  calculatedDistance = echoTime / 148.0;\n\n  return(calculatedDistance);\n}\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/getDistance.ino\"\n\n"}},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":1,"jsonrpc":"2.0"}Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":9},"end":{"line":46,"character":9}},"context":{"diagnostics":[]}},"id":2,"jsonrpc":"2.0"}Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3.7037037037037037}}}Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":1}}Content-Length: 2314

{"id":1,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":2},"start":{"character":0,"line":2}},"selectionRange":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":3},"start":{"character":10,"line":3}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":16,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":6},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":18,"line":6},"start":{"character":10,"line":6}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":17,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":14,"line":9},"start":{"character":6,"line":9}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":10,"line":12},"start":{"character":5,"line":12}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":9,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":17,"line":16},"start":{"character":6,"line":16}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":28},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":10,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":53},"start":{"character":0,"line":30}},"selectionRange":{"end":{"character":9,"line":30},"start":{"character":5,"line":30}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":68},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":17,"line":56},"start":{"character":6,"line":56}}}]}Content-Length: 36

{"id":2,"jsonrpc":"2.0","result":[]}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7.4074074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7.4074074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11.111111111111111}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11.111111111111111}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14.814814814814815}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14.814814814814815}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18.518518518518519}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18.518518518518519}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22.222222222222221}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22.222222222222221}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25.925925925925927}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25.925925925925927}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29.62962962962963}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29.62962962962963}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33.333333333333336}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33.333333333333336}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37.037037037037038}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37.037037037037038}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40.74074074074074}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40.74074074074074}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44.444444444444443}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44.444444444444443}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48.148148148148145}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48.148148148148145}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51.851851851851855}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51.851851851851855}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55.555555555555557}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55.555555555555557}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59.25925925925926}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59.25925925925926}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62.962962962962962}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62.962962962962962}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66.666666666666671}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66.666666666666671}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70.370370370370367}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70.370370370370367}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/27","percentage":74.074074074074076}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/27","percentage":77.777777777777771}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/27","percentage":81.481481481481481}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/27","percentage":85.18518518518519}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/27","percentage":88.888888888888886}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/27","percentage":92.592592592592595}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/27","percentage":96.296296296296291}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":43,"character":24}},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":3,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":43,"character":24},"end":{"line":43,"character":24}},"context":{"diagnostics":[]}},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":4,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":45,"character":29},"end":{"line":45,"character":29}},"context":{"diagnostics":[]}},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":5,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":35,"character":14}},"id":6,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":6,"jsonrpc":"2.0","result":[{"range":{"end":{"character":21,"line":137},"start":{"character":14,"line":137}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}]}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":34,"character":12}},"id":7,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":7,"jsonrpc":"2.0","result":[{"range":{"end":{"character":19,"line":108},"start":{"character":14,"line":108}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}]}
>>>
Content-Length: 6071

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","languageId":"cpp","version":1,"text":"/*\n Print.cpp - Base class that provides print() and println()\n Copyright (c) 2008 David A. Mellis.  All right reserved.\n \n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n \n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n \n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n \n Modified 23 November 2006 by David A. Mellis\n Modified 03 August 2015 by Chuck Todd\n */\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n#include \"Arduino.h\"\n\n#include \"Print.h\"\n\n// Public Methods //////////////////////////////////////////////////////////////\n\n/* default implementation: may be overridden */\nsize_t Print::write(const uint8_t *buffer, size_t size)\n{\n  size_t n = 0;\n  while (size--) {\n    if (write(*buffer++)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const __FlashStringHelper *ifsh)\n{\n  PGM_P p = reinterpret_cast\u003cPGM_P\u003e(ifsh);\n  size_t n = 0;\n  while (1) {\n    unsigned char c = pgm_read_byte(p++);\n    if (c == 0) break;\n    if (write(c)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const String \u0026s)\n{\n  return write(s.c_str(), s.length());\n}\n\nsize_t Print::print(const char str[])\n{\n  return write(str);\n}\n\nsize_t Print::print(char c)\n{\n  return write(c);\n}\n\nsize_t Print::print(unsigned char b, int base)\n{\n  return print((unsigned long) b, base);\n}\n\nsize_t Print::print(int n, int base)\n{\n  return print((long) n, base);\n}\n\nsize_t Print::print(unsigned int n, int base)\n{\n  return print((unsigned long) n, base);\n}\n\nsize_t Print::print(long n, int base)\n{\n  if (base == 0) {\n    return write(n);\n  } else if (base == 10) {\n    if (n \u003c 0) {\n      int t = print('-');\n      n = -n;\n      return printNumber(n, 10) + t;\n    }\n    return printNumber(n, 10);\n  } else {\n    return printNumber(n, base);\n  }\n}\n\nsize_t Print::print(unsigned long n, int base)\n{\n  if (base == 0) return write(n);\n  else return printNumber(n, base);\n}\n\nsize_t Print::print(double n, int digits)\n{\n  return printFloat(n, digits);\n}\n\nsize_t Print::println(const __FlashStringHelper *ifsh)\n{\n  size_t n = print(ifsh);\n  n += println();\n  return n;\n}\n\nsize_t Print::print(const Printable\u0026 x)\n{\n  return x.printTo(*this);\n}\n\nsize_t Print::println(void)\n{\n  return write(\"\\r\\n\");\n}\n\nsize_t Print::println(const String \u0026s)\n{\n  size_t n = print(s);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const char c[])\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(char c)\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned char b, int base)\n{\n  size_t n = print(b, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(double num, int digits)\n{\n  size_t n = print(num, digits);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const Printable\u0026 x)\n{\n  size_t n = print(x);\n  n += println();\n  return n;\n}\n\n// Private Methods /////////////////////////////////////////////////////////////\n\nsize_t Print::printNumber(unsigned long n, uint8_t base)\n{\n  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.\n  char *str = \u0026buf[sizeof(buf) - 1];\n\n  *str = '\\0';\n\n  // prevent crash if called with base == 1\n  if (base \u003c 2) base = 10;\n\n  do {\n    char c = n % base;\n    n /= base;\n\n    *--str = c \u003c 10 ? c + '0' : c + 'A' - 10;\n  } while(n);\n\n  return write(str);\n}\n\nsize_t Print::printFloat(double number, uint8_t digits) \n{ \n  size_t n = 0;\n  \n  if (isnan(number)) return print(\"nan\");\n  if (isinf(number)) return print(\"inf\");\n  if (number \u003e 4294967040.0) return print (\"ovf\");  // constant determined empirically\n  if (number \u003c-4294967040.0) return print (\"ovf\");  // constant determined empirically\n  \n  // Handle negative numbers\n  if (number \u003c 0.0)\n  {\n     n += print('-');\n     number = -number;\n  }\n\n  // Round correctly so that print(1.999, 2) prints as \"2.00\"\n  double rounding = 0.5;\n  for (uint8_t i=0; i\u003cdigits; ++i)\n    rounding /= 10.0;\n  \n  number += rounding;\n\n  // Extract the integer part of the number and print it\n  unsigned long int_part = (unsigned long)number;\n  double remainder = number - (double)int_part;\n  n += print(int_part);\n\n  // Print the decimal point, but only if there are digits beyond\n  if (digits \u003e 0) {\n    n += print('.'); \n  }\n\n  // Extract digits from the remainder one at a time\n  while (digits-- \u003e 0)\n  {\n    remainder *= 10.0;\n    unsigned int toPrint = (unsigned int)(remainder);\n    n += print(toPrint);\n    remainder -= toPrint; \n  } \n  \n  return n;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 184

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}}
>>>
Content-Length: 6071

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","languageId":"cpp","version":1,"text":"/*\n Print.cpp - Base class that provides print() and println()\n Copyright (c) 2008 David A. Mellis.  All right reserved.\n \n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n \n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n \n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n \n Modified 23 November 2006 by David A. Mellis\n Modified 03 August 2015 by Chuck Todd\n */\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n#include \"Arduino.h\"\n\n#include \"Print.h\"\n\n// Public Methods //////////////////////////////////////////////////////////////\n\n/* default implementation: may be overridden */\nsize_t Print::write(const uint8_t *buffer, size_t size)\n{\n  size_t n = 0;\n  while (size--) {\n    if (write(*buffer++)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const __FlashStringHelper *ifsh)\n{\n  PGM_P p = reinterpret_cast\u003cPGM_P\u003e(ifsh);\n  size_t n = 0;\n  while (1) {\n    unsigned char c = pgm_read_byte(p++);\n    if (c == 0) break;\n    if (write(c)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const String \u0026s)\n{\n  return write(s.c_str(), s.length());\n}\n\nsize_t Print::print(const char str[])\n{\n  return write(str);\n}\n\nsize_t Print::print(char c)\n{\n  return write(c);\n}\n\nsize_t Print::print(unsigned char b, int base)\n{\n  return print((unsigned long) b, base);\n}\n\nsize_t Print::print(int n, int base)\n{\n  return print((long) n, base);\n}\n\nsize_t Print::print(unsigned int n, int base)\n{\n  return print((unsigned long) n, base);\n}\n\nsize_t Print::print(long n, int base)\n{\n  if (base == 0) {\n    return write(n);\n  } else if (base == 10) {\n    if (n \u003c 0) {\n      int t = print('-');\n      n = -n;\n      return printNumber(n, 10) + t;\n    }\n    return printNumber(n, 10);\n  } else {\n    return printNumber(n, base);\n  }\n}\n\nsize_t Print::print(unsigned long n, int base)\n{\n  if (base == 0) return write(n);\n  else return printNumber(n, base);\n}\n\nsize_t Print::print(double n, int digits)\n{\n  return printFloat(n, digits);\n}\n\nsize_t Print::println(const __FlashStringHelper *ifsh)\n{\n  size_t n = print(ifsh);\n  n += println();\n  return n;\n}\n\nsize_t Print::print(const Printable\u0026 x)\n{\n  return x.printTo(*this);\n}\n\nsize_t Print::println(void)\n{\n  return write(\"\\r\\n\");\n}\n\nsize_t Print::println(const String \u0026s)\n{\n  size_t n = print(s);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const char c[])\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(char c)\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned char b, int base)\n{\n  size_t n = print(b, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(double num, int digits)\n{\n  size_t n = print(num, digits);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const Printable\u0026 x)\n{\n  size_t n = print(x);\n  n += println();\n  return n;\n}\n\n// Private Methods /////////////////////////////////////////////////////////////\n\nsize_t Print::printNumber(unsigned long n, uint8_t base)\n{\n  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.\n  char *str = \u0026buf[sizeof(buf) - 1];\n\n  *str = '\\0';\n\n  // prevent crash if called with base == 1\n  if (base \u003c 2) base = 10;\n\n  do {\n    char c = n % base;\n    n /= base;\n\n    *--str = c \u003c 10 ? c + '0' : c + 'A' - 10;\n  } while(n);\n\n  return write(str);\n}\n\nsize_t Print::printFloat(double number, uint8_t digits) \n{ \n  size_t n = 0;\n  \n  if (isnan(number)) return print(\"nan\");\n  if (isinf(number)) return print(\"inf\");\n  if (number \u003e 4294967040.0) return print (\"ovf\");  // constant determined empirically\n  if (number \u003c-4294967040.0) return print (\"ovf\");  // constant determined empirically\n  \n  // Handle negative numbers\n  if (number \u003c 0.0)\n  {\n     n += print('-');\n     number = -number;\n  }\n\n  // Round correctly so that print(1.999, 2) prints as \"2.00\"\n  double rounding = 0.5;\n  for (uint8_t i=0; i\u003cdigits; ++i)\n    rounding /= 10.0;\n  \n  number += rounding;\n\n  // Extract the integer part of the number and print it\n  unsigned long int_part = (unsigned long)number;\n  double remainder = number - (double)int_part;\n  n += print(int_part);\n\n  // Print the decimal point, but only if there are digits beyond\n  if (digits \u003e 0) {\n    n += print('.'); \n  }\n\n  // Extract digits from the remainder one at a time\n  while (digits-- \u003e 0)\n  {\n    remainder *= 10.0;\n    unsigned int toPrint = (unsigned int)(remainder);\n    n += print(toPrint);\n    remainder -= toPrint; \n  } \n  \n  return n;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 184

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":35,"character":10}},"id":8,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":8,"jsonrpc":"2.0","result":[{"range":{"end":{"character":21,"line":137},"start":{"character":14,"line":137}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}]}
>>>
Content-Length: 6071

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","languageId":"cpp","version":1,"text":"/*\n Print.cpp - Base class that provides print() and println()\n Copyright (c) 2008 David A. Mellis.  All right reserved.\n \n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n \n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n \n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n \n Modified 23 November 2006 by David A. Mellis\n Modified 03 August 2015 by Chuck Todd\n */\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n#include \"Arduino.h\"\n\n#include \"Print.h\"\n\n// Public Methods //////////////////////////////////////////////////////////////\n\n/* default implementation: may be overridden */\nsize_t Print::write(const uint8_t *buffer, size_t size)\n{\n  size_t n = 0;\n  while (size--) {\n    if (write(*buffer++)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const __FlashStringHelper *ifsh)\n{\n  PGM_P p = reinterpret_cast\u003cPGM_P\u003e(ifsh);\n  size_t n = 0;\n  while (1) {\n    unsigned char c = pgm_read_byte(p++);\n    if (c == 0) break;\n    if (write(c)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const String \u0026s)\n{\n  return write(s.c_str(), s.length());\n}\n\nsize_t Print::print(const char str[])\n{\n  return write(str);\n}\n\nsize_t Print::print(char c)\n{\n  return write(c);\n}\n\nsize_t Print::print(unsigned char b, int base)\n{\n  return print((unsigned long) b, base);\n}\n\nsize_t Print::print(int n, int base)\n{\n  return print((long) n, base);\n}\n\nsize_t Print::print(unsigned int n, int base)\n{\n  return print((unsigned long) n, base);\n}\n\nsize_t Print::print(long n, int base)\n{\n  if (base == 0) {\n    return write(n);\n  } else if (base == 10) {\n    if (n \u003c 0) {\n      int t = print('-');\n      n = -n;\n      return printNumber(n, 10) + t;\n    }\n    return printNumber(n, 10);\n  } else {\n    return printNumber(n, base);\n  }\n}\n\nsize_t Print::print(unsigned long n, int base)\n{\n  if (base == 0) return write(n);\n  else return printNumber(n, base);\n}\n\nsize_t Print::print(double n, int digits)\n{\n  return printFloat(n, digits);\n}\n\nsize_t Print::println(const __FlashStringHelper *ifsh)\n{\n  size_t n = print(ifsh);\n  n += println();\n  return n;\n}\n\nsize_t Print::print(const Printable\u0026 x)\n{\n  return x.printTo(*this);\n}\n\nsize_t Print::println(void)\n{\n  return write(\"\\r\\n\");\n}\n\nsize_t Print::println(const String \u0026s)\n{\n  size_t n = print(s);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const char c[])\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(char c)\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned char b, int base)\n{\n  size_t n = print(b, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(double num, int digits)\n{\n  size_t n = print(num, digits);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const Printable\u0026 x)\n{\n  size_t n = print(x);\n  n += println();\n  return n;\n}\n\n// Private Methods /////////////////////////////////////////////////////////////\n\nsize_t Print::printNumber(unsigned long n, uint8_t base)\n{\n  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.\n  char *str = \u0026buf[sizeof(buf) - 1];\n\n  *str = '\\0';\n\n  // prevent crash if called with base == 1\n  if (base \u003c 2) base = 10;\n\n  do {\n    char c = n % base;\n    n /= base;\n\n    *--str = c \u003c 10 ? c + '0' : c + 'A' - 10;\n  } while(n);\n\n  return write(str);\n}\n\nsize_t Print::printFloat(double number, uint8_t digits) \n{ \n  size_t n = 0;\n  \n  if (isnan(number)) return print(\"nan\");\n  if (isinf(number)) return print(\"inf\");\n  if (number \u003e 4294967040.0) return print (\"ovf\");  // constant determined empirically\n  if (number \u003c-4294967040.0) return print (\"ovf\");  // constant determined empirically\n  \n  // Handle negative numbers\n  if (number \u003c 0.0)\n  {\n     n += print('-');\n     number = -number;\n  }\n\n  // Round correctly so that print(1.999, 2) prints as \"2.00\"\n  double rounding = 0.5;\n  for (uint8_t i=0; i\u003cdigits; ++i)\n    rounding /= 10.0;\n  \n  number += rounding;\n\n  // Extract the integer part of the number and print it\n  unsigned long int_part = (unsigned long)number;\n  double remainder = number - (double)int_part;\n  n += print(int_part);\n\n  // Print the decimal point, but only if there are digits beyond\n  if (digits \u003e 0) {\n    n += print('.'); \n  }\n\n  // Extract digits from the remainder one at a time\n  while (digits-- \u003e 0)\n  {\n    remainder *= 10.0;\n    unsigned int toPrint = (unsigned int)(remainder);\n    n += print(toPrint);\n    remainder -= toPrint; \n  } \n  \n  return n;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 184

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}}
>>>
Content-Length: 253

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":6,"character":9}},"id":9,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":9,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 254

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":2,"character":0}},"id":10,"jsonrpc":"2.0"}
<<<
Content-Length: 264

{"id":10,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `trigPin`  \n\n---\nType: `const int`  \nValue = `11`  \n\n---\n```cpp\nconst int trigPin = 11\n```"},"range":{"end":{"character":5,"line":2},"start":{"character":0,"line":2}}}}
>>>
Content-Length: 266

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":2,"character":0}},"id":11,"jsonrpc":"2.0"}
<<<
Content-Length: 390

{"id":11,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":17,"line":2},"start":{"character":10,"line":2}}},{"kind":2,"range":{"end":{"character":17,"line":22},"start":{"character":10,"line":22}}},{"kind":2,"range":{"end":{"character":22,"line":60},"start":{"character":15,"line":60}}},{"kind":2,"range":{"end":{"character":22,"line":62},"start":{"character":15,"line":62}}}]}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"context":{"diagnostics":[]}},"id":12,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":12,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":2},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":2}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":3},"contentChanges":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":3}}
>>>
Content-Length: 2080

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":4},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\n\n\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\n\n#line 12 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 24 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 50 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nfloat getDistance();\n#line 12 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\");\n\n  if (distance \u003c= 10) {\n\n    analogWrite(redPin, 255);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 0);\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 0);\n    analogWrite(bluePin, 255);\n    analogWrite(greenPin, 0);\n  } else {\n    analogWrite(redPin, 0);\n    analogWrite(greenPin, 255);\n    analogWrite(bluePin, 0);\n  }\n\n  delay(50);\n}\n\n\nfloat getDistance() {\n  float echoTime;\n  float calculatedDistance;\n\n  digitalWrite(trigPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigPin, LOW);\n\n  echoTime = pulseIn(echoPin, HIGH);\n  calculatedDistance = echoTime / 148.0;\n\n  return(calculatedDistance);\n}\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/getDistance.ino\"\n\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":4}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":5},"contentChanges":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"text":"#"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":1,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":1,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":5}}
>>>
Content-Length: 326

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":1}},"context":{"diagnostics":[]}},"id":13,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":13,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":14,"jsonrpc":"2.0"}
<<<
Content-Length: 2319

{"id":14,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":10,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":9,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":17,"line":18},"start":{"character":6,"line":18}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":30},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":10,"line":20},"start":{"character":5,"line":20}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":55},"start":{"character":0,"line":32}},"selectionRange":{"end":{"character":9,"line":32},"start":{"character":5,"line":32}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":70},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":17,"line":58},"start":{"character":6,"line":58}}}]}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":6},"contentChanges":[{"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":1}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 414

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_invalid_directive","message":"Invalid preprocessing directive","range":{"end":{"character":2,"line":2},"start":{"character":1,"line":2}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":6}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":7},"contentChanges":[{"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":2}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 414

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_invalid_directive","message":"Invalid preprocessing directive","range":{"end":{"character":3,"line":2},"start":{"character":1,"line":2}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":7}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":8},"contentChanges":[{"range":{"start":{"line":2,"character":3},"end":{"line":2,"character":3}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 414

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_invalid_directive","message":"Invalid preprocessing directive","range":{"end":{"character":4,"line":2},"start":{"character":1,"line":2}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":8}}
>>>
Content-Length: 332

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":9},"contentChanges":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 414

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_invalid_directive","message":"Invalid preprocessing directive","range":{"end":{"character":5,"line":2},"start":{"character":1,"line":2}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":9}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":10},"contentChanges":[{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":5}},"text":"u"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 415

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_invalid_directive","message":"Invalid preprocessing directive","range":{"end":{"character":6,"line":2},"start":{"character":1,"line":2}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":10}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":11},"contentChanges":[{"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":6}},"text":"d"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 415

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_invalid_directive","message":"Invalid preprocessing directive","range":{"end":{"character":7,"line":2},"start":{"character":1,"line":2}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":11}}
>>>
Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":12},"contentChanges":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"text":"e"}]},"jsonrpc":"2.0"}Content-Length: 333

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":13},"contentChanges":[{"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":8}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_expects_filename","message":"Expected \"FILENAME\" or <FILENAME>","range":{"end":{"character":0,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":12}}Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_expects_filename","message":"Expected \"FILENAME\" or <FILENAME>","range":{"end":{"character":0,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":13}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":14},"contentChanges":[{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"text":"\u003c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected","message":"Expected '>'\n\nDistanceSensor.ino.cpp:3:10: note: to match this '<'","range":{"end":{"character":0,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"},{"message":"To match this '<'\n\nDistanceSensor.ino.cpp:5:1: error: expected '>'","range":{"end":{"character":10,"line":2},"start":{"character":9,"line":2}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":14}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":15},"contentChanges":[{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"text":"S"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected","message":"Expected '>'\n\nDistanceSensor.ino.cpp:3:10: note: to match this '<'","range":{"end":{"character":0,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"},{"message":"To match this '<'\n\nDistanceSensor.ino.cpp:5:1: error: expected '>'","range":{"end":{"character":10,"line":2},"start":{"character":9,"line":2}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":15}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":16},"contentChanges":[{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":11}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected","message":"Expected '>'\n\nDistanceSensor.ino.cpp:3:10: note: to match this '<'","range":{"end":{"character":0,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"},{"message":"To match this '<'\n\nDistanceSensor.ino.cpp:5:1: error: expected '>'","range":{"end":{"character":10,"line":2},"start":{"character":9,"line":2}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":16}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":17},"contentChanges":[{"range":{"start":{"line":2,"character":12},"end":{"line":2,"character":12}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":18},"contentChanges":[{"range":{"start":{"line":2,"character":13},"end":{"line":2,"character":13}},"text":"v"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected","message":"Expected '>'\n\nDistanceSensor.ino.cpp:3:10: note: to match this '<'","range":{"end":{"character":0,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"},{"message":"To match this '<'\n\nDistanceSensor.ino.cpp:5:1: error: expected '>'","range":{"end":{"character":10,"line":2},"start":{"character":9,"line":2}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":17}}Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected","message":"Expected '>'\n\nDistanceSensor.ino.cpp:3:10: note: to match this '<'","range":{"end":{"character":0,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"},{"message":"To match this '<'\n\nDistanceSensor.ino.cpp:5:1: error: expected '>'","range":{"end":{"character":10,"line":2},"start":{"character":9,"line":2}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":18}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":19},"contentChanges":[{"range":{"start":{"line":2,"character":14},"end":{"line":2,"character":14}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected","message":"Expected '>'\n\nDistanceSensor.ino.cpp:3:10: note: to match this '<'","range":{"end":{"character":0,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"},{"message":"To match this '<'\n\nDistanceSensor.ino.cpp:5:1: error: expected '>'","range":{"end":{"character":10,"line":2},"start":{"character":9,"line":2}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":19}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":20},"contentChanges":[{"range":{"start":{"line":2,"character":15},"end":{"line":2,"character":15}},"text":"."}]},"jsonrpc":"2.0"}Content-Length: 311

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":2,"character":16},"context":{"triggerKind":2,"triggerCharacter":"."}},"id":15,"jsonrpc":"2.0"}
<<<
Content-Length: 68

{"id":15,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected","message":"Expected '>'\n\nDistanceSensor.ino.cpp:3:10: note: to match this '<'","range":{"end":{"character":0,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"},{"message":"To match this '<'\n\nDistanceSensor.ino.cpp:5:1: error: expected '>'","range":{"end":{"character":10,"line":2},"start":{"character":9,"line":2}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":20}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":21},"contentChanges":[{"range":{"start":{"line":2,"character":16},"end":{"line":2,"character":16}},"text":"h"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected","message":"Expected '>'\n\nDistanceSensor.ino.cpp:3:10: note: to match this '<'","range":{"end":{"character":0,"line":4},"start":{"character":0,"line":4}},"severity":1,"source":"clang"},{"message":"To match this '<'\n\nDistanceSensor.ino.cpp:5:1: error: expected '>'","range":{"end":{"character":10,"line":2},"start":{"character":9,"line":2}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":21}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"context":{"diagnostics":[]}},"id":16,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":16,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 340

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":22},"contentChanges":[{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"text":"\u003e"}]},"jsonrpc":"2.0"}Content-Length: 316

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":2,"character":18},"context":{"triggerKind":2,"triggerCharacter":"\u003e"}},"id":17,"jsonrpc":"2.0"}
<<<
Content-Length: 68

{"id":17,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}Content-Length: 406

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"'Servo.h' file not found","range":{"end":{"character":18,"line":2},"start":{"character":9,"line":2}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":22}}
>>>
Content-Length: 498

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":2,"character":18},"end":{"line":2,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":18}},"severity":1,"code":"pp_file_not_found","source":"clang","message":"'Servo.h' file not found"}]}},"id":18,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":18,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":19,"jsonrpc":"2.0"}
<<<
Content-Length: 2319

{"id":19,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":10,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":9,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":17,"line":18},"start":{"character":6,"line":18}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":30},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":10,"line":20},"start":{"character":5,"line":20}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":55},"start":{"character":0,"line":32}},"selectionRange":{"end":{"character":9,"line":32},"start":{"character":5,"line":32}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":70},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":17,"line":58},"start":{"character":6,"line":58}}}]}
>>>
Content-Length: 2109

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":23},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\n#include \u003cServo.h\u003e\n\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\n\n#line 12 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 24 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 50 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nfloat getDistance();\n#line 12 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\");\n\n  if (distance \u003c= 10) {\n\n    analogWrite(redPin, 255);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 0);\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 0);\n    analogWrite(bluePin, 255);\n    analogWrite(greenPin, 0);\n  } else {\n    analogWrite(redPin, 0);\n    analogWrite(greenPin, 255);\n    analogWrite(bluePin, 0);\n  }\n\n  delay(50);\n}\n\n\nfloat getDistance() {\n  float echoTime;\n  float calculatedDistance;\n\n  digitalWrite(trigPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigPin, LOW);\n\n  echoTime = pulseIn(echoPin, HIGH);\n  calculatedDistance = echoTime / 148.0;\n\n  return(calculatedDistance);\n}\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/getDistance.ino\"\n\n"}]},"jsonrpc":"2.0"}Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":7,"character":21},"end":{"line":7,"character":21}},"context":{"diagnostics":[]}},"id":20,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":2,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":2,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/8","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/8","percentage":0}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/8","percentage":12.5}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/8","percentage":12.5}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/8","percentage":12.5}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/8","percentage":12.5}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/8","percentage":12.5}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/8","percentage":12.5}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/8","percentage":12.5}}}Content-Length: 37

{"id":20,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":21,"jsonrpc":"2.0"}Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":2,"character":10}},"id":22,"jsonrpc":"2.0"}
<<<
Content-Length: 2319

{"id":21,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":10,"line":14},"start":{"character":5,"line":14}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":9,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":17,"line":18},"start":{"character":6,"line":18}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":30},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":10,"line":20},"start":{"character":5,"line":20}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":55},"start":{"character":0,"line":32}},"selectionRange":{"end":{"character":9,"line":32},"start":{"character":5,"line":32}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":70},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":17,"line":58},"start":{"character":6,"line":58}}}]}Content-Length: 39

{"id":22,"jsonrpc":"2.0","result":null}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/8","percentage":25}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/8","percentage":37.5}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/8","percentage":50}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/8","percentage":62.5}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/8","percentage":75}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/8","percentage":87.5}}}
>>>
Content-Length: 497

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":18}},"severity":1,"code":"pp_file_not_found","source":"clang","message":"'Servo.h' file not found"}]}},"id":23,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":23,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 497

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":18}},"severity":1,"code":"pp_file_not_found","source":"clang","message":"'Servo.h' file not found"}]}},"id":24,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":24,"jsonrpc":"2.0","result":[]}Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":23}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":2,"character":10}},"id":25,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":25,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":7,"character":21},"end":{"line":7,"character":21}},"context":{"diagnostics":[]}},"id":26,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":26,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":2,"character":12}},"id":27,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":27,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":24},"contentChanges":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":0}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":24}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":25},"contentChanges":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":0}},"text":"f"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 403

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'f'","range":{"end":{"character":1,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":25}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":26},"contentChanges":[{"range":{"start":{"line":12,"character":1},"end":{"line":12,"character":1}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'fl'","range":{"end":{"character":2,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":26}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":27},"contentChanges":[{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":2}},"text":"o"}]},"jsonrpc":"2.0"}Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":28},"contentChanges":[{"range":{"start":{"line":12,"character":3},"end":{"line":12,"character":3}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1028

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'floa'; did you mean 'float'? (fix available)","range":{"end":{"character":4,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"},{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'float' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":28}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":29},"contentChanges":[{"range":{"start":{"line":12,"character":4},"end":{"line":12,"character":4}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 810

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'float' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":29}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":30},"contentChanges":[{"range":{"start":{"line":12,"character":5},"end":{"line":12,"character":5}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 810

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'float' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":30}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":31},"contentChanges":[{"range":{"start":{"line":12,"character":6},"end":{"line":12,"character":6}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":31}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":32},"contentChanges":[{"range":{"start":{"line":12,"character":7},"end":{"line":12,"character":7}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":32}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":33},"contentChanges":[{"range":{"start":{"line":12,"character":8},"end":{"line":12,"character":8}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":34},"contentChanges":[{"range":{"start":{"line":12,"character":9},"end":{"line":12,"character":9}},"text":"r"}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":35},"contentChanges":[{"range":{"start":{"line":12,"character":10},"end":{"line":12,"character":10}},"text":"v"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":35}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":36},"contentChanges":[{"range":{"start":{"line":12,"character":11},"end":{"line":12,"character":11}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":36}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":37},"contentChanges":[{"range":{"start":{"line":12,"character":12},"end":{"line":12,"character":12}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":37}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":13},"end":{"line":12,"character":13}},"context":{"diagnostics":[]}},"id":28,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":28,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":38},"contentChanges":[{"range":{"start":{"line":12,"character":12},"end":{"line":12,"character":13}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":38}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":39},"contentChanges":[{"range":{"start":{"line":12,"character":11},"end":{"line":12,"character":12}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":39}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":40},"contentChanges":[{"range":{"start":{"line":12,"character":10},"end":{"line":12,"character":11}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":40}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":41},"contentChanges":[{"range":{"start":{"line":12,"character":9},"end":{"line":12,"character":10}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":41}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":42},"contentChanges":[{"range":{"start":{"line":12,"character":8},"end":{"line":12,"character":9}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":42}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":43},"contentChanges":[{"range":{"start":{"line":12,"character":7},"end":{"line":12,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":43}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":44},"contentChanges":[{"range":{"start":{"line":12,"character":6},"end":{"line":12,"character":7}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 810

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'float' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":44}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":45},"contentChanges":[{"range":{"start":{"line":12,"character":5},"end":{"line":12,"character":6}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 810

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'float' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":45}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":46},"contentChanges":[{"range":{"start":{"line":12,"character":4},"end":{"line":12,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1028

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'floa'; did you mean 'float'? (fix available)","range":{"end":{"character":4,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"},{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'float' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":46}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":47},"contentChanges":[{"range":{"start":{"line":12,"character":3},"end":{"line":12,"character":4}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 405

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'flo'","range":{"end":{"character":3,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":47}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":48},"contentChanges":[{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":3}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'fl'","range":{"end":{"character":2,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":48}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":49},"contentChanges":[{"range":{"start":{"line":12,"character":1},"end":{"line":12,"character":2}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 403

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'f'","range":{"end":{"character":1,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":49}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":50},"contentChanges":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":1}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":50}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":51},"contentChanges":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":0}},"text":"S"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 403

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'S'","range":{"end":{"character":1,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":51}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":52},"contentChanges":[{"range":{"start":{"line":12,"character":1},"end":{"line":12,"character":1}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'Se'","range":{"end":{"character":2,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":52}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":53},"contentChanges":[{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":2}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 405

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'Ser'","range":{"end":{"character":3,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":53}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":54},"contentChanges":[{"range":{"start":{"line":12,"character":3},"end":{"line":12,"character":3}},"text":"v"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1139

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'Serv'; did you mean 'Servo'? (fix available)\n\n/Applications/Arduino.app/Contents/Java/libraries/Servo/src/Servo.h:104:7:\nnote: 'Servo' declared here","range":{"end":{"character":4,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"},{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'type-name' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":54}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":55},"contentChanges":[{"range":{"start":{"line":12,"character":4},"end":{"line":12,"character":4}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1140

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'Servi'; did you mean 'Servo'? (fix available)\n\n/Applications/Arduino.app/Contents/Java/libraries/Servo/src/Servo.h:104:7:\nnote: 'Servo' declared here","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"},{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'type-name' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":55}}
>>>
Content-Length: 653

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":5},"end":{"line":12,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":5}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'Servi'; did you mean 'Servo'? (fix available)\n\n/Applications/Arduino.app/Contents/Java/libraries/Servo/src/Servo.h:104:7:\nnote: 'Servo' declared here"}]}},"id":29,"jsonrpc":"2.0"}
<<<
Content-Length: 701

{"id":29,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'Servi'; did you mean 'Servo'? (fix available)\n\n/Applications/Arduino.app/Contents/Java/libraries/Servo/src/Servo.h:104:7:\nnote: 'Servo' declared here","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"Servo","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'Servi' to 'Servo'"}]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":56},"contentChanges":[{"range":{"start":{"line":12,"character":4},"end":{"line":12,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1139

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'Serv'; did you mean 'Servo'? (fix available)\n\n/Applications/Arduino.app/Contents/Java/libraries/Servo/src/Servo.h:104:7:\nnote: 'Servo' declared here","range":{"end":{"character":4,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"},{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'type-name' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":56}}
>>>
Content-Length: 652

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":4},"end":{"line":12,"character":4}},"context":{"diagnostics":[{"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":4}},"severity":1,"code":"unknown_typename_suggest","source":"clang","message":"Unknown type name 'Serv'; did you mean 'Servo'? (fix available)\n\n/Applications/Arduino.app/Contents/Java/libraries/Servo/src/Servo.h:104:7:\nnote: 'Servo' declared here"}]}},"id":30,"jsonrpc":"2.0"}
<<<
Content-Length: 699

{"id":30,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"unknown_typename_suggest","message":"Unknown type name 'Serv'; did you mean 'Servo'? (fix available)\n\n/Applications/Arduino.app/Contents/Java/libraries/Servo/src/Servo.h:104:7:\nnote: 'Servo' declared here","range":{"end":{"character":4,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"Servo","range":{"end":{"character":4,"line":12},"start":{"character":0,"line":12}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'Serv' to 'Servo'"}]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":57},"contentChanges":[{"range":{"start":{"line":12,"character":4},"end":{"line":12,"character":4}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 814

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'type-name' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":57}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":5},"end":{"line":12,"character":5}},"context":{"diagnostics":[]}},"id":31,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":31,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":58},"contentChanges":[{"range":{"start":{"line":12,"character":5},"end":{"line":12,"character":5}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 814

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'type-name' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":58}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":59},"contentChanges":[{"range":{"start":{"line":12,"character":6},"end":{"line":12,"character":6}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":59}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":7},"end":{"line":12,"character":7}},"context":{"diagnostics":[]}},"id":32,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":32,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":60},"contentChanges":[{"range":{"start":{"line":12,"character":7},"end":{"line":12,"character":7}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":60}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":61},"contentChanges":[{"range":{"start":{"line":12,"character":8},"end":{"line":12,"character":8}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":61}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":62},"contentChanges":[{"range":{"start":{"line":12,"character":9},"end":{"line":12,"character":9}},"text":"v"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":62}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":63},"contentChanges":[{"range":{"start":{"line":12,"character":10},"end":{"line":12,"character":10}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":63}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":11},"end":{"line":12,"character":11}},"context":{"diagnostics":[]}},"id":33,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":33,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":64},"contentChanges":[{"range":{"start":{"line":12,"character":10},"end":{"line":12,"character":11}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":64}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":65},"contentChanges":[{"range":{"start":{"line":12,"character":9},"end":{"line":12,"character":10}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":65}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":66},"contentChanges":[{"range":{"start":{"line":12,"character":8},"end":{"line":12,"character":9}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":66}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":67},"contentChanges":[{"range":{"start":{"line":12,"character":7},"end":{"line":12,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":67}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":7},"end":{"line":12,"character":7}},"context":{"diagnostics":[]}},"id":34,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":34,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":68},"contentChanges":[{"range":{"start":{"line":12,"character":6},"end":{"line":12,"character":7}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 814

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'type-name' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":68}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":69},"contentChanges":[{"range":{"start":{"line":12,"character":6},"end":{"line":12,"character":6}},"text":"M"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":69}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":70},"contentChanges":[{"range":{"start":{"line":12,"character":7},"end":{"line":12,"character":7}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":70}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":8},"end":{"line":12,"character":8}},"context":{"diagnostics":[]}},"id":35,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":35,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":71},"contentChanges":[{"range":{"start":{"line":12,"character":7},"end":{"line":12,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":71}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":72},"contentChanges":[{"range":{"start":{"line":12,"character":6},"end":{"line":12,"character":7}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 814

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'type-name' declaration specifier","range":{"end":{"character":4,"line":15},"start":{"character":0,"line":15}},"severity":1,"source":"clang"},{"code":"ovl_diff_return_type","message":"Functions that differ only in their return type cannot be overloaded\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:154:6:\nnote: previous declaration is here","range":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":72}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":73},"contentChanges":[{"range":{"start":{"line":12,"character":6},"end":{"line":12,"character":6}},"text":"m"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":73}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":74},"contentChanges":[{"range":{"start":{"line":12,"character":7},"end":{"line":12,"character":7}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":74}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":75},"contentChanges":[{"range":{"start":{"line":12,"character":8},"end":{"line":12,"character":8}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":75}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":76},"contentChanges":[{"range":{"start":{"line":12,"character":9},"end":{"line":12,"character":9}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":76}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":77},"contentChanges":[{"range":{"start":{"line":12,"character":10},"end":{"line":12,"character":10}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":77}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":11},"end":{"line":12,"character":11}},"context":{"diagnostics":[]}},"id":36,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":36,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":78},"contentChanges":[{"range":{"start":{"line":12,"character":11},"end":{"line":12,"character":11}},"text":"S"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":78}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":79},"contentChanges":[{"range":{"start":{"line":12,"character":12},"end":{"line":12,"character":12}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":79}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":80},"contentChanges":[{"range":{"start":{"line":12,"character":13},"end":{"line":12,"character":13}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":80}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":14},"end":{"line":12,"character":14}},"context":{"diagnostics":[]}},"id":37,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":37,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":81},"contentChanges":[{"range":{"start":{"line":12,"character":14},"end":{"line":12,"character":14}},"text":"v"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":81}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":15},"end":{"line":12,"character":15}},"context":{"diagnostics":[]}},"id":38,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":38,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":82},"contentChanges":[{"range":{"start":{"line":12,"character":15},"end":{"line":12,"character":15}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":82}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":16},"end":{"line":12,"character":16}},"context":{"diagnostics":[]}},"id":39,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":39,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":83},"contentChanges":[{"range":{"start":{"line":12,"character":15},"end":{"line":12,"character":16}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":83}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":84},"contentChanges":[{"range":{"start":{"line":12,"character":15},"end":{"line":12,"character":15}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 460

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":14},"start":{"character":0,"line":14}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":84}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":16},"end":{"line":12,"character":16}},"context":{"diagnostics":[]}},"id":40,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":40,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":35,"character":27},"end":{"line":35,"character":27}},"context":{"diagnostics":[]}},"id":41,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":41,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":12,"character":16}},"id":42,"jsonrpc":"2.0"}
<<<
Content-Length: 124

{"id":42,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":16},"end":{"line":12,"character":16}},"context":{"diagnostics":[]}},"id":43,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":43,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":85},"contentChanges":[{"range":{"start":{"line":12,"character":16},"end":{"line":12,"character":16}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":85}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":17},"end":{"line":12,"character":17}},"context":{"diagnostics":[]}},"id":44,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":44,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":26,"character":26},"end":{"line":26,"character":26}},"context":{"diagnostics":[]}},"id":45,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":45,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":22,"character":34}},"id":46,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":46,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":22,"character":34}},"id":47,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":47,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":22,"character":34},"end":{"line":22,"character":34}},"context":{"diagnostics":[]}},"id":48,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":48,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":4,"character":21}},"id":49,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":49,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":4,"character":20},"end":{"line":4,"character":22}},"context":{"diagnostics":[]}},"id":50,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":50,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":4,"character":19}},"id":51,"jsonrpc":"2.0"}
<<<
Content-Length: 266

{"id":51,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `trigPin`  \n\n---\nType: `const int`  \nValue = `11`  \n\n---\n```cpp\nconst int trigPin = 11\n```"},"range":{"end":{"character":19,"line":4},"start":{"character":18,"line":4}}}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":86},"contentChanges":[{"range":{"start":{"line":4,"character":20},"end":{"line":4,"character":22}},"rangeLength":2,"text":"1"}]},"jsonrpc":"2.0"}Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":87},"contentChanges":[{"range":{"start":{"line":4,"character":21},"end":{"line":4,"character":21}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":87}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":4,"character":22},"end":{"line":4,"character":22}},"context":{"diagnostics":[]}},"id":52,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":52,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":7,"character":13}},"id":53,"jsonrpc":"2.0"}
<<<
Content-Length: 262

{"id":53,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}}}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":5,"character":20}},"id":54,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":54,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":5,"character":21}},"id":55,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":55,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":88},"contentChanges":[{"range":{"start":{"line":5,"character":20},"end":{"line":5,"character":22}},"rangeLength":2,"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":88}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":5,"character":21},"end":{"line":5,"character":21}},"context":{"diagnostics":[]}},"id":56,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":56,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":89},"contentChanges":[{"range":{"start":{"line":5,"character":21},"end":{"line":5,"character":21}},"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":89}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":5,"character":22},"end":{"line":5,"character":22}},"context":{"diagnostics":[]}},"id":57,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":57,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 456

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":91},"contentChanges":[{"range":{"start":{"line":5,"character":21},"end":{"line":5,"character":22}},"rangeLength":1,"text":""},{"range":{"start":{"line":5,"character":20},"end":{"line":5,"character":21}},"rangeLength":1,"text":"12"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":91}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":5,"character":20},"end":{"line":5,"character":22}},"context":{"diagnostics":[]}},"id":58,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":58,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 456

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":93},"contentChanges":[{"range":{"start":{"line":4,"character":21},"end":{"line":4,"character":22}},"rangeLength":1,"text":""},{"range":{"start":{"line":4,"character":20},"end":{"line":4,"character":21}},"rangeLength":1,"text":"11"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":93}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":4,"character":20},"end":{"line":4,"character":22}},"context":{"diagnostics":[]}},"id":59,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":59,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":28,"character":7}},"id":60,"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"id":60,"jsonrpc":"2.0","result":[{"range":{"end":{"character":12,"line":28},"start":{"character":5,"line":28}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}]}
>>>
Content-Length: 5753

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg \u0026= ~bit;\n\t\t*out \u0026= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg \u0026= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out \u0026= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) \u0026 bit) return HIGH;\n\treturn LOW;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":30,"character":27},"end":{"line":30,"character":27}},"context":{"diagnostics":[]}},"id":61,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":61,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":35,"character":14}},"id":62,"jsonrpc":"2.0"}
<<<
Content-Length: 247

{"id":62,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `getDistance`  \n\n---\n→ `float`  \n\n---\n```cpp\nfloat getDistance()\n```"},"range":{"end":{"character":24,"line":35},"start":{"character":13,"line":35}}}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":37,"character":20}},"id":63,"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"id":63,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `distance`  \n\n---\nType: `float`  \nValue = `0.000000e+00`  \nPassed (converted to double)  \n\n---\n```cpp\nfloat distance = 0\n```"},"range":{"end":{"character":23,"line":37},"start":{"character":15,"line":37}}}}
>>>
Content-Length: 340

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":94},"contentChanges":[{"range":{"start":{"line":30,"character":27},"end":{"line":30,"character":27}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":94}}
>>>
Content-Length: 442

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":96},"contentChanges":[{"range":{"start":{"line":31,"character":2},"end":{"line":31,"character":2}},"text":"\n  "},{"range":{"start":{"line":31,"character":0},"end":{"line":31,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":96}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":97},"contentChanges":[{"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":2}},"text":"m"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'm'","range":{"end":{"character":3,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":97}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":98},"contentChanges":[{"range":{"start":{"line":32,"character":3},"end":{"line":32,"character":3}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'mi'","range":{"end":{"character":4,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":98}}
>>>
Content-Length: 509

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":4}},"context":{"diagnostics":[{"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":4}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'mi'"}]}},"id":64,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":64,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":65,"jsonrpc":"2.0"}
<<<
Content-Length: 2514

{"id":65,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":58},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":73},"start":{"character":0,"line":61}},"selectionRange":{"end":{"character":17,"line":61},"start":{"character":6,"line":61}}}]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":99},"contentChanges":[{"range":{"start":{"line":32,"character":3},"end":{"line":32,"character":4}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'm'","range":{"end":{"character":3,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":99}}
>>>
Content-Length: 508

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":3},"end":{"line":32,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":3}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'm'"}]}},"id":66,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":66,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":67,"jsonrpc":"2.0"}
<<<
Content-Length: 2514

{"id":67,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":58},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":73},"start":{"character":0,"line":61}},"selectionRange":{"end":{"character":17,"line":61},"start":{"character":6,"line":61}}}]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":100},"contentChanges":[{"range":{"start":{"line":32,"character":3},"end":{"line":32,"character":3}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'mc'","range":{"end":{"character":4,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":100}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":101},"contentChanges":[{"range":{"start":{"line":32,"character":3},"end":{"line":32,"character":4}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'm'","range":{"end":{"character":3,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":101}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":102},"contentChanges":[{"range":{"start":{"line":32,"character":3},"end":{"line":32,"character":3}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'mi'","range":{"end":{"character":4,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":102}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":103},"contentChanges":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":4}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'mic'","range":{"end":{"character":5,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":103}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":104},"contentChanges":[{"range":{"start":{"line":32,"character":5},"end":{"line":32,"character":5}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'micr'","range":{"end":{"character":6,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":104}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":105},"contentChanges":[{"range":{"start":{"line":32,"character":6},"end":{"line":32,"character":6}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 801

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'micro'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":7,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":105}}
>>>
Content-Length: 692

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":7},"end":{"line":32,"character":7}},"context":{"diagnostics":[{"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":7}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'micro'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here"}]}},"id":68,"jsonrpc":"2.0"}
<<<
Content-Length: 742

{"id":68,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'micro'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":7,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"micros","range":{"end":{"character":7,"line":32},"start":{"character":2,"line":32}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'micro' to 'micros'"}]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":106},"contentChanges":[{"range":{"start":{"line":32,"character":7},"end":{"line":32,"character":7}},"text":"S"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 802

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microS'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":8,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":106}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":107},"contentChanges":[{"range":{"start":{"line":32,"character":8},"end":{"line":32,"character":8}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 803

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSe'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":9,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":107}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":108},"contentChanges":[{"range":{"start":{"line":32,"character":9},"end":{"line":32,"character":9}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 980

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSer'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":10,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:33:3: error: use of undeclared identifier 'microSer'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":108}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":109},"contentChanges":[{"range":{"start":{"line":32,"character":10},"end":{"line":32,"character":10}},"text":"v"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 982

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":11,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:33:3: error: use of undeclared identifier 'microServ'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":109}}
>>>
Content-Length: 636

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":11}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here"}]}},"id":69,"jsonrpc":"2.0"}
<<<
Content-Length: 697

{"id":69,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":11,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"microServo","range":{"end":{"character":11,"line":32},"start":{"character":2,"line":32}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'microServ' to 'microServo'"}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":110},"contentChanges":[{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":11}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":110}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":111},"contentChanges":[{"range":{"start":{"line":32,"character":12},"end":{"line":32,"character":12}},"text":"."}]},"jsonrpc":"2.0"}Content-Length: 312

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":13},"context":{"triggerKind":2,"triggerCharacter":"."}},"id":70,"jsonrpc":"2.0"}
<<<
Content-Length: 2222

{"id":70,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"int","filterText":"readMicroseconds","insertText":"readMicroseconds()","insertTextFormat":2,"kind":2,"label":" readMicroseconds()","score":14.520001411437988,"sortText":"3e97ae13readMicroseconds","textEdit":{"newText":"readMicroseconds()","range":{"end":{"character":13,"line":32},"start":{"character":13,"line":32}}}},{"detail":"void","filterText":"writeMicroseconds","insertText":"writeMicroseconds(${1:int value})","insertTextFormat":2,"kind":2,"label":" writeMicroseconds(int value)","score":14.520001411437988,"sortText":"3e97ae13writeMicroseconds","textEdit":{"newText":"writeMicroseconds(${1:int value})","range":{"end":{"character":13,"line":32},"start":{"character":13,"line":32}}}},{"detail":"[2 overloads]","filterText":"attach","insertText":"attach($0)","insertTextFormat":2,"kind":2,"label":" attach(…)","score":9.6800003051757812,"sortText":"3ee51eb8attach","textEdit":{"newText":"attach($0)","range":{"end":{"character":13,"line":32},"start":{"character":13,"line":32}}}},{"detail":"bool","filterText":"attached","insertText":"attached()","insertTextFormat":2,"kind":2,"label":" attached()","score":9.6800003051757812,"sortText":"3ee51eb8attached","textEdit":{"newText":"attached()","range":{"end":{"character":13,"line":32},"start":{"character":13,"line":32}}}},{"detail":"void","filterText":"detach","insertText":"detach()","insertTextFormat":2,"kind":2,"label":" detach()","score":9.6800003051757812,"sortText":"3ee51eb8detach","textEdit":{"newText":"detach()","range":{"end":{"character":13,"line":32},"start":{"character":13,"line":32}}}},{"detail":"int","filterText":"read","insertText":"read()","insertTextFormat":2,"kind":2,"label":" read()","score":9.6800003051757812,"sortText":"3ee51eb8read","textEdit":{"newText":"read()","range":{"end":{"character":13,"line":32},"start":{"character":13,"line":32}}}},{"detail":"void","filterText":"write","insertText":"write(${1:int value})","insertTextFormat":2,"kind":2,"label":" write(int value)","score":9.6800003051757812,"sortText":"3ee51eb8write","textEdit":{"newText":"write(${1:int value})","range":{"end":{"character":13,"line":32},"start":{"character":13,"line":32}}}}]}}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":71,"jsonrpc":"2.0"}
<<<
Content-Length: 2514

{"id":71,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":58},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":73},"start":{"character":0,"line":61}},"selectionRange":{"end":{"character":17,"line":61},"start":{"character":6,"line":61}}}]}Content-Length: 413

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":111}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":13},"end":{"line":32,"character":13}},"context":{"diagnostics":[]}},"id":72,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":72,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 2146

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":112},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\n#include \u003cServo.h\u003e\n\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\nServo microServo;\n\n#line 13 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 27 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 53 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nfloat getDistance();\n#line 13 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n\n  microServo.\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\");\n\n  if (distance \u003c= 10) {\n\n    analogWrite(redPin, 255);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 0);\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 0);\n    analogWrite(bluePin, 255);\n    analogWrite(greenPin, 0);\n  } else {\n    analogWrite(redPin, 0);\n    analogWrite(greenPin, 255);\n    analogWrite(bluePin, 0);\n  }\n\n  delay(50);\n}\n\n\nfloat getDistance() {\n  float echoTime;\n  float calculatedDistance;\n\n  digitalWrite(trigPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigPin, LOW);\n\n  echoTime = pulseIn(echoPin, HIGH);\n  calculatedDistance = echoTime / 148.0;\n\n  return(calculatedDistance);\n}\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/getDistance.ino\"\n\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 413

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":112}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":13},"end":{"line":32,"character":13}},"context":{"diagnostics":[]}},"id":73,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":73,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":74,"jsonrpc":"2.0"}
<<<
Content-Length: 2514

{"id":74,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":58},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":73},"start":{"character":0,"line":61}},"selectionRange":{"end":{"character":17,"line":61},"start":{"character":6,"line":61}}}]}
>>>
Content-Length: 345

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":113},"contentChanges":[{"range":{"start":{"line":32,"character":13},"end":{"line":32,"character":13}},"text":"attach()"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":3,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":3,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 992

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_no_viable_member_function_in_call","message":"No matching member function for call to 'attach'\n\n/Applications/Arduino.app/Contents/Java/libraries/Servo/src/Servo.h:108:11:\nnote: candidate function not viable: requires single argument 'pin', but no arguments were provided\n\n/Applications/Arduino.app/Contents/Java/libraries/Servo/src/Servo.h:109:11:\nnote: candidate function not viable: requires 3 arguments, but 0 were provided","range":{"end":{"character":19,"line":32},"start":{"character":2,"line":32}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":113}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":20},"end":{"line":32,"character":20}},"context":{"diagnostics":[]}},"id":75,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":75,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":114},"contentChanges":[{"range":{"start":{"line":32,"character":20},"end":{"line":32,"character":20}},"text":"9"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":33}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":114}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":21},"end":{"line":32,"character":21}},"context":{"diagnostics":[]}},"id":76,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":76,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":36,"character":22}},"id":77,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":77,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":36,"character":24}},"id":78,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":78,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":36,"character":23}},"id":79,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":79,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":36,"character":16}},"id":80,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":80,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":36,"character":16}},"id":81,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":81,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":23,"character":21},"end":{"line":23,"character":21}},"context":{"diagnostics":[]}},"id":82,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":82,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":21,"character":14},"end":{"line":21,"character":14}},"context":{"diagnostics":[]}},"id":83,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":83,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":8,"character":12}},"id":84,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":84,"jsonrpc":"2.0","result":[{"range":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":9,"character":22},"end":{"line":9,"character":22}},"context":{"diagnostics":[]}},"id":85,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":85,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":33,"character":0}},"id":86,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":86,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":22}},"id":87,"jsonrpc":"2.0"}
<<<
Content-Length: 221

{"id":87,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":43},"start":{"character":8,"line":43}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":29,"character":22}},"id":88,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"id":88,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `OUTPUT`  \n\n---\n```cpp\n#define OUTPUT 0x1\n```"},"range":{"end":{"character":26,"line":29},"start":{"character":20,"line":29}}}}
>>>
Content-Length: 8302

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n\n#include \u003cavr/pgmspace.h\u003e\n#include \u003cavr/io.h\u003e\n#include \u003cavr/interrupt.h\u003e\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)\u003c(b)?(a):(b))\n#define max(a,b) ((a)\u003e(b)?(a):(b))\n#define abs(x) ((x)\u003e0?(x):-(x))\n#define constrain(amt,low,high) ((amt)\u003c(low)?(low):((amt)\u003e(high)?(high):(amt)))\n#define round(x)     ((x)\u003e=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) \u0026 0xff))\n#define highByte(w) ((uint8_t) ((w) \u003e\u003e 8))\n\n#define bitRead(value, bit) (((value) \u003e\u003e (bit)) \u0026 0x01)\n#define bitSet(value, bit) ((value) |= (1UL \u003c\u003c (bit)))\n#define bitClear(value, bit) ((value) \u0026= ~(1UL \u003c\u003c (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL \u003c\u003c (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL \u003c\u003c (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) \u0026\u0026 defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}},"jsonrpc":"2.0"}Content-Length: 184

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":22},"end":{"line":32,"character":22}},"context":{"diagnostics":[]}},"id":89,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":89,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":115},"contentChanges":[{"range":{"start":{"line":32,"character":22},"end":{"line":32,"character":22}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":115}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":32,"character":23},"end":{"line":32,"character":23}},"context":{"diagnostics":[]}},"id":90,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":90,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":26}},"id":91,"jsonrpc":"2.0"}
<<<
Content-Length: 310

{"id":91,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":27,"line":45},"start":{"character":26,"line":45}}}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":29},"end":{"line":46,"character":29}},"context":{"diagnostics":[]}},"id":92,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":92,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 343

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":116},"contentChanges":[{"range":{"start":{"line":46,"character":29},"end":{"line":46,"character":29}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":116}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":28}},"id":93,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":93,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":117},"contentChanges":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":4}},"rangeLength":4,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":117}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":22}},"id":94,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":94,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":21}},"id":95,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":95,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":20}},"id":96,"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"id":96,"jsonrpc":"2.0","result":[{"range":{"end":{"character":21,"line":232},"start":{"character":15,"line":232}},"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}]}
>>>
Content-Length: 11726

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp","languageId":"cpp","version":1,"text":"/*\n Servo.cpp - Interrupt driven Servo library for Arduino using 16 bit timers- Version 2\n Copyright (c) 2009 Michael Margolis.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n#if defined(ARDUINO_ARCH_AVR)\n\n#include \u003cavr/interrupt.h\u003e\n#include \u003cArduino.h\u003e\n\n#include \"Servo.h\"\n\n#define usToTicks(_us)    (( clockCyclesPerMicrosecond()* _us) / 8)     // converts microseconds to tick (assumes prescale of 8)  // 12 Aug 2009\n#define ticksToUs(_ticks) (( (unsigned)_ticks * 8)/ clockCyclesPerMicrosecond() ) // converts from ticks back to microseconds\n\n\n#define TRIM_DURATION       2                               // compensation ticks to trim adjust for digitalWrite delays // 12 August 2009\n\n//#define NBR_TIMERS        (MAX_SERVOS / SERVOS_PER_TIMER)\n\nstatic servo_t servos[MAX_SERVOS];                          // static array of servo structures\nstatic volatile int8_t Channel[_Nbr_16timers ];             // counter for the servo being pulsed for each timer (or -1 if refresh interval)\n\nuint8_t ServoCount = 0;                                     // the total number of attached servos\n\n\n// convenience macros\n#define SERVO_INDEX_TO_TIMER(_servo_nbr) ((timer16_Sequence_t)(_servo_nbr / SERVOS_PER_TIMER)) // returns the timer controlling this servo\n#define SERVO_INDEX_TO_CHANNEL(_servo_nbr) (_servo_nbr % SERVOS_PER_TIMER)       // returns the index of the servo on this timer\n#define SERVO_INDEX(_timer,_channel)  ((_timer*SERVOS_PER_TIMER) + _channel)     // macro to access servo index by timer and channel\n#define SERVO(_timer,_channel)  (servos[SERVO_INDEX(_timer,_channel)])            // macro to access servo class by timer and channel\n\n#define SERVO_MIN() (MIN_PULSE_WIDTH - this-\u003emin * 4)  // minimum value in uS for this servo\n#define SERVO_MAX() (MAX_PULSE_WIDTH - this-\u003emax * 4)  // maximum value in uS for this servo\n\n/************ static functions common to all instances ***********************/\n\nstatic inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)\n{\n  if( Channel[timer] \u003c 0 )\n    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer\n  else{\n    if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 SERVO(timer,Channel[timer]).Pin.isActive == true )\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated\n  }\n\n  Channel[timer]++;    // increment to the next channel\n  if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 Channel[timer] \u003c SERVOS_PER_TIMER) {\n    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;\n    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high\n  }\n  else {\n    // finished all channels so wait for the refresh period to expire before starting over\n    if( ((unsigned)*TCNTn) + 4 \u003c usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed\n      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);\n    else\n      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed\n    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel\n  }\n}\n\n#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform\n// Interrupt handlers for Arduino\n#if defined(_useTimer1)\nSIGNAL (TIMER1_COMPA_vect)\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n\n#if defined(_useTimer3)\nSIGNAL (TIMER3_COMPA_vect)\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n\n#if defined(_useTimer4)\nSIGNAL (TIMER4_COMPA_vect)\n{\n  handle_interrupts(_timer4, \u0026TCNT4, \u0026OCR4A);\n}\n#endif\n\n#if defined(_useTimer5)\nSIGNAL (TIMER5_COMPA_vect)\n{\n  handle_interrupts(_timer5, \u0026TCNT5, \u0026OCR5A);\n}\n#endif\n\n#elif defined WIRING\n// Interrupt handlers for Wiring\n#if defined(_useTimer1)\nvoid Timer1Service()\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n#if defined(_useTimer3)\nvoid Timer3Service()\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n#endif\n\n\nstatic void initISR(timer16_Sequence_t timer)\n{\n#if defined (_useTimer1)\n  if(timer == _timer1) {\n    TCCR1A = 0;             // normal counting mode\n    TCCR1B = _BV(CS11);     // set prescaler of 8\n    TCNT1 = 0;              // clear the timer count\n#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF1A);      // clear any pending interrupts;\n    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt\n#else\n    // here if not ATmega8 or ATmega128\n    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts;\n    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER1OUTCOMPAREA_INT, Timer1Service);\n#endif\n  }\n#endif\n\n#if defined (_useTimer3)\n  if(timer == _timer3) {\n    TCCR3A = 0;             // normal counting mode\n    TCCR3B = _BV(CS31);     // set prescaler of 8\n    TCNT3 = 0;              // clear the timer count\n#if defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF3A);     // clear any pending interrupts;\n\tETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt\n#else\n    TIFR3 = _BV(OCF3A);     // clear any pending interrupts;\n    TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER3OUTCOMPAREA_INT, Timer3Service);  // for Wiring platform only\n#endif\n  }\n#endif\n\n#if defined (_useTimer4)\n  if(timer == _timer4) {\n    TCCR4A = 0;             // normal counting mode\n    TCCR4B = _BV(CS41);     // set prescaler of 8\n    TCNT4 = 0;              // clear the timer count\n    TIFR4 = _BV(OCF4A);     // clear any pending interrupts;\n    TIMSK4 =  _BV(OCIE4A) ; // enable the output compare interrupt\n  }\n#endif\n\n#if defined (_useTimer5)\n  if(timer == _timer5) {\n    TCCR5A = 0;             // normal counting mode\n    TCCR5B = _BV(CS51);     // set prescaler of 8\n    TCNT5 = 0;              // clear the timer count\n    TIFR5 = _BV(OCF5A);     // clear any pending interrupts;\n    TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt\n  }\n#endif\n}\n\nstatic void finISR(timer16_Sequence_t timer)\n{\n    //disable use of the given timer\n#if defined WIRING   // Wiring\n  if(timer == _timer1) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK1 \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #else\n    TIMSK \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #endif\n    timerDetach(TIMER1OUTCOMPAREA_INT);\n  }\n  else if(timer == _timer3) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK3 \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #else\n    ETIMSK \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #endif\n    timerDetach(TIMER3OUTCOMPAREA_INT);\n  }\n#else\n  //For arduino - in future: call here to a currently undefined function to reset the timer\n  (void) timer;  // squash \"unused parameter 'timer' [-Wunused-parameter]\" warning\n#endif\n}\n\nstatic boolean isTimerActive(timer16_Sequence_t timer)\n{\n  // returns true if any servo is active on this timer\n  for(uint8_t channel=0; channel \u003c SERVOS_PER_TIMER; channel++) {\n    if(SERVO(timer,channel).Pin.isActive == true)\n      return true;\n  }\n  return false;\n}\n\n\n/****************** end of static functions ******************************/\n\nServo::Servo()\n{\n  if( ServoCount \u003c MAX_SERVOS) {\n    this-\u003eservoIndex = ServoCount++;                    // assign a servo index to this instance\n\tservos[this-\u003eservoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009\n  }\n  else\n    this-\u003eservoIndex = INVALID_SERVO ;  // too many servos\n}\n\nuint8_t Servo::attach(int pin)\n{\n  return this-\u003eattach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);\n}\n\nuint8_t Servo::attach(int pin, int min, int max)\n{\n  if(this-\u003eservoIndex \u003c MAX_SERVOS ) {\n    pinMode( pin, OUTPUT) ;                                   // set servo pin to output\n    servos[this-\u003eservoIndex].Pin.nbr = pin;\n    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 \u003c 128\n    this-\u003emin  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS\n    this-\u003emax  = (MAX_PULSE_WIDTH - max)/4;\n    // initialize the timer if it has not already been initialized\n    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n    if(isTimerActive(timer) == false)\n      initISR(timer);\n    servos[this-\u003eservoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive\n  }\n  return this-\u003eservoIndex ;\n}\n\nvoid Servo::detach()\n{\n  servos[this-\u003eservoIndex].Pin.isActive = false;\n  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n  if(isTimerActive(timer) == false) {\n    finISR(timer);\n  }\n}\n\nvoid Servo::write(int value)\n{\n  if(value \u003c MIN_PULSE_WIDTH)\n  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)\n    if(value \u003c 0) value = 0;\n    if(value \u003e 180) value = 180;\n    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());\n  }\n  this-\u003ewriteMicroseconds(value);\n}\n\nvoid Servo::writeMicroseconds(int value)\n{\n  // calculate and store the values for the given channel\n  byte channel = this-\u003eservoIndex;\n  if( (channel \u003c MAX_SERVOS) )   // ensure channel is valid\n  {\n    if( value \u003c SERVO_MIN() )          // ensure pulse width is valid\n      value = SERVO_MIN();\n    else if( value \u003e SERVO_MAX() )\n      value = SERVO_MAX();\n\n    value = value - TRIM_DURATION;\n    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009\n\n    uint8_t oldSREG = SREG;\n    cli();\n    servos[channel].ticks = value;\n    SREG = oldSREG;\n  }\n}\n\nint Servo::read() // return the value as degrees\n{\n  return  map( this-\u003ereadMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);\n}\n\nint Servo::readMicroseconds()\n{\n  unsigned int pulsewidth;\n  if( this-\u003eservoIndex != INVALID_SERVO )\n    pulsewidth = ticksToUs(servos[this-\u003eservoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009\n  else\n    pulsewidth  = 0;\n\n  return pulsewidth;\n}\n\nbool Servo::attached()\n{\n  return servos[this-\u003eservoIndex].Pin.isActive ;\n}\n\n#endif // ARDUINO_ARCH_AVR\n\n"}},"jsonrpc":"2.0"}Content-Length: 167

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 177

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":35,"character":13},"end":{"line":35,"character":13}},"context":{"diagnostics":[]}},"id":97,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":97,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":118},"contentChanges":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":0}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":118}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":119},"contentChanges":[{"range":{"start":{"line":47,"character":2},"end":{"line":47,"character":2}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":119}}
>>>
Content-Length: 361

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":120},"contentChanges":[{"range":{"start":{"line":47,"character":0},"end":{"line":48,"character":0}},"rangeLength":5,"text":"        \n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":120}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":121},"contentChanges":[{"range":{"start":{"line":48,"character":0},"end":{"line":48,"character":0}},"text":"m"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'm'","range":{"end":{"character":1,"line":48},"start":{"character":0,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":121}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":122},"contentChanges":[{"range":{"start":{"line":48,"character":1},"end":{"line":48,"character":1}},"text":"y"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'my'","range":{"end":{"character":2,"line":48},"start":{"character":0,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":122}}
>>>
Content-Length: 509

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":2},"end":{"line":48,"character":2}},"context":{"diagnostics":[{"range":{"start":{"line":48,"character":0},"end":{"line":48,"character":2}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'my'"}]}},"id":98,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":98,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":99,"jsonrpc":"2.0"}
<<<
Content-Length: 2514

{"id":99,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":59},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":74},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":17,"line":62},"start":{"character":6,"line":62}}}]}
>>>
Content-Length: 455

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":124},"contentChanges":[{"range":{"start":{"line":48,"character":1},"end":{"line":48,"character":2}},"rangeLength":1,"text":""},{"range":{"start":{"line":48,"character":0},"end":{"line":48,"character":1}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":124}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":125},"contentChanges":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":0}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":125}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":126},"contentChanges":[{"range":{"start":{"line":47,"character":2},"end":{"line":47,"character":2}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":126}}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":127},"contentChanges":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":12}},"rangeLength":12,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":127}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":128},"contentChanges":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":0}},"text":"m"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'm'","range":{"end":{"character":1,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":128}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":129},"contentChanges":[{"range":{"start":{"line":47,"character":1},"end":{"line":47,"character":1}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'mi'","range":{"end":{"character":2,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":129}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":130},"contentChanges":[{"range":{"start":{"line":47,"character":2},"end":{"line":47,"character":2}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'mic'","range":{"end":{"character":3,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":130}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":131},"contentChanges":[{"range":{"start":{"line":47,"character":3},"end":{"line":47,"character":3}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'micr'","range":{"end":{"character":4,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":131}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":132},"contentChanges":[{"range":{"start":{"line":47,"character":4},"end":{"line":47,"character":4}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 801

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'micro'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":5,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":132}}
>>>
Content-Length: 693

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":5},"end":{"line":47,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":5}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'micro'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here"}]}},"id":100,"jsonrpc":"2.0"}
<<<
Content-Length: 743

{"id":100,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'micro'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":5,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"micros","range":{"end":{"character":5,"line":47},"start":{"character":0,"line":47}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'micro' to 'micros'"}]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":133},"contentChanges":[{"range":{"start":{"line":47,"character":5},"end":{"line":47,"character":5}},"text":"S"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 802

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microS'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":6,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":133}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":134},"contentChanges":[{"range":{"start":{"line":47,"character":6},"end":{"line":47,"character":6}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 803

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSe'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":7,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":134}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":135},"contentChanges":[{"range":{"start":{"line":47,"character":7},"end":{"line":47,"character":7}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 979

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSer'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":8,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:48:1: error: use of undeclared identifier 'microSer'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":135}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":136},"contentChanges":[{"range":{"start":{"line":47,"character":8},"end":{"line":47,"character":8}},"text":"v"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 981

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":9,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:48:1: error: use of undeclared identifier 'microServ'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":136}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":137},"contentChanges":[{"range":{"start":{"line":47,"character":9},"end":{"line":47,"character":9}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 984

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServi'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":10,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:48:1: error: use of undeclared identifier 'microServi'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":137}}
>>>
Content-Length: 638

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":10},"end":{"line":47,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":10}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'microServi'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here"}]}},"id":101,"jsonrpc":"2.0"}
<<<
Content-Length: 700

{"id":101,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServi'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":10,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"microServo","range":{"end":{"character":10,"line":47},"start":{"character":0,"line":47}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'microServi' to 'microServo'"}]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":138},"contentChanges":[{"range":{"start":{"line":47,"character":9},"end":{"line":47,"character":10}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 981

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":9,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:48:1: error: use of undeclared identifier 'microServ'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":138}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":139},"contentChanges":[{"range":{"start":{"line":47,"character":9},"end":{"line":47,"character":9}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":139}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":10},"end":{"line":47,"character":10}},"context":{"diagnostics":[]}},"id":102,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":102,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":103,"jsonrpc":"2.0"}
<<<
Content-Length: 2515

{"id":103,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":59},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":74},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":17,"line":62},"start":{"character":6,"line":62}}}]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":140},"contentChanges":[{"range":{"start":{"line":47,"character":9},"end":{"line":47,"character":10}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 981

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":9,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:48:1: error: use of undeclared identifier 'microServ'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":140}}
>>>
Content-Length: 634

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":9},"end":{"line":47,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":9}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here"}]}},"id":104,"jsonrpc":"2.0"}
<<<
Content-Length: 696

{"id":104,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":9,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"microServo","range":{"end":{"character":9,"line":47},"start":{"character":0,"line":47}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'microServ' to 'microServo'"}]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":141},"contentChanges":[{"range":{"start":{"line":47,"character":9},"end":{"line":47,"character":9}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 984

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServi'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":10,"line":47},"start":{"character":0,"line":47}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:48:1: error: use of undeclared identifier 'microServi'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":141}}
>>>
Content-Length: 1288

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":151},"contentChanges":[{"range":{"start":{"line":47,"character":9},"end":{"line":47,"character":10}},"rangeLength":1,"text":""},{"range":{"start":{"line":47,"character":8},"end":{"line":47,"character":9}},"rangeLength":1,"text":""},{"range":{"start":{"line":47,"character":7},"end":{"line":47,"character":8}},"rangeLength":1,"text":""},{"range":{"start":{"line":47,"character":6},"end":{"line":47,"character":7}},"rangeLength":1,"text":""},{"range":{"start":{"line":47,"character":5},"end":{"line":47,"character":6}},"rangeLength":1,"text":""},{"range":{"start":{"line":47,"character":4},"end":{"line":47,"character":5}},"rangeLength":1,"text":""},{"range":{"start":{"line":47,"character":3},"end":{"line":47,"character":4}},"rangeLength":1,"text":""},{"range":{"start":{"line":47,"character":2},"end":{"line":47,"character":3}},"rangeLength":1,"text":""},{"range":{"start":{"line":47,"character":1},"end":{"line":47,"character":2}},"rangeLength":1,"text":""},{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":1}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":151}}
>>>
Content-Length: 347

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":152},"contentChanges":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":0}},"text":"            "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":152}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":12}},"context":{"diagnostics":[]}},"id":105,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":105,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":106,"jsonrpc":"2.0"}
<<<
Content-Length: 2515

{"id":106,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":59},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":74},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":17,"line":62},"start":{"character":6,"line":62}}}]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":2}},"id":107,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":107,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":3}},"id":108,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":108,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":8}},"id":109,"jsonrpc":"2.0"}
<<<
Content-Length: 310

{"id":109,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":12}},"id":110,"jsonrpc":"2.0"}
<<<
Content-Length: 310

{"id":110,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":153},"contentChanges":[{"range":{"start":{"line":47,"character":4},"end":{"line":47,"character":4}},"text":"m"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'm'","range":{"end":{"character":5,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":153}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":154},"contentChanges":[{"range":{"start":{"line":47,"character":5},"end":{"line":47,"character":5}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'mi'","range":{"end":{"character":6,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":154}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":155},"contentChanges":[{"range":{"start":{"line":47,"character":6},"end":{"line":47,"character":6}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'mic'","range":{"end":{"character":7,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":155}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":156},"contentChanges":[{"range":{"start":{"line":47,"character":7},"end":{"line":47,"character":7}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'micr'","range":{"end":{"character":8,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":156}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":157},"contentChanges":[{"range":{"start":{"line":47,"character":8},"end":{"line":47,"character":8}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 801

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'micro'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":9,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":157}}
>>>
Content-Length: 693

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":9},"end":{"line":47,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":47,"character":4},"end":{"line":47,"character":9}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'micro'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here"}]}},"id":111,"jsonrpc":"2.0"}
<<<
Content-Length: 743

{"id":111,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'micro'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":9,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"micros","range":{"end":{"character":9,"line":47},"start":{"character":4,"line":47}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'micro' to 'micros'"}]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":158},"contentChanges":[{"range":{"start":{"line":47,"character":9},"end":{"line":47,"character":9}},"text":"S"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 803

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microS'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":10,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":158}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":159},"contentChanges":[{"range":{"start":{"line":47,"character":10},"end":{"line":47,"character":10}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 804

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSe'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":11,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":159}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":160},"contentChanges":[{"range":{"start":{"line":47,"character":11},"end":{"line":47,"character":11}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 980

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSer'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":12,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:48:5: error: use of undeclared identifier 'microSer'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":160}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":161},"contentChanges":[{"range":{"start":{"line":47,"character":12},"end":{"line":47,"character":12}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 982

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSero'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":13,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:48:5: error: use of undeclared identifier 'microSero'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":161}}
>>>
Content-Length: 637

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":13},"end":{"line":47,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":47,"character":4},"end":{"line":47,"character":13}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'microSero'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here"}]}},"id":112,"jsonrpc":"2.0"}
<<<
Content-Length: 698

{"id":112,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSero'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":13,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"microServo","range":{"end":{"character":13,"line":47},"start":{"character":4,"line":47}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'microSero' to 'microServo'"}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":162},"contentChanges":[{"range":{"start":{"line":47,"character":13},"end":{"line":47,"character":13}},"text":"v"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 984

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSerov'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":14,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:48:5: error: use of undeclared identifier 'microSerov'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":162}}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":163},"contentChanges":[{"range":{"start":{"line":47,"character":13},"end":{"line":47,"character":14}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 982

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSero'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":13,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:48:5: error: use of undeclared identifier 'microSero'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":163}}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":164},"contentChanges":[{"range":{"start":{"line":47,"character":12},"end":{"line":47,"character":13}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":165},"contentChanges":[{"range":{"start":{"line":47,"character":12},"end":{"line":47,"character":12}},"text":"v"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 980

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSer'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":12,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:48:5: error: use of undeclared identifier 'microSer'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":164}}Content-Length: 982

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":13,"line":47},"start":{"character":4,"line":47}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:48:5: error: use of undeclared identifier 'microServ'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":165}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":166},"contentChanges":[{"range":{"start":{"line":47,"character":13},"end":{"line":47,"character":13}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":166}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":167},"contentChanges":[{"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":14}},"text":"."}]},"jsonrpc":"2.0"}Content-Length: 313

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":15},"context":{"triggerKind":2,"triggerCharacter":"."}},"id":113,"jsonrpc":"2.0"}
<<<
Content-Length: 2223

{"id":113,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"int","filterText":"readMicroseconds","insertText":"readMicroseconds()","insertTextFormat":2,"kind":2,"label":" readMicroseconds()","score":14.520001411437988,"sortText":"3e97ae13readMicroseconds","textEdit":{"newText":"readMicroseconds()","range":{"end":{"character":15,"line":47},"start":{"character":15,"line":47}}}},{"detail":"void","filterText":"write","insertText":"write(${1:int value})","insertTextFormat":2,"kind":2,"label":" write(int value)","score":14.520001411437988,"sortText":"3e97ae13write","textEdit":{"newText":"write(${1:int value})","range":{"end":{"character":15,"line":47},"start":{"character":15,"line":47}}}},{"detail":"void","filterText":"writeMicroseconds","insertText":"writeMicroseconds(${1:int value})","insertTextFormat":2,"kind":2,"label":" writeMicroseconds(int value)","score":14.520001411437988,"sortText":"3e97ae13writeMicroseconds","textEdit":{"newText":"writeMicroseconds(${1:int value})","range":{"end":{"character":15,"line":47},"start":{"character":15,"line":47}}}},{"detail":"[2 overloads]","filterText":"attach","insertText":"attach($0)","insertTextFormat":2,"kind":2,"label":" attach(…)","score":9.6800003051757812,"sortText":"3ee51eb8attach","textEdit":{"newText":"attach($0)","range":{"end":{"character":15,"line":47},"start":{"character":15,"line":47}}}},{"detail":"bool","filterText":"attached","insertText":"attached()","insertTextFormat":2,"kind":2,"label":" attached()","score":9.6800003051757812,"sortText":"3ee51eb8attached","textEdit":{"newText":"attached()","range":{"end":{"character":15,"line":47},"start":{"character":15,"line":47}}}},{"detail":"void","filterText":"detach","insertText":"detach()","insertTextFormat":2,"kind":2,"label":" detach()","score":9.6800003051757812,"sortText":"3ee51eb8detach","textEdit":{"newText":"detach()","range":{"end":{"character":15,"line":47},"start":{"character":15,"line":47}}}},{"detail":"int","filterText":"read","insertText":"read()","insertTextFormat":2,"kind":2,"label":" read()","score":9.6800003051757812,"sortText":"3ee51eb8read","textEdit":{"newText":"read()","range":{"end":{"character":15,"line":47},"start":{"character":15,"line":47}}}}]}}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":114,"jsonrpc":"2.0"}
<<<
Content-Length: 2515

{"id":114,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":59},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":74},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":17,"line":62},"start":{"character":6,"line":62}}}]}Content-Length: 413

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":167}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":15},"end":{"line":47,"character":15}},"context":{"diagnostics":[]}},"id":115,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":115,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":168},"contentChanges":[{"range":{"start":{"line":47,"character":15},"end":{"line":47,"character":15}},"text":"write(int value)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 452

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":30,"line":47},"start":{"character":25,"line":47}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":168}}
>>>
Content-Length: 546

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":21},"end":{"line":47,"character":30}},"context":{"diagnostics":[{"range":{"start":{"line":47,"character":25},"end":{"line":47,"character":30}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"}]}},"id":116,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":116,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":169},"contentChanges":[{"range":{"start":{"line":47,"character":21},"end":{"line":47,"character":30}},"rangeLength":9,"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":169}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":22},"end":{"line":47,"character":22}},"context":{"diagnostics":[]}},"id":117,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":117,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":170},"contentChanges":[{"range":{"start":{"line":47,"character":21},"end":{"line":47,"character":22}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 784

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"typecheck_call_too_few_args_one","message":"Too few arguments to function call, single argument 'value' was not specified\n\n/Applications/Arduino.app/Contents/Java/libraries/Servo/src/Servo.h:111:8:\nnote: 'write' declared here","range":{"end":{"character":22,"line":47},"start":{"character":21,"line":47}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":170}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":171},"contentChanges":[{"range":{"start":{"line":47,"character":21},"end":{"line":47,"character":21}},"text":"4"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":171}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":172},"contentChanges":[{"range":{"start":{"line":47,"character":22},"end":{"line":47,"character":22}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":48},"start":{"character":2,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":172}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":23},"end":{"line":47,"character":23}},"context":{"diagnostics":[]}},"id":118,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":118,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":13}},"id":119,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":119,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":19}},"id":120,"jsonrpc":"2.0"}
<<<
Content-Length: 208

{"id":120,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":263},"start":{"character":12,"line":263}},"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}]}
>>>
Content-Length: 11726

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp","languageId":"cpp","version":1,"text":"/*\n Servo.cpp - Interrupt driven Servo library for Arduino using 16 bit timers- Version 2\n Copyright (c) 2009 Michael Margolis.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n#if defined(ARDUINO_ARCH_AVR)\n\n#include \u003cavr/interrupt.h\u003e\n#include \u003cArduino.h\u003e\n\n#include \"Servo.h\"\n\n#define usToTicks(_us)    (( clockCyclesPerMicrosecond()* _us) / 8)     // converts microseconds to tick (assumes prescale of 8)  // 12 Aug 2009\n#define ticksToUs(_ticks) (( (unsigned)_ticks * 8)/ clockCyclesPerMicrosecond() ) // converts from ticks back to microseconds\n\n\n#define TRIM_DURATION       2                               // compensation ticks to trim adjust for digitalWrite delays // 12 August 2009\n\n//#define NBR_TIMERS        (MAX_SERVOS / SERVOS_PER_TIMER)\n\nstatic servo_t servos[MAX_SERVOS];                          // static array of servo structures\nstatic volatile int8_t Channel[_Nbr_16timers ];             // counter for the servo being pulsed for each timer (or -1 if refresh interval)\n\nuint8_t ServoCount = 0;                                     // the total number of attached servos\n\n\n// convenience macros\n#define SERVO_INDEX_TO_TIMER(_servo_nbr) ((timer16_Sequence_t)(_servo_nbr / SERVOS_PER_TIMER)) // returns the timer controlling this servo\n#define SERVO_INDEX_TO_CHANNEL(_servo_nbr) (_servo_nbr % SERVOS_PER_TIMER)       // returns the index of the servo on this timer\n#define SERVO_INDEX(_timer,_channel)  ((_timer*SERVOS_PER_TIMER) + _channel)     // macro to access servo index by timer and channel\n#define SERVO(_timer,_channel)  (servos[SERVO_INDEX(_timer,_channel)])            // macro to access servo class by timer and channel\n\n#define SERVO_MIN() (MIN_PULSE_WIDTH - this-\u003emin * 4)  // minimum value in uS for this servo\n#define SERVO_MAX() (MAX_PULSE_WIDTH - this-\u003emax * 4)  // maximum value in uS for this servo\n\n/************ static functions common to all instances ***********************/\n\nstatic inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)\n{\n  if( Channel[timer] \u003c 0 )\n    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer\n  else{\n    if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 SERVO(timer,Channel[timer]).Pin.isActive == true )\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated\n  }\n\n  Channel[timer]++;    // increment to the next channel\n  if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 Channel[timer] \u003c SERVOS_PER_TIMER) {\n    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;\n    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high\n  }\n  else {\n    // finished all channels so wait for the refresh period to expire before starting over\n    if( ((unsigned)*TCNTn) + 4 \u003c usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed\n      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);\n    else\n      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed\n    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel\n  }\n}\n\n#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform\n// Interrupt handlers for Arduino\n#if defined(_useTimer1)\nSIGNAL (TIMER1_COMPA_vect)\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n\n#if defined(_useTimer3)\nSIGNAL (TIMER3_COMPA_vect)\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n\n#if defined(_useTimer4)\nSIGNAL (TIMER4_COMPA_vect)\n{\n  handle_interrupts(_timer4, \u0026TCNT4, \u0026OCR4A);\n}\n#endif\n\n#if defined(_useTimer5)\nSIGNAL (TIMER5_COMPA_vect)\n{\n  handle_interrupts(_timer5, \u0026TCNT5, \u0026OCR5A);\n}\n#endif\n\n#elif defined WIRING\n// Interrupt handlers for Wiring\n#if defined(_useTimer1)\nvoid Timer1Service()\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n#if defined(_useTimer3)\nvoid Timer3Service()\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n#endif\n\n\nstatic void initISR(timer16_Sequence_t timer)\n{\n#if defined (_useTimer1)\n  if(timer == _timer1) {\n    TCCR1A = 0;             // normal counting mode\n    TCCR1B = _BV(CS11);     // set prescaler of 8\n    TCNT1 = 0;              // clear the timer count\n#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF1A);      // clear any pending interrupts;\n    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt\n#else\n    // here if not ATmega8 or ATmega128\n    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts;\n    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER1OUTCOMPAREA_INT, Timer1Service);\n#endif\n  }\n#endif\n\n#if defined (_useTimer3)\n  if(timer == _timer3) {\n    TCCR3A = 0;             // normal counting mode\n    TCCR3B = _BV(CS31);     // set prescaler of 8\n    TCNT3 = 0;              // clear the timer count\n#if defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF3A);     // clear any pending interrupts;\n\tETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt\n#else\n    TIFR3 = _BV(OCF3A);     // clear any pending interrupts;\n    TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER3OUTCOMPAREA_INT, Timer3Service);  // for Wiring platform only\n#endif\n  }\n#endif\n\n#if defined (_useTimer4)\n  if(timer == _timer4) {\n    TCCR4A = 0;             // normal counting mode\n    TCCR4B = _BV(CS41);     // set prescaler of 8\n    TCNT4 = 0;              // clear the timer count\n    TIFR4 = _BV(OCF4A);     // clear any pending interrupts;\n    TIMSK4 =  _BV(OCIE4A) ; // enable the output compare interrupt\n  }\n#endif\n\n#if defined (_useTimer5)\n  if(timer == _timer5) {\n    TCCR5A = 0;             // normal counting mode\n    TCCR5B = _BV(CS51);     // set prescaler of 8\n    TCNT5 = 0;              // clear the timer count\n    TIFR5 = _BV(OCF5A);     // clear any pending interrupts;\n    TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt\n  }\n#endif\n}\n\nstatic void finISR(timer16_Sequence_t timer)\n{\n    //disable use of the given timer\n#if defined WIRING   // Wiring\n  if(timer == _timer1) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK1 \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #else\n    TIMSK \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #endif\n    timerDetach(TIMER1OUTCOMPAREA_INT);\n  }\n  else if(timer == _timer3) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK3 \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #else\n    ETIMSK \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #endif\n    timerDetach(TIMER3OUTCOMPAREA_INT);\n  }\n#else\n  //For arduino - in future: call here to a currently undefined function to reset the timer\n  (void) timer;  // squash \"unused parameter 'timer' [-Wunused-parameter]\" warning\n#endif\n}\n\nstatic boolean isTimerActive(timer16_Sequence_t timer)\n{\n  // returns true if any servo is active on this timer\n  for(uint8_t channel=0; channel \u003c SERVOS_PER_TIMER; channel++) {\n    if(SERVO(timer,channel).Pin.isActive == true)\n      return true;\n  }\n  return false;\n}\n\n\n/****************** end of static functions ******************************/\n\nServo::Servo()\n{\n  if( ServoCount \u003c MAX_SERVOS) {\n    this-\u003eservoIndex = ServoCount++;                    // assign a servo index to this instance\n\tservos[this-\u003eservoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009\n  }\n  else\n    this-\u003eservoIndex = INVALID_SERVO ;  // too many servos\n}\n\nuint8_t Servo::attach(int pin)\n{\n  return this-\u003eattach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);\n}\n\nuint8_t Servo::attach(int pin, int min, int max)\n{\n  if(this-\u003eservoIndex \u003c MAX_SERVOS ) {\n    pinMode( pin, OUTPUT) ;                                   // set servo pin to output\n    servos[this-\u003eservoIndex].Pin.nbr = pin;\n    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 \u003c 128\n    this-\u003emin  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS\n    this-\u003emax  = (MAX_PULSE_WIDTH - max)/4;\n    // initialize the timer if it has not already been initialized\n    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n    if(isTimerActive(timer) == false)\n      initISR(timer);\n    servos[this-\u003eservoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive\n  }\n  return this-\u003eservoIndex ;\n}\n\nvoid Servo::detach()\n{\n  servos[this-\u003eservoIndex].Pin.isActive = false;\n  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n  if(isTimerActive(timer) == false) {\n    finISR(timer);\n  }\n}\n\nvoid Servo::write(int value)\n{\n  if(value \u003c MIN_PULSE_WIDTH)\n  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)\n    if(value \u003c 0) value = 0;\n    if(value \u003e 180) value = 180;\n    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());\n  }\n  this-\u003ewriteMicroseconds(value);\n}\n\nvoid Servo::writeMicroseconds(int value)\n{\n  // calculate and store the values for the given channel\n  byte channel = this-\u003eservoIndex;\n  if( (channel \u003c MAX_SERVOS) )   // ensure channel is valid\n  {\n    if( value \u003c SERVO_MIN() )          // ensure pulse width is valid\n      value = SERVO_MIN();\n    else if( value \u003e SERVO_MAX() )\n      value = SERVO_MAX();\n\n    value = value - TRIM_DURATION;\n    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009\n\n    uint8_t oldSREG = SREG;\n    cli();\n    servos[channel].ticks = value;\n    SREG = oldSREG;\n  }\n}\n\nint Servo::read() // return the value as degrees\n{\n  return  map( this-\u003ereadMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);\n}\n\nint Servo::readMicroseconds()\n{\n  unsigned int pulsewidth;\n  if( this-\u003eservoIndex != INVALID_SERVO )\n    pulsewidth = ticksToUs(servos[this-\u003eservoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009\n  else\n    pulsewidth  = 0;\n\n  return pulsewidth;\n}\n\nbool Servo::attached()\n{\n  return servos[this-\u003eservoIndex].Pin.isActive ;\n}\n\n#endif // ARDUINO_ARCH_AVR\n\n"}},"jsonrpc":"2.0"}Content-Length: 167

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 177

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":29},"end":{"line":46,"character":29}},"context":{"diagnostics":[]}},"id":121,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":121,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":31}},"id":122,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":122,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":24},"end":{"line":47,"character":24}},"context":{"diagnostics":[]}},"id":123,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":123,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":173},"contentChanges":[{"range":{"start":{"line":47,"character":24},"end":{"line":47,"character":24}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":173}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":25},"end":{"line":47,"character":25}},"context":{"diagnostics":[]}},"id":124,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":124,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":51,"character":29},"end":{"line":51,"character":29}},"context":{"diagnostics":[]}},"id":125,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":125,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 343

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":174},"contentChanges":[{"range":{"start":{"line":51,"character":29},"end":{"line":51,"character":29}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":174}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":175},"contentChanges":[{"range":{"start":{"line":52,"character":4},"end":{"line":52,"character":4}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":5,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":175}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":176},"contentChanges":[{"range":{"start":{"line":52,"character":5},"end":{"line":52,"character":5}},"text":"i"}]},"jsonrpc":"2.0"}Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":177},"contentChanges":[{"range":{"start":{"line":52,"character":6},"end":{"line":52,"character":6}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'cir'","range":{"end":{"character":7,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":177}}
>>>
Content-Length: 511

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":7},"end":{"line":52,"character":7}},"context":{"diagnostics":[{"range":{"start":{"line":52,"character":4},"end":{"line":52,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'cir'"}]}},"id":126,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":126,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":127,"jsonrpc":"2.0"}
<<<
Content-Length: 2515

{"id":127,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":60},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":63}},"selectionRange":{"end":{"character":17,"line":63},"start":{"character":6,"line":63}}}]}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":178},"contentChanges":[{"range":{"start":{"line":52,"character":6},"end":{"line":52,"character":7}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ci'","range":{"end":{"character":6,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":178}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":179},"contentChanges":[{"range":{"start":{"line":52,"character":5},"end":{"line":52,"character":6}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":5,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":179}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":180},"contentChanges":[{"range":{"start":{"line":52,"character":4},"end":{"line":52,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":180}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":181},"contentChanges":[{"range":{"start":{"line":52,"character":4},"end":{"line":52,"character":4}},"text":"m"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'm'","range":{"end":{"character":5,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":181}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":182},"contentChanges":[{"range":{"start":{"line":52,"character":5},"end":{"line":52,"character":5}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'mi'","range":{"end":{"character":6,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":182}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":183},"contentChanges":[{"range":{"start":{"line":52,"character":6},"end":{"line":52,"character":6}},"text":"c"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'mic'","range":{"end":{"character":7,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":183}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":184},"contentChanges":[{"range":{"start":{"line":52,"character":7},"end":{"line":52,"character":7}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'micr'","range":{"end":{"character":8,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":184}}
>>>
Content-Length: 512

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":8},"end":{"line":52,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":52,"character":4},"end":{"line":52,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'micr'"}]}},"id":128,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":128,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":129,"jsonrpc":"2.0"}
<<<
Content-Length: 2515

{"id":129,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":60},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":63}},"selectionRange":{"end":{"character":17,"line":63},"start":{"character":6,"line":63}}}]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":185},"contentChanges":[{"range":{"start":{"line":52,"character":8},"end":{"line":52,"character":8}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 801

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'micro'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":9,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":185}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":186},"contentChanges":[{"range":{"start":{"line":52,"character":9},"end":{"line":52,"character":9}},"text":"S"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 803

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microS'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":10,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":186}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":187},"contentChanges":[{"range":{"start":{"line":52,"character":10},"end":{"line":52,"character":10}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 804

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSe'; did you mean 'micros'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:142:15:\nnote: 'micros' declared here","range":{"end":{"character":11,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":187}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":188},"contentChanges":[{"range":{"start":{"line":52,"character":11},"end":{"line":52,"character":11}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 980

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microSer'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":12,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:53:5: error: use of undeclared identifier 'microSer'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":188}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":189},"contentChanges":[{"range":{"start":{"line":52,"character":12},"end":{"line":52,"character":12}},"text":"v"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 982

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":13,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:53:5: error: use of undeclared identifier 'microServ'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":189}}
>>>
Content-Length: 637

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":13},"end":{"line":52,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":52,"character":4},"end":{"line":52,"character":13}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here"}]}},"id":130,"jsonrpc":"2.0"}
<<<
Content-Length: 698

{"id":130,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":13,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"microServo","range":{"end":{"character":13,"line":52},"start":{"character":4,"line":52}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'microServ' to 'microServo'"}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":190},"contentChanges":[{"range":{"start":{"line":52,"character":13},"end":{"line":52,"character":13}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 984

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServi'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":14,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:53:5: error: use of undeclared identifier 'microServi'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":190}}
>>>
Content-Length: 638

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":14},"end":{"line":52,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":52,"character":4},"end":{"line":52,"character":14}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'microServi'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here"}]}},"id":131,"jsonrpc":"2.0"}
<<<
Content-Length: 700

{"id":131,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServi'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":14,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"microServo","range":{"end":{"character":14,"line":52},"start":{"character":4,"line":52}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'microServi' to 'microServo'"}]}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":191},"contentChanges":[{"range":{"start":{"line":52,"character":13},"end":{"line":52,"character":14}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 982

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'microServ'; did you mean 'microServo'? (fix available)\n\nDistanceSensor.ino.cpp:13:7: note: 'microServo' declared here","range":{"end":{"character":13,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"},{"message":"'microServo' declared here\n\nDistanceSensor.ino.cpp:53:5: error: use of undeclared identifier 'microServ'; did you mean 'microServo'?","range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"severity":3},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":191}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":192},"contentChanges":[{"range":{"start":{"line":52,"character":13},"end":{"line":52,"character":13}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":192}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":193},"contentChanges":[{"range":{"start":{"line":52,"character":14},"end":{"line":52,"character":14}},"text":"."}]},"jsonrpc":"2.0"}Content-Length: 313

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":52,"character":15},"context":{"triggerKind":2,"triggerCharacter":"."}},"id":132,"jsonrpc":"2.0"}
<<<
Content-Length: 2223

{"id":132,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"int","filterText":"readMicroseconds","insertText":"readMicroseconds()","insertTextFormat":2,"kind":2,"label":" readMicroseconds()","score":14.520001411437988,"sortText":"3e97ae13readMicroseconds","textEdit":{"newText":"readMicroseconds()","range":{"end":{"character":15,"line":52},"start":{"character":15,"line":52}}}},{"detail":"void","filterText":"write","insertText":"write(${1:int value})","insertTextFormat":2,"kind":2,"label":" write(int value)","score":14.520001411437988,"sortText":"3e97ae13write","textEdit":{"newText":"write(${1:int value})","range":{"end":{"character":15,"line":52},"start":{"character":15,"line":52}}}},{"detail":"void","filterText":"writeMicroseconds","insertText":"writeMicroseconds(${1:int value})","insertTextFormat":2,"kind":2,"label":" writeMicroseconds(int value)","score":14.520001411437988,"sortText":"3e97ae13writeMicroseconds","textEdit":{"newText":"writeMicroseconds(${1:int value})","range":{"end":{"character":15,"line":52},"start":{"character":15,"line":52}}}},{"detail":"[2 overloads]","filterText":"attach","insertText":"attach($0)","insertTextFormat":2,"kind":2,"label":" attach(…)","score":9.6800003051757812,"sortText":"3ee51eb8attach","textEdit":{"newText":"attach($0)","range":{"end":{"character":15,"line":52},"start":{"character":15,"line":52}}}},{"detail":"bool","filterText":"attached","insertText":"attached()","insertTextFormat":2,"kind":2,"label":" attached()","score":9.6800003051757812,"sortText":"3ee51eb8attached","textEdit":{"newText":"attached()","range":{"end":{"character":15,"line":52},"start":{"character":15,"line":52}}}},{"detail":"void","filterText":"detach","insertText":"detach()","insertTextFormat":2,"kind":2,"label":" detach()","score":9.6800003051757812,"sortText":"3ee51eb8detach","textEdit":{"newText":"detach()","range":{"end":{"character":15,"line":52},"start":{"character":15,"line":52}}}},{"detail":"int","filterText":"read","insertText":"read()","insertTextFormat":2,"kind":2,"label":" read()","score":9.6800003051757812,"sortText":"3ee51eb8read","textEdit":{"newText":"read()","range":{"end":{"character":15,"line":52},"start":{"character":15,"line":52}}}}]}}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":133,"jsonrpc":"2.0"}
<<<
Content-Length: 2515

{"id":133,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":60},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":63}},"selectionRange":{"end":{"character":17,"line":63},"start":{"character":6,"line":63}}}]}Content-Length: 413

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":193}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":15},"end":{"line":52,"character":15}},"context":{"diagnostics":[]}},"id":134,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":134,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":194},"contentChanges":[{"range":{"start":{"line":52,"character":15},"end":{"line":52,"character":15}},"text":"w"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 608

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"no_member","message":"No member named 'w' in 'Servo'","range":{"end":{"character":16,"line":52},"start":{"character":15,"line":52}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":194}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":195},"contentChanges":[{"range":{"start":{"line":52,"character":16},"end":{"line":52,"character":16}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 609

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"no_member","message":"No member named 'wr' in 'Servo'","range":{"end":{"character":17,"line":52},"start":{"character":15,"line":52}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":195}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":196},"contentChanges":[{"range":{"start":{"line":52,"character":17},"end":{"line":52,"character":17}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 610

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"no_member","message":"No member named 'wri' in 'Servo'","range":{"end":{"character":18,"line":52},"start":{"character":15,"line":52}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":196}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":197},"contentChanges":[{"range":{"start":{"line":52,"character":18},"end":{"line":52,"character":18}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 'writ' in 'Servo'","range":{"end":{"character":19,"line":52},"start":{"character":15,"line":52}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":197}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":198},"contentChanges":[{"range":{"start":{"line":52,"character":19},"end":{"line":52,"character":19}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 643

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"},{"code":"bound_member_function","message":"Reference to non-static member function must be called","range":{"end":{"character":20,"line":52},"start":{"character":4,"line":52}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":198}}
>>>
Content-Length: 537

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":20},"end":{"line":52,"character":20}},"context":{"diagnostics":[{"range":{"start":{"line":52,"character":4},"end":{"line":52,"character":20}},"severity":1,"code":"bound_member_function","source":"clang","message":"Reference to non-static member function must be called"}]}},"id":135,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":135,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 339

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":199},"contentChanges":[{"range":{"start":{"line":52,"character":20},"end":{"line":52,"character":20}},"text":"()"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 784

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"typecheck_call_too_few_args_one","message":"Too few arguments to function call, single argument 'value' was not specified\n\n/Applications/Arduino.app/Contents/Java/libraries/Servo/src/Servo.h:111:8:\nnote: 'write' declared here","range":{"end":{"character":22,"line":52},"start":{"character":21,"line":52}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":199}}
>>>
Content-Length: 265

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":52,"character":21}},"id":136,"jsonrpc":"2.0"}
<<<
Content-Length: 161

{"id":136,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[{"label":"write(int value) -> void","parameters":[{"label":[6,15]}]}]}}
>>>
Content-Length: 678

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":21},"end":{"line":52,"character":21}},"context":{"diagnostics":[{"range":{"start":{"line":52,"character":21},"end":{"line":52,"character":22}},"severity":1,"code":"typecheck_call_too_few_args_one","source":"clang","message":"Too few arguments to function call, single argument 'value' was not specified\n\n/Applications/Arduino.app/Contents/Java/libraries/Servo/src/Servo.h:111:8:\nnote: 'write' declared here"}]}},"id":137,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":137,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":200},"contentChanges":[{"range":{"start":{"line":52,"character":21},"end":{"line":52,"character":21}},"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":200}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":201},"contentChanges":[{"range":{"start":{"line":52,"character":22},"end":{"line":52,"character":22}},"text":"5"}]},"jsonrpc":"2.0"}Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":202},"contentChanges":[{"range":{"start":{"line":52,"character":23},"end":{"line":52,"character":23}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":53},"start":{"character":2,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":202}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":24},"end":{"line":52,"character":24}},"context":{"diagnostics":[]}},"id":138,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":138,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":53,"character":10},"end":{"line":53,"character":10}},"context":{"diagnostics":[]}},"id":139,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":139,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":25},"end":{"line":52,"character":25}},"context":{"diagnostics":[]}},"id":140,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":140,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":203},"contentChanges":[{"range":{"start":{"line":52,"character":25},"end":{"line":52,"character":25}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":203}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":26},"end":{"line":52,"character":26}},"context":{"diagnostics":[]}},"id":141,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":141,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":56,"character":28},"end":{"line":56,"character":28}},"context":{"diagnostics":[]}},"id":142,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":142,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 343

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":204},"contentChanges":[{"range":{"start":{"line":56,"character":28},"end":{"line":56,"character":28}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":204}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":205},"contentChanges":[{"range":{"start":{"line":57,"character":2},"end":{"line":57,"character":4}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":205}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":206},"contentChanges":[{"range":{"start":{"line":57,"character":0},"end":{"line":57,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":206}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":207},"contentChanges":[{"range":{"start":{"line":56,"character":28},"end":{"line":57,"character":0}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":207}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":56,"character":28},"end":{"line":56,"character":28}},"context":{"diagnostics":[]}},"id":143,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":143,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":51,"character":27}},"id":144,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":144,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":28,"line":51},"start":{"character":27,"line":51}}}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":0},"end":{"line":52,"character":26}},"context":{"diagnostics":[]}},"id":145,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":145,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":4},"end":{"line":52,"character":26}},"context":{"diagnostics":[]}},"id":146,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":146,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":208},"contentChanges":[{"range":{"start":{"line":52,"character":4},"end":{"line":52,"character":26}},"rangeLength":22,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":208}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":209},"contentChanges":[{"range":{"start":{"line":52,"character":2},"end":{"line":52,"character":4}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":209}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":210},"contentChanges":[{"range":{"start":{"line":52,"character":0},"end":{"line":52,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":210}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":211},"contentChanges":[{"range":{"start":{"line":51,"character":29},"end":{"line":52,"character":0}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":211}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":51,"character":29},"end":{"line":51,"character":29}},"context":{"diagnostics":[]}},"id":147,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":147,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":52,"character":4}},"id":148,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":148,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":51,"character":8}},"id":149,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":149,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":51,"character":8}},"id":150,"jsonrpc":"2.0"}
<<<
Content-Length: 310

{"id":150,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":15,"line":51},"start":{"character":4,"line":51}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":26}},"id":151,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":151,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":28}},"id":152,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":152,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":29},"end":{"line":48,"character":29}},"context":{"diagnostics":[]}},"id":153,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":153,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":29}},"id":154,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":154,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":29}},"id":155,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":155,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 343

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":212},"contentChanges":[{"range":{"start":{"line":47,"character":28},"end":{"line":47,"character":28}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":212}}
>>>
Content-Length: 341

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":213},"contentChanges":[{"range":{"start":{"line":48,"character":4},"end":{"line":48,"character":4}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":213}}
>>>
Content-Length: 440

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":215},"contentChanges":[{"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":9}},"rangeLength":9,"text":""},{"range":{"start":{"line":48,"character":4},"end":{"line":48,"character":4}},"text":"d"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'd'","range":{"end":{"character":5,"line":48},"start":{"character":4,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":215}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":216},"contentChanges":[{"range":{"start":{"line":48,"character":5},"end":{"line":48,"character":5}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'de'","range":{"end":{"character":6,"line":48},"start":{"character":4,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":216}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":217},"contentChanges":[{"range":{"start":{"line":48,"character":6},"end":{"line":48,"character":6}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'del'","range":{"end":{"character":7,"line":48},"start":{"character":4,"line":48}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":217}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":218},"contentChanges":[{"range":{"start":{"line":48,"character":7},"end":{"line":48,"character":7}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 797

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'dela'; did you mean 'delay'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:143:6:\nnote: 'delay' declared here","range":{"end":{"character":8,"line":48},"start":{"character":4,"line":48}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":50},"start":{"character":2,"line":50}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":218}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":219},"contentChanges":[{"range":{"start":{"line":48,"character":8},"end":{"line":48,"character":8}},"text":"y"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":50},"start":{"character":2,"line":50}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":219}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":9},"end":{"line":48,"character":9}},"context":{"diagnostics":[]}},"id":156,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":156,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":157,"jsonrpc":"2.0"}
<<<
Content-Length: 2515

{"id":157,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":61},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":76},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":17,"line":64},"start":{"character":6,"line":64}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":220},"contentChanges":[{"range":{"start":{"line":48,"character":9},"end":{"line":48,"character":9}},"text":"()"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 838

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'delay'\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:143:6:\nnote: candidate function not viable: requires single argument 'ms', but no arguments were provided","range":{"end":{"character":9,"line":48},"start":{"character":4,"line":48}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":50},"start":{"character":2,"line":50}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":220}}
>>>
Content-Length: 265

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":10}},"id":158,"jsonrpc":"2.0"}
<<<
Content-Length: 168

{"id":158,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[{"label":"delay(unsigned long ms) -> void","parameters":[{"label":[6,22]}]}]}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":221},"contentChanges":[{"range":{"start":{"line":48,"character":10},"end":{"line":48,"character":10}},"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":50},"start":{"character":2,"line":50}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":221}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":222},"contentChanges":[{"range":{"start":{"line":48,"character":11},"end":{"line":48,"character":11}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":50},"start":{"character":2,"line":50}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":222}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":223},"contentChanges":[{"range":{"start":{"line":48,"character":12},"end":{"line":48,"character":12}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":50},"start":{"character":2,"line":50}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":223}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":13},"end":{"line":48,"character":13}},"context":{"diagnostics":[]}},"id":159,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":159,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":160,"jsonrpc":"2.0"}
<<<
Content-Length: 2515

{"id":160,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":61},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":76},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":17,"line":64},"start":{"character":6,"line":64}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":14},"end":{"line":48,"character":14}},"context":{"diagnostics":[]}},"id":161,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":161,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":224},"contentChanges":[{"range":{"start":{"line":48,"character":14},"end":{"line":48,"character":14}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":224}}
>>>
Content-Length: 343

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":225},"contentChanges":[{"range":{"start":{"line":48,"character":15},"end":{"line":48,"character":15}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":225}}
>>>
Content-Length: 357

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":226},"contentChanges":[{"range":{"start":{"line":49,"character":4},"end":{"line":49,"character":4}},"text":"microServo.write(150);"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":226}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":26},"end":{"line":49,"character":26}},"context":{"diagnostics":[]}},"id":162,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":162,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":51,"character":31}},"id":163,"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"id":163,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `distance`  \n\n---\nType: `float`  \nValue = `0.000000e+00`  \n\n---\n```cpp\nfloat distance = 0\n```"},"range":{"end":{"character":38,"line":51},"start":{"character":30,"line":51}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":51,"character":30}},"id":164,"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"id":164,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `distance`  \n\n---\nType: `float`  \nValue = `0.000000e+00`  \n\n---\n```cpp\nfloat distance = 0\n```"},"range":{"end":{"character":38,"line":51},"start":{"character":30,"line":51}}}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":2},"end":{"line":48,"character":15}},"context":{"diagnostics":[]}},"id":165,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":165,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":4},"end":{"line":48,"character":15}},"context":{"diagnostics":[]}},"id":166,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":166,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":26},"end":{"line":49,"character":26}},"context":{"diagnostics":[]}},"id":167,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":167,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 343

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":227},"contentChanges":[{"range":{"start":{"line":49,"character":26},"end":{"line":49,"character":26}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":227}}
>>>
Content-Length: 346

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":228},"contentChanges":[{"range":{"start":{"line":50,"character":4},"end":{"line":50,"character":4}},"text":"delay(100);"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":228}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":50,"character":15},"end":{"line":50,"character":15}},"context":{"diagnostics":[]}},"id":168,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":168,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":55,"character":29},"end":{"line":55,"character":29}},"context":{"diagnostics":[]}},"id":169,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":169,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 343

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":229},"contentChanges":[{"range":{"start":{"line":55,"character":29},"end":{"line":55,"character":29}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":229}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":230},"contentChanges":[{"range":{"start":{"line":56,"character":0},"end":{"line":56,"character":4}},"rangeLength":4,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":230}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":231},"contentChanges":[{"range":{"start":{"line":56,"character":0},"end":{"line":56,"character":0}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":231}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":232},"contentChanges":[{"range":{"start":{"line":56,"character":2},"end":{"line":56,"character":2}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":232}}
>>>
Content-Length: 445

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":234},"contentChanges":[{"range":{"start":{"line":56,"character":4},"end":{"line":56,"character":4}},"text":"\n    "},{"range":{"start":{"line":56,"character":0},"end":{"line":56,"character":4}},"rangeLength":4,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":234}}
>>>
Content-Length: 361

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":235},"contentChanges":[{"range":{"start":{"line":57,"character":0},"end":{"line":58,"character":0}},"rangeLength":5,"text":"        \n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":235}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":236},"contentChanges":[{"range":{"start":{"line":56,"character":0},"end":{"line":56,"character":0}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":236}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":237},"contentChanges":[{"range":{"start":{"line":56,"character":2},"end":{"line":56,"character":2}},"text":"  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":237}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":238},"contentChanges":[{"range":{"start":{"line":56,"character":0},"end":{"line":56,"character":4}},"rangeLength":4,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":238}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":46,"character":29},"end":{"line":46,"character":29}},"context":{"diagnostics":[]}},"id":170,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":170,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":26},"end":{"line":49,"character":26}},"context":{"diagnostics":[]}},"id":171,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":171,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":15},"end":{"line":48,"character":15}},"context":{"diagnostics":[]}},"id":172,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":172,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":27}},"id":173,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":173,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":25},"end":{"line":47,"character":25}},"context":{"diagnostics":[]}},"id":174,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":174,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":26},"end":{"line":49,"character":26}},"context":{"diagnostics":[]}},"id":175,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":175,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":23}},"id":176,"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"id":176,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int value`\n\n---\n```cpp\n// In Servo\npublic: void write(int value)\n```"},"range":{"end":{"character":24,"line":47},"start":{"character":23,"line":47}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":25},"end":{"line":47,"character":25}},"context":{"diagnostics":[]}},"id":177,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":177,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":49,"character":25}},"id":178,"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"id":178,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int value`\n\n---\n```cpp\n// In Servo\npublic: void write(int value)\n```"},"range":{"end":{"character":26,"line":49},"start":{"character":25,"line":49}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":20}},"id":179,"jsonrpc":"2.0"}
<<<
Content-Length: 307

{"id":179,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `bluePin`  \n\n---\nType: `const int`  \nValue = `6`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int bluePin = 6\n```"},"range":{"end":{"character":23,"line":45},"start":{"character":16,"line":45}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":21}},"id":180,"jsonrpc":"2.0"}
<<<
Content-Length: 215

{"id":180,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":20,"line":47},"start":{"character":15,"line":47}}},{"kind":1,"range":{"end":{"character":20,"line":49},"start":{"character":15,"line":49}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":21},"end":{"line":47,"character":23}},"context":{"diagnostics":[]}},"id":181,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":181,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":23,"line":47},"start":{"character":21,"line":47}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":21}},"id":182,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":182,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":44,"character":27}},"id":183,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":183,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":28,"line":44},"start":{"character":27,"line":44}}}}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":239},"contentChanges":[{"range":{"start":{"line":47,"character":21},"end":{"line":47,"character":23}},"rangeLength":2,"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":239}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":22},"end":{"line":47,"character":22}},"context":{"diagnostics":[]}},"id":184,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":184,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":49,"character":23}},"id":185,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":185,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":39,"character":25},"end":{"line":39,"character":25}},"context":{"diagnostics":[]}},"id":186,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":186,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 357

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":240},"contentChanges":[{"range":{"start":{"line":56,"character":0},"end":{"line":57,"character":0}},"rangeLength":1,"text":"    \n"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":36,"character":27}},"id":187,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":187,"jsonrpc":"2.0","result":[]}Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":240}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":9}},"id":188,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":188,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":36,"character":48},"end":{"line":36,"character":48}},"context":{"diagnostics":[]}},"id":189,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":189,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":47,"character":0},"end":{"line":50,"character":15}},"context":{"diagnostics":[]}},"id":190,"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"id":190,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":15,"line":50},"start":{"character":0,"line":47}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":47,"character":10}},"id":191,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":191,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":55,"character":29},"end":{"line":55,"character":29}},"context":{"diagnostics":[]}},"id":192,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":192,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":27}},"id":193,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":193,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":28,"line":55},"start":{"character":27,"line":55}}}}
>>>
Content-Length: 424

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":241},"contentChanges":[{"range":{"start":{"line":56,"character":4},"end":{"line":56,"character":4}},"text":"    microServo.write(0);   \n    delay(100);\n    microServo.write(150);\n    delay(100);"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":17}},"id":194,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":194,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":241}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":17}},"id":195,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":195,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `microServo`  \n\n---\nType: `class Servo`  \n\n---\n```cpp\nServo microServo\n```"},"range":{"end":{"character":18,"line":56},"start":{"character":8,"line":56}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":59,"character":15},"end":{"line":59,"character":15}},"context":{"diagnostics":[]}},"id":196,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":196,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 2272

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":242},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\n#include \u003cServo.h\u003e\n\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\n\nfloat distance = 0;\nServo microServo;\n\n#line 13 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 27 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 63 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nfloat getDistance();\n#line 13 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n\n  microServo.attach(9);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\");\n\n  if (distance \u003c= 10) {\n\n    analogWrite(redPin, 255);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 0);\n    microServo.write(0);   \n    delay(100);\n    microServo.write(150);\n    delay(100);\n\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 0);\n    analogWrite(bluePin, 255);\n    analogWrite(greenPin, 0);\n        microServo.write(0);   \n    delay(100);\n    microServo.write(150);\n    delay(100);\n        \n  } else {\n    analogWrite(redPin, 0);\n    analogWrite(greenPin, 255);\n    analogWrite(bluePin, 0);\n  }\n\n  delay(50);\n}\n\n\nfloat getDistance() {\n  float echoTime;\n  float calculatedDistance;\n\n  digitalWrite(trigPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigPin, LOW);\n\n  echoTime = pulseIn(echoPin, HIGH);\n  calculatedDistance = echoTime / 148.0;\n\n  return(calculatedDistance);\n}\n"}]},"jsonrpc":"2.0"}Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":6}},"id":197,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":197,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":198,"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":242}}Content-Length: 2515

{"id":198,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":10,"line":15},"start":{"character":5,"line":15}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":9,"line":17},"start":{"character":5,"line":17}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":17,"line":19},"start":{"character":6,"line":19}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":33},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":10,"line":21},"start":{"character":5,"line":21}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":68},"start":{"character":0,"line":35}},"selectionRange":{"end":{"character":9,"line":35},"start":{"character":5,"line":35}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":83},"start":{"character":0,"line":71}},"selectionRange":{"end":{"character":17,"line":71},"start":{"character":6,"line":71}}}]}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":180},"jsonrpc":"2.0"}Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":7}},"id":199,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":199,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 64

{"method":"$/cancelRequest","params":{"id":181},"jsonrpc":"2.0"}Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":8}},"id":200,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":200,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `microServo`  \n\n---\nType: `class Servo`  \n\n---\n```cpp\nServo microServo\n```"},"range":{"end":{"character":18,"line":56},"start":{"character":8,"line":56}}}}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":8}},"id":201,"jsonrpc":"2.0"}
<<<
Content-Length: 565

{"id":201,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":1,"range":{"end":{"character":12,"line":32},"start":{"character":2,"line":32}}},{"kind":1,"range":{"end":{"character":14,"line":47},"start":{"character":4,"line":47}}},{"kind":1,"range":{"end":{"character":14,"line":49},"start":{"character":4,"line":49}}},{"kind":1,"range":{"end":{"character":18,"line":56},"start":{"character":8,"line":56}}},{"kind":1,"range":{"end":{"character":14,"line":58},"start":{"character":4,"line":58}}}]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":56,"character":8},"end":{"line":56,"character":8}},"context":{"diagnostics":[]}},"id":202,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":202,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":52,"character":37}},"id":203,"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"id":203,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `distance`  \n\n---\nType: `float`  \nValue = `0.000000e+00`  \n\n---\n```cpp\nfloat distance = 0\n```"},"range":{"end":{"character":38,"line":52},"start":{"character":30,"line":52}}}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":243},"contentChanges":[{"range":{"start":{"line":56,"character":8},"end":{"line":56,"character":8}},"text":"\\"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 405

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":9,"line":56},"start":{"character":8,"line":56}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":243}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":244},"contentChanges":[{"range":{"start":{"line":56,"character":8},"end":{"line":56,"character":9}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":244}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":245},"contentChanges":[{"range":{"start":{"line":56,"character":6},"end":{"line":56,"character":8}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":245}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":246},"contentChanges":[{"range":{"start":{"line":56,"character":4},"end":{"line":56,"character":6}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":246}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":56,"character":4},"end":{"line":56,"character":4}},"context":{"diagnostics":[]}},"id":204,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":204,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":18}},"id":205,"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"id":205,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int value`\n\n---\n```cpp\n// In Servo\npublic: void write(int value)\n```"},"range":{"end":{"character":20,"line":56},"start":{"character":15,"line":56}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":21}},"id":206,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":206,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":20,"line":47},"start":{"character":15,"line":47}}},{"kind":1,"range":{"end":{"character":20,"line":49},"start":{"character":15,"line":49}}},{"kind":1,"range":{"end":{"character":20,"line":56},"start":{"character":15,"line":56}}},{"kind":1,"range":{"end":{"character":20,"line":58},"start":{"character":15,"line":58}}}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":20}},"id":207,"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"id":207,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int value`\n\n---\n```cpp\n// In Servo\npublic: void write(int value)\n```"},"range":{"end":{"character":20,"line":56},"start":{"character":15,"line":56}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":56,"character":21},"end":{"line":56,"character":22}},"context":{"diagnostics":[]}},"id":208,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":208,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":22,"line":56},"start":{"character":21,"line":56}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":247},"contentChanges":[{"range":{"start":{"line":56,"character":21},"end":{"line":56,"character":22}},"rangeLength":1,"text":"4"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":4,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":4,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":247}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":248},"contentChanges":[{"range":{"start":{"line":56,"character":22},"end":{"line":56,"character":22}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":248}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":56,"character":23},"end":{"line":56,"character":23}},"context":{"diagnostics":[]}},"id":209,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":209,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":15}},"id":210,"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"id":210,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int value`\n\n---\n```cpp\n// In Servo\npublic: void write(int value)\n```"},"range":{"end":{"character":20,"line":58},"start":{"character":15,"line":58}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":211,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":211,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":212,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":212,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":13}},"context":{"diagnostics":[]}},"id":213,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":213,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":13,"line":59},"start":{"character":10,"line":59}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":249},"contentChanges":[{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":13}},"rangeLength":3,"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":249}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":250},"contentChanges":[{"range":{"start":{"line":59,"character":11},"end":{"line":59,"character":11}},"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":250}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":251},"contentChanges":[{"range":{"start":{"line":59,"character":12},"end":{"line":59,"character":12}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":251}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":59,"character":13},"end":{"line":59,"character":13}},"context":{"diagnostics":[]}},"id":214,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":214,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":215,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":215,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":8}},"id":216,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":216,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":42,"character":23},"end":{"line":42,"character":23}},"context":{"diagnostics":[]}},"id":217,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":217,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":22}},"id":218,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":218,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `greenPin`  \n\n---\nType: `const int`  \nValue = `5`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int greenPin = 5\n```"},"range":{"end":{"character":24,"line":55},"start":{"character":16,"line":55}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":27}},"id":219,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":219,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":27}},"id":220,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":220,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":27}},"id":221,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":221,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":27},"end":{"line":54,"character":27}},"context":{"diagnostics":[]}},"id":222,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":222,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":26}},"id":223,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":223,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":26}},"id":224,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":224,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":55,"character":26},"end":{"line":55,"character":27}},"context":{"diagnostics":[]}},"id":225,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":225,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":27,"line":55},"start":{"character":26,"line":55}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":252},"contentChanges":[{"range":{"start":{"line":55,"character":26},"end":{"line":55,"character":27}},"rangeLength":1,"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":252}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":55,"character":27},"end":{"line":55,"character":27}},"context":{"diagnostics":[]}},"id":226,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":226,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":253},"contentChanges":[{"range":{"start":{"line":55,"character":27},"end":{"line":55,"character":27}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":253}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":254},"contentChanges":[{"range":{"start":{"line":55,"character":28},"end":{"line":55,"character":28}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":254}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":55,"character":29},"end":{"line":55,"character":29}},"context":{"diagnostics":[]}},"id":227,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":227,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":26}},"id":228,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":228,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":27}},"id":229,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":229,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":25},"end":{"line":54,"character":28}},"context":{"diagnostics":[]}},"id":230,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":230,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":28,"line":54},"start":{"character":25,"line":54}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":255},"contentChanges":[{"range":{"start":{"line":54,"character":25},"end":{"line":54,"character":28}},"rangeLength":3,"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":255}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":256},"contentChanges":[{"range":{"start":{"line":54,"character":26},"end":{"line":54,"character":26}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":256}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":27},"end":{"line":54,"character":27}},"context":{"diagnostics":[]}},"id":231,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":231,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":27}},"id":232,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":232,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":26}},"id":233,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":233,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":27}},"id":234,"jsonrpc":"2.0"}
<<<
Content-Length: 829

{"id":234,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":44},"start":{"character":4,"line":44}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}},{"kind":1,"range":{"end":{"character":15,"line":53},"start":{"character":4,"line":53}}},{"kind":1,"range":{"end":{"character":15,"line":54},"start":{"character":4,"line":54}}},{"kind":1,"range":{"end":{"character":15,"line":55},"start":{"character":4,"line":55}}},{"kind":1,"range":{"end":{"character":15,"line":62},"start":{"character":4,"line":62}}},{"kind":1,"range":{"end":{"character":15,"line":63},"start":{"character":4,"line":63}}},{"kind":1,"range":{"end":{"character":15,"line":64},"start":{"character":4,"line":64}}}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":27}},"id":235,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":235,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":25},"end":{"line":54,"character":27}},"context":{"diagnostics":[]}},"id":236,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":236,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":27,"line":54},"start":{"character":25,"line":54}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":26}},"id":237,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":237,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":257},"contentChanges":[{"range":{"start":{"line":54,"character":25},"end":{"line":54,"character":27}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":25}},"id":238,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":238,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}Content-Length: 407

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":26,"line":54},"start":{"character":25,"line":54}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":257}}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":24}},"id":239,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":239,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":25}},"id":240,"jsonrpc":"2.0"}
<<<
Content-Length: 741

{"id":240,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":44},"start":{"character":4,"line":44}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}},{"kind":1,"range":{"end":{"character":15,"line":53},"start":{"character":4,"line":53}}},{"kind":1,"range":{"end":{"character":15,"line":55},"start":{"character":4,"line":55}}},{"kind":1,"range":{"end":{"character":15,"line":62},"start":{"character":4,"line":62}}},{"kind":1,"range":{"end":{"character":15,"line":63},"start":{"character":4,"line":63}}},{"kind":1,"range":{"end":{"character":15,"line":64},"start":{"character":4,"line":64}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":53,"character":24},"end":{"line":53,"character":25}},"context":{"diagnostics":[]}},"id":241,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":241,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":25,"line":53},"start":{"character":24,"line":53}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 355

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":258},"contentChanges":[{"range":{"start":{"line":53,"character":24},"end":{"line":53,"character":25}},"rangeLength":1,"text":"50"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":25}},"id":242,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":242,"jsonrpc":"2.0","result":[]}Content-Length: 407

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":26,"line":54},"start":{"character":25,"line":54}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":258}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":24}},"id":243,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":243,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":53,"character":26},"end":{"line":53,"character":26}},"context":{"diagnostics":[]}},"id":244,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":244,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":24}},"id":245,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":245,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 501

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":25},"end":{"line":54,"character":25}},"context":{"diagnostics":[{"range":{"start":{"line":54,"character":25},"end":{"line":54,"character":26}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":246,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":246,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":259},"contentChanges":[{"range":{"start":{"line":54,"character":25},"end":{"line":54,"character":25}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":259}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":26},"end":{"line":54,"character":26}},"context":{"diagnostics":[]}},"id":247,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":247,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":26},"end":{"line":49,"character":26}},"context":{"diagnostics":[]}},"id":248,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":248,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":29}},"id":249,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":249,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":30,"line":55},"start":{"character":29,"line":55}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":29}},"id":250,"jsonrpc":"2.0"}
<<<
Content-Length: 829

{"id":250,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":44},"start":{"character":4,"line":44}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}},{"kind":1,"range":{"end":{"character":15,"line":53},"start":{"character":4,"line":53}}},{"kind":1,"range":{"end":{"character":15,"line":54},"start":{"character":4,"line":54}}},{"kind":1,"range":{"end":{"character":15,"line":55},"start":{"character":4,"line":55}}},{"kind":1,"range":{"end":{"character":15,"line":62},"start":{"character":4,"line":62}}},{"kind":1,"range":{"end":{"character":15,"line":63},"start":{"character":4,"line":63}}},{"kind":1,"range":{"end":{"character":15,"line":64},"start":{"character":4,"line":64}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":55,"character":26},"end":{"line":55,"character":29}},"context":{"diagnostics":[]}},"id":251,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":251,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":29,"line":55},"start":{"character":26,"line":55}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":20}},"id":252,"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"id":252,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int value`\n\n---\n```cpp\n// In Servo\npublic: void write(int value)\n```"},"range":{"end":{"character":20,"line":56},"start":{"character":15,"line":56}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":21}},"id":253,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":253,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":20,"line":47},"start":{"character":15,"line":47}}},{"kind":1,"range":{"end":{"character":20,"line":49},"start":{"character":15,"line":49}}},{"kind":1,"range":{"end":{"character":20,"line":56},"start":{"character":15,"line":56}}},{"kind":1,"range":{"end":{"character":20,"line":58},"start":{"character":15,"line":58}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":56,"character":21},"end":{"line":56,"character":21}},"context":{"diagnostics":[]}},"id":254,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":254,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":15},"end":{"line":57,"character":15}},"context":{"diagnostics":[]}},"id":255,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":255,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":26}},"id":256,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":256,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":26}},"id":257,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":257,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":25}},"id":258,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":258,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":25,"line":55},"start":{"character":24,"line":55}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":29}},"id":259,"jsonrpc":"2.0"}
<<<
Content-Length: 829

{"id":259,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":44},"start":{"character":4,"line":44}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}},{"kind":1,"range":{"end":{"character":15,"line":53},"start":{"character":4,"line":53}}},{"kind":1,"range":{"end":{"character":15,"line":54},"start":{"character":4,"line":54}}},{"kind":1,"range":{"end":{"character":15,"line":55},"start":{"character":4,"line":55}}},{"kind":1,"range":{"end":{"character":15,"line":62},"start":{"character":4,"line":62}}},{"kind":1,"range":{"end":{"character":15,"line":63},"start":{"character":4,"line":63}}},{"kind":1,"range":{"end":{"character":15,"line":64},"start":{"character":4,"line":64}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":55,"character":26},"end":{"line":55,"character":29}},"context":{"diagnostics":[]}},"id":260,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":260,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":29,"line":55},"start":{"character":26,"line":55}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":58,"character":25},"end":{"line":58,"character":25}},"context":{"diagnostics":[]}},"id":261,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":261,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":28},"end":{"line":54,"character":28}},"context":{"diagnostics":[]}},"id":262,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":262,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":55,"character":30},"end":{"line":55,"character":30}},"context":{"diagnostics":[]}},"id":263,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":263,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":29}},"id":264,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":264,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":23}},"id":265,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":265,"jsonrpc":"2.0","result":[{"range":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":55,"character":0},"end":{"line":55,"character":31}},"context":{"diagnostics":[]}},"id":266,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":266,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":260},"contentChanges":[{"range":{"start":{"line":55,"character":0},"end":{"line":55,"character":31}},"rangeLength":31,"text":""}]},"jsonrpc":"2.0"}Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":0}},"id":267,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":267,"jsonrpc":"2.0","result":null}Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":260}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":261},"contentChanges":[{"range":{"start":{"line":54,"character":28},"end":{"line":55,"character":0}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":261}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":28},"end":{"line":54,"character":28}},"context":{"diagnostics":[]}},"id":268,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":268,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":53,"character":28},"end":{"line":53,"character":28}},"context":{"diagnostics":[]}},"id":269,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":269,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 343

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":262},"contentChanges":[{"range":{"start":{"line":53,"character":28},"end":{"line":53,"character":28}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":262}}
>>>
Content-Length: 366

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":263},"contentChanges":[{"range":{"start":{"line":54,"character":4},"end":{"line":54,"character":4}},"text":"    analogWrite(greenPin, 255);"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":263}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":35},"end":{"line":54,"character":35}},"context":{"diagnostics":[]}},"id":270,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":270,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":32}},"id":271,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":271,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":26}},"id":272,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":272,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":22}},"id":273,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":273,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":22}},"id":274,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":274,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":22,"line":53},"start":{"character":16,"line":53}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":26}},"id":275,"jsonrpc":"2.0"}
<<<
Content-Length: 829

{"id":275,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":44},"start":{"character":4,"line":44}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}},{"kind":1,"range":{"end":{"character":15,"line":53},"start":{"character":4,"line":53}}},{"kind":1,"range":{"end":{"character":19,"line":54},"start":{"character":8,"line":54}}},{"kind":1,"range":{"end":{"character":15,"line":55},"start":{"character":4,"line":55}}},{"kind":1,"range":{"end":{"character":15,"line":62},"start":{"character":4,"line":62}}},{"kind":1,"range":{"end":{"character":15,"line":63},"start":{"character":4,"line":63}}},{"kind":1,"range":{"end":{"character":15,"line":64},"start":{"character":4,"line":64}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":53,"character":24},"end":{"line":53,"character":26}},"context":{"diagnostics":[]}},"id":276,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":276,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":26,"line":53},"start":{"character":24,"line":53}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":264},"contentChanges":[{"range":{"start":{"line":53,"character":24},"end":{"line":53,"character":26}},"rangeLength":2,"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":264}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":53,"character":25},"end":{"line":53,"character":25}},"context":{"diagnostics":[]}},"id":277,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":277,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":265},"contentChanges":[{"range":{"start":{"line":53,"character":25},"end":{"line":53,"character":25}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":265}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":266},"contentChanges":[{"range":{"start":{"line":53,"character":26},"end":{"line":53,"character":26}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":266}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":53,"character":27},"end":{"line":53,"character":27}},"context":{"diagnostics":[]}},"id":278,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":278,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":26}},"id":279,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":279,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":46,"character":17}},"id":280,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":280,"jsonrpc":"2.0","result":[{"range":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":32,"character":5}},"id":281,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":281,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":30}},"id":282,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":282,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":21}},"id":283,"jsonrpc":"2.0"}
<<<
Content-Length: 208

{"id":283,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":263},"start":{"character":12,"line":263}},"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}]}
>>>
Content-Length: 11726

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp","languageId":"cpp","version":1,"text":"/*\n Servo.cpp - Interrupt driven Servo library for Arduino using 16 bit timers- Version 2\n Copyright (c) 2009 Michael Margolis.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n#if defined(ARDUINO_ARCH_AVR)\n\n#include \u003cavr/interrupt.h\u003e\n#include \u003cArduino.h\u003e\n\n#include \"Servo.h\"\n\n#define usToTicks(_us)    (( clockCyclesPerMicrosecond()* _us) / 8)     // converts microseconds to tick (assumes prescale of 8)  // 12 Aug 2009\n#define ticksToUs(_ticks) (( (unsigned)_ticks * 8)/ clockCyclesPerMicrosecond() ) // converts from ticks back to microseconds\n\n\n#define TRIM_DURATION       2                               // compensation ticks to trim adjust for digitalWrite delays // 12 August 2009\n\n//#define NBR_TIMERS        (MAX_SERVOS / SERVOS_PER_TIMER)\n\nstatic servo_t servos[MAX_SERVOS];                          // static array of servo structures\nstatic volatile int8_t Channel[_Nbr_16timers ];             // counter for the servo being pulsed for each timer (or -1 if refresh interval)\n\nuint8_t ServoCount = 0;                                     // the total number of attached servos\n\n\n// convenience macros\n#define SERVO_INDEX_TO_TIMER(_servo_nbr) ((timer16_Sequence_t)(_servo_nbr / SERVOS_PER_TIMER)) // returns the timer controlling this servo\n#define SERVO_INDEX_TO_CHANNEL(_servo_nbr) (_servo_nbr % SERVOS_PER_TIMER)       // returns the index of the servo on this timer\n#define SERVO_INDEX(_timer,_channel)  ((_timer*SERVOS_PER_TIMER) + _channel)     // macro to access servo index by timer and channel\n#define SERVO(_timer,_channel)  (servos[SERVO_INDEX(_timer,_channel)])            // macro to access servo class by timer and channel\n\n#define SERVO_MIN() (MIN_PULSE_WIDTH - this-\u003emin * 4)  // minimum value in uS for this servo\n#define SERVO_MAX() (MAX_PULSE_WIDTH - this-\u003emax * 4)  // maximum value in uS for this servo\n\n/************ static functions common to all instances ***********************/\n\nstatic inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)\n{\n  if( Channel[timer] \u003c 0 )\n    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer\n  else{\n    if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 SERVO(timer,Channel[timer]).Pin.isActive == true )\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated\n  }\n\n  Channel[timer]++;    // increment to the next channel\n  if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 Channel[timer] \u003c SERVOS_PER_TIMER) {\n    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;\n    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high\n  }\n  else {\n    // finished all channels so wait for the refresh period to expire before starting over\n    if( ((unsigned)*TCNTn) + 4 \u003c usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed\n      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);\n    else\n      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed\n    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel\n  }\n}\n\n#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform\n// Interrupt handlers for Arduino\n#if defined(_useTimer1)\nSIGNAL (TIMER1_COMPA_vect)\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n\n#if defined(_useTimer3)\nSIGNAL (TIMER3_COMPA_vect)\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n\n#if defined(_useTimer4)\nSIGNAL (TIMER4_COMPA_vect)\n{\n  handle_interrupts(_timer4, \u0026TCNT4, \u0026OCR4A);\n}\n#endif\n\n#if defined(_useTimer5)\nSIGNAL (TIMER5_COMPA_vect)\n{\n  handle_interrupts(_timer5, \u0026TCNT5, \u0026OCR5A);\n}\n#endif\n\n#elif defined WIRING\n// Interrupt handlers for Wiring\n#if defined(_useTimer1)\nvoid Timer1Service()\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n#if defined(_useTimer3)\nvoid Timer3Service()\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n#endif\n\n\nstatic void initISR(timer16_Sequence_t timer)\n{\n#if defined (_useTimer1)\n  if(timer == _timer1) {\n    TCCR1A = 0;             // normal counting mode\n    TCCR1B = _BV(CS11);     // set prescaler of 8\n    TCNT1 = 0;              // clear the timer count\n#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF1A);      // clear any pending interrupts;\n    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt\n#else\n    // here if not ATmega8 or ATmega128\n    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts;\n    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER1OUTCOMPAREA_INT, Timer1Service);\n#endif\n  }\n#endif\n\n#if defined (_useTimer3)\n  if(timer == _timer3) {\n    TCCR3A = 0;             // normal counting mode\n    TCCR3B = _BV(CS31);     // set prescaler of 8\n    TCNT3 = 0;              // clear the timer count\n#if defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF3A);     // clear any pending interrupts;\n\tETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt\n#else\n    TIFR3 = _BV(OCF3A);     // clear any pending interrupts;\n    TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER3OUTCOMPAREA_INT, Timer3Service);  // for Wiring platform only\n#endif\n  }\n#endif\n\n#if defined (_useTimer4)\n  if(timer == _timer4) {\n    TCCR4A = 0;             // normal counting mode\n    TCCR4B = _BV(CS41);     // set prescaler of 8\n    TCNT4 = 0;              // clear the timer count\n    TIFR4 = _BV(OCF4A);     // clear any pending interrupts;\n    TIMSK4 =  _BV(OCIE4A) ; // enable the output compare interrupt\n  }\n#endif\n\n#if defined (_useTimer5)\n  if(timer == _timer5) {\n    TCCR5A = 0;             // normal counting mode\n    TCCR5B = _BV(CS51);     // set prescaler of 8\n    TCNT5 = 0;              // clear the timer count\n    TIFR5 = _BV(OCF5A);     // clear any pending interrupts;\n    TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt\n  }\n#endif\n}\n\nstatic void finISR(timer16_Sequence_t timer)\n{\n    //disable use of the given timer\n#if defined WIRING   // Wiring\n  if(timer == _timer1) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK1 \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #else\n    TIMSK \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #endif\n    timerDetach(TIMER1OUTCOMPAREA_INT);\n  }\n  else if(timer == _timer3) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK3 \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #else\n    ETIMSK \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #endif\n    timerDetach(TIMER3OUTCOMPAREA_INT);\n  }\n#else\n  //For arduino - in future: call here to a currently undefined function to reset the timer\n  (void) timer;  // squash \"unused parameter 'timer' [-Wunused-parameter]\" warning\n#endif\n}\n\nstatic boolean isTimerActive(timer16_Sequence_t timer)\n{\n  // returns true if any servo is active on this timer\n  for(uint8_t channel=0; channel \u003c SERVOS_PER_TIMER; channel++) {\n    if(SERVO(timer,channel).Pin.isActive == true)\n      return true;\n  }\n  return false;\n}\n\n\n/****************** end of static functions ******************************/\n\nServo::Servo()\n{\n  if( ServoCount \u003c MAX_SERVOS) {\n    this-\u003eservoIndex = ServoCount++;                    // assign a servo index to this instance\n\tservos[this-\u003eservoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009\n  }\n  else\n    this-\u003eservoIndex = INVALID_SERVO ;  // too many servos\n}\n\nuint8_t Servo::attach(int pin)\n{\n  return this-\u003eattach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);\n}\n\nuint8_t Servo::attach(int pin, int min, int max)\n{\n  if(this-\u003eservoIndex \u003c MAX_SERVOS ) {\n    pinMode( pin, OUTPUT) ;                                   // set servo pin to output\n    servos[this-\u003eservoIndex].Pin.nbr = pin;\n    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 \u003c 128\n    this-\u003emin  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS\n    this-\u003emax  = (MAX_PULSE_WIDTH - max)/4;\n    // initialize the timer if it has not already been initialized\n    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n    if(isTimerActive(timer) == false)\n      initISR(timer);\n    servos[this-\u003eservoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive\n  }\n  return this-\u003eservoIndex ;\n}\n\nvoid Servo::detach()\n{\n  servos[this-\u003eservoIndex].Pin.isActive = false;\n  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n  if(isTimerActive(timer) == false) {\n    finISR(timer);\n  }\n}\n\nvoid Servo::write(int value)\n{\n  if(value \u003c MIN_PULSE_WIDTH)\n  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)\n    if(value \u003c 0) value = 0;\n    if(value \u003e 180) value = 180;\n    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());\n  }\n  this-\u003ewriteMicroseconds(value);\n}\n\nvoid Servo::writeMicroseconds(int value)\n{\n  // calculate and store the values for the given channel\n  byte channel = this-\u003eservoIndex;\n  if( (channel \u003c MAX_SERVOS) )   // ensure channel is valid\n  {\n    if( value \u003c SERVO_MIN() )          // ensure pulse width is valid\n      value = SERVO_MIN();\n    else if( value \u003e SERVO_MAX() )\n      value = SERVO_MAX();\n\n    value = value - TRIM_DURATION;\n    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009\n\n    uint8_t oldSREG = SREG;\n    cli();\n    servos[channel].ticks = value;\n    SREG = oldSREG;\n  }\n}\n\nint Servo::read() // return the value as degrees\n{\n  return  map( this-\u003ereadMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);\n}\n\nint Servo::readMicroseconds()\n{\n  unsigned int pulsewidth;\n  if( this-\u003eservoIndex != INVALID_SERVO )\n    pulsewidth = ticksToUs(servos[this-\u003eservoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009\n  else\n    pulsewidth  = 0;\n\n  return pulsewidth;\n}\n\nbool Servo::attached()\n{\n  return servos[this-\u003eservoIndex].Pin.isActive ;\n}\n\n#endif // ARDUINO_ARCH_AVR\n\n"}},"jsonrpc":"2.0"}Content-Length: 167

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 177

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":17}},"id":284,"jsonrpc":"2.0"}
<<<
Content-Length: 208

{"id":284,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":263},"start":{"character":12,"line":263}},"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}]}
>>>
Content-Length: 11726

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp","languageId":"cpp","version":1,"text":"/*\n Servo.cpp - Interrupt driven Servo library for Arduino using 16 bit timers- Version 2\n Copyright (c) 2009 Michael Margolis.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n#if defined(ARDUINO_ARCH_AVR)\n\n#include \u003cavr/interrupt.h\u003e\n#include \u003cArduino.h\u003e\n\n#include \"Servo.h\"\n\n#define usToTicks(_us)    (( clockCyclesPerMicrosecond()* _us) / 8)     // converts microseconds to tick (assumes prescale of 8)  // 12 Aug 2009\n#define ticksToUs(_ticks) (( (unsigned)_ticks * 8)/ clockCyclesPerMicrosecond() ) // converts from ticks back to microseconds\n\n\n#define TRIM_DURATION       2                               // compensation ticks to trim adjust for digitalWrite delays // 12 August 2009\n\n//#define NBR_TIMERS        (MAX_SERVOS / SERVOS_PER_TIMER)\n\nstatic servo_t servos[MAX_SERVOS];                          // static array of servo structures\nstatic volatile int8_t Channel[_Nbr_16timers ];             // counter for the servo being pulsed for each timer (or -1 if refresh interval)\n\nuint8_t ServoCount = 0;                                     // the total number of attached servos\n\n\n// convenience macros\n#define SERVO_INDEX_TO_TIMER(_servo_nbr) ((timer16_Sequence_t)(_servo_nbr / SERVOS_PER_TIMER)) // returns the timer controlling this servo\n#define SERVO_INDEX_TO_CHANNEL(_servo_nbr) (_servo_nbr % SERVOS_PER_TIMER)       // returns the index of the servo on this timer\n#define SERVO_INDEX(_timer,_channel)  ((_timer*SERVOS_PER_TIMER) + _channel)     // macro to access servo index by timer and channel\n#define SERVO(_timer,_channel)  (servos[SERVO_INDEX(_timer,_channel)])            // macro to access servo class by timer and channel\n\n#define SERVO_MIN() (MIN_PULSE_WIDTH - this-\u003emin * 4)  // minimum value in uS for this servo\n#define SERVO_MAX() (MAX_PULSE_WIDTH - this-\u003emax * 4)  // maximum value in uS for this servo\n\n/************ static functions common to all instances ***********************/\n\nstatic inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)\n{\n  if( Channel[timer] \u003c 0 )\n    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer\n  else{\n    if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 SERVO(timer,Channel[timer]).Pin.isActive == true )\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated\n  }\n\n  Channel[timer]++;    // increment to the next channel\n  if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 Channel[timer] \u003c SERVOS_PER_TIMER) {\n    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;\n    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high\n  }\n  else {\n    // finished all channels so wait for the refresh period to expire before starting over\n    if( ((unsigned)*TCNTn) + 4 \u003c usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed\n      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);\n    else\n      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed\n    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel\n  }\n}\n\n#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform\n// Interrupt handlers for Arduino\n#if defined(_useTimer1)\nSIGNAL (TIMER1_COMPA_vect)\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n\n#if defined(_useTimer3)\nSIGNAL (TIMER3_COMPA_vect)\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n\n#if defined(_useTimer4)\nSIGNAL (TIMER4_COMPA_vect)\n{\n  handle_interrupts(_timer4, \u0026TCNT4, \u0026OCR4A);\n}\n#endif\n\n#if defined(_useTimer5)\nSIGNAL (TIMER5_COMPA_vect)\n{\n  handle_interrupts(_timer5, \u0026TCNT5, \u0026OCR5A);\n}\n#endif\n\n#elif defined WIRING\n// Interrupt handlers for Wiring\n#if defined(_useTimer1)\nvoid Timer1Service()\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n#if defined(_useTimer3)\nvoid Timer3Service()\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n#endif\n\n\nstatic void initISR(timer16_Sequence_t timer)\n{\n#if defined (_useTimer1)\n  if(timer == _timer1) {\n    TCCR1A = 0;             // normal counting mode\n    TCCR1B = _BV(CS11);     // set prescaler of 8\n    TCNT1 = 0;              // clear the timer count\n#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF1A);      // clear any pending interrupts;\n    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt\n#else\n    // here if not ATmega8 or ATmega128\n    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts;\n    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER1OUTCOMPAREA_INT, Timer1Service);\n#endif\n  }\n#endif\n\n#if defined (_useTimer3)\n  if(timer == _timer3) {\n    TCCR3A = 0;             // normal counting mode\n    TCCR3B = _BV(CS31);     // set prescaler of 8\n    TCNT3 = 0;              // clear the timer count\n#if defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF3A);     // clear any pending interrupts;\n\tETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt\n#else\n    TIFR3 = _BV(OCF3A);     // clear any pending interrupts;\n    TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER3OUTCOMPAREA_INT, Timer3Service);  // for Wiring platform only\n#endif\n  }\n#endif\n\n#if defined (_useTimer4)\n  if(timer == _timer4) {\n    TCCR4A = 0;             // normal counting mode\n    TCCR4B = _BV(CS41);     // set prescaler of 8\n    TCNT4 = 0;              // clear the timer count\n    TIFR4 = _BV(OCF4A);     // clear any pending interrupts;\n    TIMSK4 =  _BV(OCIE4A) ; // enable the output compare interrupt\n  }\n#endif\n\n#if defined (_useTimer5)\n  if(timer == _timer5) {\n    TCCR5A = 0;             // normal counting mode\n    TCCR5B = _BV(CS51);     // set prescaler of 8\n    TCNT5 = 0;              // clear the timer count\n    TIFR5 = _BV(OCF5A);     // clear any pending interrupts;\n    TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt\n  }\n#endif\n}\n\nstatic void finISR(timer16_Sequence_t timer)\n{\n    //disable use of the given timer\n#if defined WIRING   // Wiring\n  if(timer == _timer1) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK1 \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #else\n    TIMSK \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #endif\n    timerDetach(TIMER1OUTCOMPAREA_INT);\n  }\n  else if(timer == _timer3) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK3 \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #else\n    ETIMSK \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #endif\n    timerDetach(TIMER3OUTCOMPAREA_INT);\n  }\n#else\n  //For arduino - in future: call here to a currently undefined function to reset the timer\n  (void) timer;  // squash \"unused parameter 'timer' [-Wunused-parameter]\" warning\n#endif\n}\n\nstatic boolean isTimerActive(timer16_Sequence_t timer)\n{\n  // returns true if any servo is active on this timer\n  for(uint8_t channel=0; channel \u003c SERVOS_PER_TIMER; channel++) {\n    if(SERVO(timer,channel).Pin.isActive == true)\n      return true;\n  }\n  return false;\n}\n\n\n/****************** end of static functions ******************************/\n\nServo::Servo()\n{\n  if( ServoCount \u003c MAX_SERVOS) {\n    this-\u003eservoIndex = ServoCount++;                    // assign a servo index to this instance\n\tservos[this-\u003eservoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009\n  }\n  else\n    this-\u003eservoIndex = INVALID_SERVO ;  // too many servos\n}\n\nuint8_t Servo::attach(int pin)\n{\n  return this-\u003eattach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);\n}\n\nuint8_t Servo::attach(int pin, int min, int max)\n{\n  if(this-\u003eservoIndex \u003c MAX_SERVOS ) {\n    pinMode( pin, OUTPUT) ;                                   // set servo pin to output\n    servos[this-\u003eservoIndex].Pin.nbr = pin;\n    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 \u003c 128\n    this-\u003emin  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS\n    this-\u003emax  = (MAX_PULSE_WIDTH - max)/4;\n    // initialize the timer if it has not already been initialized\n    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n    if(isTimerActive(timer) == false)\n      initISR(timer);\n    servos[this-\u003eservoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive\n  }\n  return this-\u003eservoIndex ;\n}\n\nvoid Servo::detach()\n{\n  servos[this-\u003eservoIndex].Pin.isActive = false;\n  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n  if(isTimerActive(timer) == false) {\n    finISR(timer);\n  }\n}\n\nvoid Servo::write(int value)\n{\n  if(value \u003c MIN_PULSE_WIDTH)\n  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)\n    if(value \u003c 0) value = 0;\n    if(value \u003e 180) value = 180;\n    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());\n  }\n  this-\u003ewriteMicroseconds(value);\n}\n\nvoid Servo::writeMicroseconds(int value)\n{\n  // calculate and store the values for the given channel\n  byte channel = this-\u003eservoIndex;\n  if( (channel \u003c MAX_SERVOS) )   // ensure channel is valid\n  {\n    if( value \u003c SERVO_MIN() )          // ensure pulse width is valid\n      value = SERVO_MIN();\n    else if( value \u003e SERVO_MAX() )\n      value = SERVO_MAX();\n\n    value = value - TRIM_DURATION;\n    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009\n\n    uint8_t oldSREG = SREG;\n    cli();\n    servos[channel].ticks = value;\n    SREG = oldSREG;\n  }\n}\n\nint Servo::read() // return the value as degrees\n{\n  return  map( this-\u003ereadMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);\n}\n\nint Servo::readMicroseconds()\n{\n  unsigned int pulsewidth;\n  if( this-\u003eservoIndex != INVALID_SERVO )\n    pulsewidth = ticksToUs(servos[this-\u003eservoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009\n  else\n    pulsewidth  = 0;\n\n  return pulsewidth;\n}\n\nbool Servo::attached()\n{\n  return servos[this-\u003eservoIndex].Pin.isActive ;\n}\n\n#endif // ARDUINO_ARCH_AVR\n\n"}},"jsonrpc":"2.0"}Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":17}},"id":285,"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"id":285,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int value`\n\n---\n```cpp\n// In Servo\npublic: void write(int value)\n```"},"range":{"end":{"character":20,"line":56},"start":{"character":15,"line":56}}}}
>>>
Content-Length: 167

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 177

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":26}},"id":286,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":286,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":22}},"id":287,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":287,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":23}},"id":288,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":288,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":20,"line":47},"start":{"character":15,"line":47}}},{"kind":1,"range":{"end":{"character":20,"line":49},"start":{"character":15,"line":49}}},{"kind":1,"range":{"end":{"character":20,"line":56},"start":{"character":15,"line":56}}},{"kind":1,"range":{"end":{"character":20,"line":58},"start":{"character":15,"line":58}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":56,"character":21},"end":{"line":56,"character":23}},"context":{"diagnostics":[]}},"id":289,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":289,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":23,"line":56},"start":{"character":21,"line":56}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":23}},"id":290,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":290,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":22}},"id":291,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":291,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":22}},"id":292,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":292,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":22}},"id":293,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":293,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":22}},"id":294,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":294,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":22}},"id":295,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":295,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":22}},"id":296,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":296,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":56,"character":21},"end":{"line":56,"character":23}},"context":{"diagnostics":[]}},"id":297,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":297,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":23,"line":56},"start":{"character":21,"line":56}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":22}},"id":298,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":298,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":23}},"id":299,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":299,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":58,"character":21},"end":{"line":58,"character":24}},"context":{"diagnostics":[]}},"id":300,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":300,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":24,"line":58},"start":{"character":21,"line":58}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":267},"contentChanges":[{"range":{"start":{"line":58,"character":21},"end":{"line":58,"character":24}},"rangeLength":3,"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":267}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":268},"contentChanges":[{"range":{"start":{"line":58,"character":22},"end":{"line":58,"character":22}},"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":268}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":58,"character":23},"end":{"line":58,"character":23}},"context":{"diagnostics":[]}},"id":301,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":301,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":269},"contentChanges":[{"range":{"start":{"line":58,"character":23},"end":{"line":58,"character":23}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":269}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":58,"character":24},"end":{"line":58,"character":24}},"context":{"diagnostics":[]}},"id":302,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":302,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":11}},"id":303,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":303,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":11}},"id":304,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":304,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":305,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":305,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":13}},"context":{"diagnostics":[]}},"id":306,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":306,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":13,"line":59},"start":{"character":10,"line":59}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":11}},"id":307,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":307,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":270},"contentChanges":[{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":13}},"rangeLength":3,"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":270}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":271},"contentChanges":[{"range":{"start":{"line":59,"character":11},"end":{"line":59,"character":11}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":271}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":272},"contentChanges":[{"range":{"start":{"line":59,"character":12},"end":{"line":59,"character":12}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":272}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":59,"character":13},"end":{"line":59,"character":13}},"context":{"diagnostics":[]}},"id":308,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":308,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":309,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":309,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":11}},"id":310,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":310,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":13}},"id":311,"jsonrpc":"2.0"}
<<<
Content-Length: 287

{"id":311,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `delay`  \n\n---\n→ `void`  \nParameters:  \n- `unsigned long ms`\n\n---\n```cpp\nvoid delay(unsigned long ms)\n```"},"range":{"end":{"character":14,"line":57},"start":{"character":13,"line":57}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":13}},"id":312,"jsonrpc":"2.0"}
<<<
Content-Length: 472

{"id":312,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":9,"line":48},"start":{"character":4,"line":48}}},{"kind":1,"range":{"end":{"character":9,"line":50},"start":{"character":4,"line":50}}},{"kind":1,"range":{"end":{"character":9,"line":57},"start":{"character":4,"line":57}}},{"kind":1,"range":{"end":{"character":9,"line":59},"start":{"character":4,"line":59}}},{"kind":1,"range":{"end":{"character":7,"line":67},"start":{"character":2,"line":67}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":13},"end":{"line":57,"character":13}},"context":{"diagnostics":[]}},"id":313,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":313,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":12}},"id":314,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":314,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":10},"end":{"line":57,"character":13}},"context":{"diagnostics":[]}},"id":315,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":315,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":13,"line":57},"start":{"character":10,"line":57}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":273},"contentChanges":[{"range":{"start":{"line":57,"character":10},"end":{"line":57,"character":13}},"rangeLength":3,"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":273}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":11},"end":{"line":57,"character":11}},"context":{"diagnostics":[]}},"id":316,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":316,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":274},"contentChanges":[{"range":{"start":{"line":57,"character":11},"end":{"line":57,"character":11}},"text":"6"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":274}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":12},"end":{"line":57,"character":12}},"context":{"diagnostics":[]}},"id":317,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":317,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":13}},"id":318,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":318,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `microServo`  \n\n---\nType: `class Servo`  \n\n---\n```cpp\nServo microServo\n```"},"range":{"end":{"character":14,"line":56},"start":{"character":4,"line":56}}}}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":275},"contentChanges":[{"range":{"start":{"line":57,"character":11},"end":{"line":57,"character":12}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":275}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":276},"contentChanges":[{"range":{"start":{"line":57,"character":11},"end":{"line":57,"character":11}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":276}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":277},"contentChanges":[{"range":{"start":{"line":57,"character":12},"end":{"line":57,"character":12}},"text":"o"}]},"jsonrpc":"2.0"}Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":278},"contentChanges":[{"range":{"start":{"line":57,"character":13},"end":{"line":57,"character":13}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 431

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_suffix_constant","message":"Invalid suffix 'o0' on integer constant","range":{"end":{"character":14,"line":57},"start":{"character":12,"line":57}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":278}}
>>>
Content-Length: 525

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":14},"end":{"line":57,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":57,"character":12},"end":{"line":57,"character":14}},"severity":1,"code":"invalid_suffix_constant","source":"clang","message":"Invalid suffix 'o0' on integer constant"}]}},"id":319,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":319,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":279},"contentChanges":[{"range":{"start":{"line":57,"character":13},"end":{"line":57,"character":14}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 430

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_suffix_constant","message":"Invalid suffix 'o' on integer constant","range":{"end":{"character":13,"line":57},"start":{"character":12,"line":57}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":279}}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":280},"contentChanges":[{"range":{"start":{"line":57,"character":12},"end":{"line":57,"character":13}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":280}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":281},"contentChanges":[{"range":{"start":{"line":57,"character":12},"end":{"line":57,"character":12}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":281}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":13},"end":{"line":57,"character":13}},"context":{"diagnostics":[]}},"id":320,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":320,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":13}},"id":321,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":321,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":15}},"id":322,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":322,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":13}},"id":323,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":323,"jsonrpc":"2.0","result":[{"range":{"end":{"character":10,"line":105},"start":{"character":5,"line":105}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}]}
>>>
Content-Length: 13396

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c","languageId":"c","version":1,"text":"/*\n  wiring.c - Partial implementation of the Wiring API for the ATmega8.\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#include \"wiring_private.h\"\n\n// the prescaler is set so that timer0 ticks every 64 clock cycles, and the\n// the overflow handler is called every 256 ticks.\n#define MICROSECONDS_PER_TIMER0_OVERFLOW (clockCyclesToMicroseconds(64 * 256))\n\n// the whole number of milliseconds per timer0 overflow\n#define MILLIS_INC (MICROSECONDS_PER_TIMER0_OVERFLOW / 1000)\n\n// the fractional number of milliseconds per timer0 overflow. we shift right\n// by three to fit these numbers into a byte. (for the clock speeds we care\n// about - 8 and 16 MHz - this doesn't lose precision.)\n#define FRACT_INC ((MICROSECONDS_PER_TIMER0_OVERFLOW % 1000) \u003e\u003e 3)\n#define FRACT_MAX (1000 \u003e\u003e 3)\n\nvolatile unsigned long timer0_overflow_count = 0;\nvolatile unsigned long timer0_millis = 0;\nstatic unsigned char timer0_fract = 0;\n\n#if defined(TIM0_OVF_vect)\nISR(TIM0_OVF_vect)\n#else\nISR(TIMER0_OVF_vect)\n#endif\n{\n\t// copy these to local variables so they can be stored in registers\n\t// (volatile variables must be read from memory on every access)\n\tunsigned long m = timer0_millis;\n\tunsigned char f = timer0_fract;\n\n\tm += MILLIS_INC;\n\tf += FRACT_INC;\n\tif (f \u003e= FRACT_MAX) {\n\t\tf -= FRACT_MAX;\n\t\tm += 1;\n\t}\n\n\ttimer0_fract = f;\n\ttimer0_millis = m;\n\ttimer0_overflow_count++;\n}\n\nunsigned long millis()\n{\n\tunsigned long m;\n\tuint8_t oldSREG = SREG;\n\n\t// disable interrupts while we read timer0_millis or we might get an\n\t// inconsistent value (e.g. in the middle of a write to timer0_millis)\n\tcli();\n\tm = timer0_millis;\n\tSREG = oldSREG;\n\n\treturn m;\n}\n\nunsigned long micros() {\n\tunsigned long m;\n\tuint8_t oldSREG = SREG, t;\n\t\n\tcli();\n\tm = timer0_overflow_count;\n#if defined(TCNT0)\n\tt = TCNT0;\n#elif defined(TCNT0L)\n\tt = TCNT0L;\n#else\n\t#error TIMER 0 not defined\n#endif\n\n#ifdef TIFR0\n\tif ((TIFR0 \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#else\n\tif ((TIFR \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#endif\n\n\tSREG = oldSREG;\n\t\n\treturn ((m \u003c\u003c 8) + t) * (64 / clockCyclesPerMicrosecond());\n}\n\nvoid delay(unsigned long ms)\n{\n\tuint32_t start = micros();\n\n\twhile (ms \u003e 0) {\n\t\tyield();\n\t\twhile ( ms \u003e 0 \u0026\u0026 (micros() - start) \u003e= 1000) {\n\t\t\tms--;\n\t\t\tstart += 1000;\n\t\t}\n\t}\n}\n\n/* Delay for the given number of microseconds.  Assumes a 1, 8, 12, 16, 20 or 24 MHz clock. */\nvoid delayMicroseconds(unsigned int us)\n{\n\t// call = 4 cycles + 2 to 4 cycles to init us(2 for constant delay, 4 for variable)\n\n\t// calling avrlib's delay_us() function with low values (e.g. 1 or\n\t// 2 microseconds) gives delays longer than desired.\n\t//delay_us(us);\n#if F_CPU \u003e= 24000000L\n\t// for the 24 MHz clock for the aventurous ones, trying to overclock\n\n\t// zero delay fix\n\tif (!us) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/6 of a microsecond (4 cycles)\n\t// per iteration, so execute it six times for each microsecond of\n\t// delay requested.\n\tus *= 6; // x6 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 22 (24) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //=2 cycles\n\n#elif F_CPU \u003e= 20000000L\n\t// for the 20 MHz clock on rare Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 18 (20) cycles, which is 1us\n\t__asm__ __volatile__ (\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\"); //just waiting 4 cycles\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/5 of a microsecond (4 cycles)\n\t// per iteration, so execute it five times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 2) + us; // x5 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 26 (28) cycles above, remove 7, (7*4=28)\n\t// us is at least 10 so we can substract 7\n\tus -= 7; // 2 cycles\n\n#elif F_CPU \u003e= 16000000L\n\t// for the 16 MHz clock on most Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/4 of a microsecond (4 cycles)\n\t// per iteration, so execute it four times for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 2; // x4 us, = 4 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 19 (21) cycles above, remove 5, (5*4=20)\n\t// us is at least 8 so we can substract 5\n\tus -= 5; // = 2 cycles,\n\n#elif F_CPU \u003e= 12000000L\n\t// for the 12 MHz clock if somebody is working with USB\n\n\t// for a 1 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1.5us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/3 of a microsecond (4 cycles)\n\t// per iteration, so execute it three times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 1) + us; // x3 us, = 5 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 20 (22) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //2 cycles\n\n#elif F_CPU \u003e= 8000000L\n\t// for the 8 MHz internal clock\n\n\t// for a 1 and 2 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 2us\n\tif (us \u003c= 2) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/2 of a microsecond (4 cycles)\n\t// per iteration, so execute it twice for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 1; //x2 us, = 2 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 17 (19) cycles above, remove 4, (4*4=16)\n\t// us is at least 6 so we can substract 4\n\tus -= 4; // = 2 cycles\n\n#else\n\t// for the 1 MHz internal clock (default settings for common Atmega microcontrollers)\n\n\t// the overhead of the function calls is 14 (16) cycles\n\tif (us \u003c= 16) return; //= 3 cycles, (4 when true)\n\tif (us \u003c= 25) return; //= 3 cycles, (4 when true), (must be at least 25 if we want to substract 22)\n\n\t// compensate for the time taken by the preceeding and next commands (about 22 cycles)\n\tus -= 22; // = 2 cycles\n\t// the following loop takes 4 microseconds (4 cycles)\n\t// per iteration, so execute it us/4 times\n\t// us is at least 4, divided by 4 gives us 1 (no zero delay bug)\n\tus \u003e\u003e= 2; // us div 4, = 4 cycles\n\t\n\n#endif\n\n\t// busy wait\n\t__asm__ __volatile__ (\n\t\t\"1: sbiw %0,1\" \"\\n\\t\" // 2 cycles\n\t\t\"brne 1b\" : \"=w\" (us) : \"0\" (us) // 2 cycles\n\t);\n\t// return = 4 cycles\n}\n\nvoid init()\n{\n\t// this needs to be called before setup() or some functions won't\n\t// work there\n\tsei();\n\t\n\t// on the ATmega168, timer 0 is also used for fast hardware pwm\n\t// (using phase-correct PWM would mean that timer 0 overflowed half as often\n\t// resulting in different millis() behavior on the ATmega8 and ATmega168)\n#if defined(TCCR0A) \u0026\u0026 defined(WGM01)\n\tsbi(TCCR0A, WGM01);\n\tsbi(TCCR0A, WGM00);\n#endif\n\n\t// set timer 0 prescale factor to 64\n#if defined(__AVR_ATmega128__)\n\t// CPU specific: different values for the ATmega128\n\tsbi(TCCR0, CS02);\n#elif defined(TCCR0) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard atmega8\n\tsbi(TCCR0, CS01);\n\tsbi(TCCR0, CS00);\n#elif defined(TCCR0B) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard 168/328/1280/2560\n\tsbi(TCCR0B, CS01);\n\tsbi(TCCR0B, CS00);\n#elif defined(TCCR0A) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the __AVR_ATmega645__ series\n\tsbi(TCCR0A, CS01);\n\tsbi(TCCR0A, CS00);\n#else\n\t#error Timer 0 prescale factor 64 not set correctly\n#endif\n\n\t// enable timer 0 overflow interrupt\n#if defined(TIMSK) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK, TOIE0);\n#elif defined(TIMSK0) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK0, TOIE0);\n#else\n\t#error\tTimer 0 overflow interrupt not set correctly\n#endif\n\n\t// timers 1 and 2 are used for phase-correct hardware pwm\n\t// this is better for motors as it ensures an even waveform\n\t// note, however, that fast pwm mode can achieve a frequency of up\n\t// 8 MHz (with a 16 MHz clock) at 50% duty cycle\n\n#if defined(TCCR1B) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tTCCR1B = 0;\n\n\t// set timer 1 prescale factor to 64\n\tsbi(TCCR1B, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1B, CS10);\n#endif\n#elif defined(TCCR1) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tsbi(TCCR1, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1, CS10);\n#endif\n#endif\n\t// put timer 1 in 8-bit phase correct pwm mode\n#if defined(TCCR1A) \u0026\u0026 defined(WGM10)\n\tsbi(TCCR1A, WGM10);\n#endif\n\n\t// set timer 2 prescale factor to 64\n#if defined(TCCR2) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2, CS22);\n#elif defined(TCCR2B) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2B, CS22);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n\t// configure timer 2 for phase correct pwm (8-bit)\n#if defined(TCCR2) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2, WGM20);\n#elif defined(TCCR2A) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2A, WGM20);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n#if defined(TCCR3B) \u0026\u0026 defined(CS31) \u0026\u0026 defined(WGM30)\n\tsbi(TCCR3B, CS31);\t\t// set timer 3 prescale factor to 64\n\tsbi(TCCR3B, CS30);\n\tsbi(TCCR3A, WGM30);\t\t// put timer 3 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(TCCR4A) \u0026\u0026 defined(TCCR4B) \u0026\u0026 defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */\n\tsbi(TCCR4B, CS42);\t\t// set timer4 prescale factor to 64\n\tsbi(TCCR4B, CS41);\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4D, WGM40);\t\t// put timer 4 in phase- and frequency-correct PWM mode\t\n\tsbi(TCCR4A, PWM4A);\t\t// enable PWM mode for comparator OCR4A\n\tsbi(TCCR4C, PWM4D);\t\t// enable PWM mode for comparator OCR4D\n#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */\n#if defined(TCCR4B) \u0026\u0026 defined(CS41) \u0026\u0026 defined(WGM40)\n\tsbi(TCCR4B, CS41);\t\t// set timer 4 prescale factor to 64\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4A, WGM40);\t\t// put timer 4 in 8-bit phase correct pwm mode\n#endif\n#endif /* end timer4 block for ATMEGA1280/2560 and similar */\t\n\n#if defined(TCCR5B) \u0026\u0026 defined(CS51) \u0026\u0026 defined(WGM50)\n\tsbi(TCCR5B, CS51);\t\t// set timer 5 prescale factor to 64\n\tsbi(TCCR5B, CS50);\n\tsbi(TCCR5A, WGM50);\t\t// put timer 5 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(ADCSRA)\n\t// set a2d prescaler so we are inside the desired 50-200 KHz range.\n\t#if F_CPU \u003e= 16000000 // 16 MHz / 128 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 8000000 // 8 MHz / 64 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 4000000 // 4 MHz / 32 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 2000000 // 2 MHz / 16 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 1000000 // 1 MHz / 8 = 125 KHz\n\t\tcbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#else // 128 kHz / 2 = 64 KHz -\u003e This is the closest you can get, the prescaler is 2\n\t\tcbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#endif\n\t// enable a2d conversions\n\tsbi(ADCSRA, ADEN);\n#endif\n\n\t// the bootloader connects pins 0 and 1 to the USART; disconnect them\n\t// here so they can be used as normal digital i/o; they will be\n\t// reconnected in Serial.begin()\n#if defined(UCSRB)\n\tUCSRB = 0;\n#elif defined(UCSR0B)\n\tUCSR0B = 0;\n#endif\n}\n"}},"jsonrpc":"2.0"}Content-Length: 183

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":12}},"id":324,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":324,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `microServo`  \n\n---\nType: `class Servo`  \n\n---\n```cpp\nServo microServo\n```"},"range":{"end":{"character":14,"line":58},"start":{"character":4,"line":58}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":12}},"id":325,"jsonrpc":"2.0"}
<<<
Content-Length: 565

{"id":325,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}}},{"kind":1,"range":{"end":{"character":12,"line":32},"start":{"character":2,"line":32}}},{"kind":1,"range":{"end":{"character":14,"line":47},"start":{"character":4,"line":47}}},{"kind":1,"range":{"end":{"character":14,"line":49},"start":{"character":4,"line":49}}},{"kind":1,"range":{"end":{"character":14,"line":56},"start":{"character":4,"line":56}}},{"kind":1,"range":{"end":{"character":14,"line":58},"start":{"character":4,"line":58}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":58,"character":4},"end":{"line":58,"character":14}},"context":{"diagnostics":[]}},"id":326,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":326,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":12}},"id":327,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":327,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":12}},"id":328,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":328,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":12}},"id":329,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":329,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":10},"end":{"line":57,"character":13}},"context":{"diagnostics":[]}},"id":330,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":330,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":13,"line":57},"start":{"character":10,"line":57}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":12}},"id":331,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":331,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":12}},"id":332,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":332,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `microServo`  \n\n---\nType: `class Servo`  \n\n---\n```cpp\nServo microServo\n```"},"range":{"end":{"character":14,"line":58},"start":{"character":4,"line":58}}}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":333,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":333,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":334,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":334,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":335,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":335,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 356

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":282},"contentChanges":[{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":13}},"rangeLength":3,"text":"150"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":336,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":336,"jsonrpc":"2.0","result":[]}Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":282}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":16}},"id":337,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":337,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":59,"character":13},"end":{"line":59,"character":13}},"context":{"diagnostics":[]}},"id":338,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":338,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":49,"character":9}},"id":339,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":339,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":11}},"id":340,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":340,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":11}},"id":341,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":341,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":10},"end":{"line":57,"character":13}},"context":{"diagnostics":[]}},"id":342,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":342,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":13,"line":57},"start":{"character":10,"line":57}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":52,"character":11}},"id":343,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":343,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":50,"character":11}},"id":344,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":344,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":50,"character":10}},"id":345,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":345,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":50,"character":11}},"id":346,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":346,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":50,"character":11}},"id":347,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":347,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":50,"character":11}},"id":348,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":348,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 356

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":283},"contentChanges":[{"range":{"start":{"line":50,"character":10},"end":{"line":50,"character":13}},"rangeLength":3,"text":"150"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":12}},"id":349,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":349,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":283}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":13}},"id":350,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":350,"jsonrpc":"2.0","result":[{"range":{"end":{"character":10,"line":105},"start":{"character":5,"line":105}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":50,"character":13},"end":{"line":50,"character":13}},"context":{"diagnostics":[]}},"id":351,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":351,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 13396

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c","languageId":"c","version":1,"text":"/*\n  wiring.c - Partial implementation of the Wiring API for the ATmega8.\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#include \"wiring_private.h\"\n\n// the prescaler is set so that timer0 ticks every 64 clock cycles, and the\n// the overflow handler is called every 256 ticks.\n#define MICROSECONDS_PER_TIMER0_OVERFLOW (clockCyclesToMicroseconds(64 * 256))\n\n// the whole number of milliseconds per timer0 overflow\n#define MILLIS_INC (MICROSECONDS_PER_TIMER0_OVERFLOW / 1000)\n\n// the fractional number of milliseconds per timer0 overflow. we shift right\n// by three to fit these numbers into a byte. (for the clock speeds we care\n// about - 8 and 16 MHz - this doesn't lose precision.)\n#define FRACT_INC ((MICROSECONDS_PER_TIMER0_OVERFLOW % 1000) \u003e\u003e 3)\n#define FRACT_MAX (1000 \u003e\u003e 3)\n\nvolatile unsigned long timer0_overflow_count = 0;\nvolatile unsigned long timer0_millis = 0;\nstatic unsigned char timer0_fract = 0;\n\n#if defined(TIM0_OVF_vect)\nISR(TIM0_OVF_vect)\n#else\nISR(TIMER0_OVF_vect)\n#endif\n{\n\t// copy these to local variables so they can be stored in registers\n\t// (volatile variables must be read from memory on every access)\n\tunsigned long m = timer0_millis;\n\tunsigned char f = timer0_fract;\n\n\tm += MILLIS_INC;\n\tf += FRACT_INC;\n\tif (f \u003e= FRACT_MAX) {\n\t\tf -= FRACT_MAX;\n\t\tm += 1;\n\t}\n\n\ttimer0_fract = f;\n\ttimer0_millis = m;\n\ttimer0_overflow_count++;\n}\n\nunsigned long millis()\n{\n\tunsigned long m;\n\tuint8_t oldSREG = SREG;\n\n\t// disable interrupts while we read timer0_millis or we might get an\n\t// inconsistent value (e.g. in the middle of a write to timer0_millis)\n\tcli();\n\tm = timer0_millis;\n\tSREG = oldSREG;\n\n\treturn m;\n}\n\nunsigned long micros() {\n\tunsigned long m;\n\tuint8_t oldSREG = SREG, t;\n\t\n\tcli();\n\tm = timer0_overflow_count;\n#if defined(TCNT0)\n\tt = TCNT0;\n#elif defined(TCNT0L)\n\tt = TCNT0L;\n#else\n\t#error TIMER 0 not defined\n#endif\n\n#ifdef TIFR0\n\tif ((TIFR0 \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#else\n\tif ((TIFR \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#endif\n\n\tSREG = oldSREG;\n\t\n\treturn ((m \u003c\u003c 8) + t) * (64 / clockCyclesPerMicrosecond());\n}\n\nvoid delay(unsigned long ms)\n{\n\tuint32_t start = micros();\n\n\twhile (ms \u003e 0) {\n\t\tyield();\n\t\twhile ( ms \u003e 0 \u0026\u0026 (micros() - start) \u003e= 1000) {\n\t\t\tms--;\n\t\t\tstart += 1000;\n\t\t}\n\t}\n}\n\n/* Delay for the given number of microseconds.  Assumes a 1, 8, 12, 16, 20 or 24 MHz clock. */\nvoid delayMicroseconds(unsigned int us)\n{\n\t// call = 4 cycles + 2 to 4 cycles to init us(2 for constant delay, 4 for variable)\n\n\t// calling avrlib's delay_us() function with low values (e.g. 1 or\n\t// 2 microseconds) gives delays longer than desired.\n\t//delay_us(us);\n#if F_CPU \u003e= 24000000L\n\t// for the 24 MHz clock for the aventurous ones, trying to overclock\n\n\t// zero delay fix\n\tif (!us) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/6 of a microsecond (4 cycles)\n\t// per iteration, so execute it six times for each microsecond of\n\t// delay requested.\n\tus *= 6; // x6 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 22 (24) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //=2 cycles\n\n#elif F_CPU \u003e= 20000000L\n\t// for the 20 MHz clock on rare Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 18 (20) cycles, which is 1us\n\t__asm__ __volatile__ (\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\"); //just waiting 4 cycles\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/5 of a microsecond (4 cycles)\n\t// per iteration, so execute it five times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 2) + us; // x5 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 26 (28) cycles above, remove 7, (7*4=28)\n\t// us is at least 10 so we can substract 7\n\tus -= 7; // 2 cycles\n\n#elif F_CPU \u003e= 16000000L\n\t// for the 16 MHz clock on most Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/4 of a microsecond (4 cycles)\n\t// per iteration, so execute it four times for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 2; // x4 us, = 4 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 19 (21) cycles above, remove 5, (5*4=20)\n\t// us is at least 8 so we can substract 5\n\tus -= 5; // = 2 cycles,\n\n#elif F_CPU \u003e= 12000000L\n\t// for the 12 MHz clock if somebody is working with USB\n\n\t// for a 1 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1.5us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/3 of a microsecond (4 cycles)\n\t// per iteration, so execute it three times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 1) + us; // x3 us, = 5 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 20 (22) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //2 cycles\n\n#elif F_CPU \u003e= 8000000L\n\t// for the 8 MHz internal clock\n\n\t// for a 1 and 2 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 2us\n\tif (us \u003c= 2) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/2 of a microsecond (4 cycles)\n\t// per iteration, so execute it twice for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 1; //x2 us, = 2 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 17 (19) cycles above, remove 4, (4*4=16)\n\t// us is at least 6 so we can substract 4\n\tus -= 4; // = 2 cycles\n\n#else\n\t// for the 1 MHz internal clock (default settings for common Atmega microcontrollers)\n\n\t// the overhead of the function calls is 14 (16) cycles\n\tif (us \u003c= 16) return; //= 3 cycles, (4 when true)\n\tif (us \u003c= 25) return; //= 3 cycles, (4 when true), (must be at least 25 if we want to substract 22)\n\n\t// compensate for the time taken by the preceeding and next commands (about 22 cycles)\n\tus -= 22; // = 2 cycles\n\t// the following loop takes 4 microseconds (4 cycles)\n\t// per iteration, so execute it us/4 times\n\t// us is at least 4, divided by 4 gives us 1 (no zero delay bug)\n\tus \u003e\u003e= 2; // us div 4, = 4 cycles\n\t\n\n#endif\n\n\t// busy wait\n\t__asm__ __volatile__ (\n\t\t\"1: sbiw %0,1\" \"\\n\\t\" // 2 cycles\n\t\t\"brne 1b\" : \"=w\" (us) : \"0\" (us) // 2 cycles\n\t);\n\t// return = 4 cycles\n}\n\nvoid init()\n{\n\t// this needs to be called before setup() or some functions won't\n\t// work there\n\tsei();\n\t\n\t// on the ATmega168, timer 0 is also used for fast hardware pwm\n\t// (using phase-correct PWM would mean that timer 0 overflowed half as often\n\t// resulting in different millis() behavior on the ATmega8 and ATmega168)\n#if defined(TCCR0A) \u0026\u0026 defined(WGM01)\n\tsbi(TCCR0A, WGM01);\n\tsbi(TCCR0A, WGM00);\n#endif\n\n\t// set timer 0 prescale factor to 64\n#if defined(__AVR_ATmega128__)\n\t// CPU specific: different values for the ATmega128\n\tsbi(TCCR0, CS02);\n#elif defined(TCCR0) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard atmega8\n\tsbi(TCCR0, CS01);\n\tsbi(TCCR0, CS00);\n#elif defined(TCCR0B) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard 168/328/1280/2560\n\tsbi(TCCR0B, CS01);\n\tsbi(TCCR0B, CS00);\n#elif defined(TCCR0A) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the __AVR_ATmega645__ series\n\tsbi(TCCR0A, CS01);\n\tsbi(TCCR0A, CS00);\n#else\n\t#error Timer 0 prescale factor 64 not set correctly\n#endif\n\n\t// enable timer 0 overflow interrupt\n#if defined(TIMSK) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK, TOIE0);\n#elif defined(TIMSK0) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK0, TOIE0);\n#else\n\t#error\tTimer 0 overflow interrupt not set correctly\n#endif\n\n\t// timers 1 and 2 are used for phase-correct hardware pwm\n\t// this is better for motors as it ensures an even waveform\n\t// note, however, that fast pwm mode can achieve a frequency of up\n\t// 8 MHz (with a 16 MHz clock) at 50% duty cycle\n\n#if defined(TCCR1B) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tTCCR1B = 0;\n\n\t// set timer 1 prescale factor to 64\n\tsbi(TCCR1B, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1B, CS10);\n#endif\n#elif defined(TCCR1) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tsbi(TCCR1, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1, CS10);\n#endif\n#endif\n\t// put timer 1 in 8-bit phase correct pwm mode\n#if defined(TCCR1A) \u0026\u0026 defined(WGM10)\n\tsbi(TCCR1A, WGM10);\n#endif\n\n\t// set timer 2 prescale factor to 64\n#if defined(TCCR2) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2, CS22);\n#elif defined(TCCR2B) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2B, CS22);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n\t// configure timer 2 for phase correct pwm (8-bit)\n#if defined(TCCR2) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2, WGM20);\n#elif defined(TCCR2A) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2A, WGM20);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n#if defined(TCCR3B) \u0026\u0026 defined(CS31) \u0026\u0026 defined(WGM30)\n\tsbi(TCCR3B, CS31);\t\t// set timer 3 prescale factor to 64\n\tsbi(TCCR3B, CS30);\n\tsbi(TCCR3A, WGM30);\t\t// put timer 3 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(TCCR4A) \u0026\u0026 defined(TCCR4B) \u0026\u0026 defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */\n\tsbi(TCCR4B, CS42);\t\t// set timer4 prescale factor to 64\n\tsbi(TCCR4B, CS41);\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4D, WGM40);\t\t// put timer 4 in phase- and frequency-correct PWM mode\t\n\tsbi(TCCR4A, PWM4A);\t\t// enable PWM mode for comparator OCR4A\n\tsbi(TCCR4C, PWM4D);\t\t// enable PWM mode for comparator OCR4D\n#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */\n#if defined(TCCR4B) \u0026\u0026 defined(CS41) \u0026\u0026 defined(WGM40)\n\tsbi(TCCR4B, CS41);\t\t// set timer 4 prescale factor to 64\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4A, WGM40);\t\t// put timer 4 in 8-bit phase correct pwm mode\n#endif\n#endif /* end timer4 block for ATMEGA1280/2560 and similar */\t\n\n#if defined(TCCR5B) \u0026\u0026 defined(CS51) \u0026\u0026 defined(WGM50)\n\tsbi(TCCR5B, CS51);\t\t// set timer 5 prescale factor to 64\n\tsbi(TCCR5B, CS50);\n\tsbi(TCCR5A, WGM50);\t\t// put timer 5 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(ADCSRA)\n\t// set a2d prescaler so we are inside the desired 50-200 KHz range.\n\t#if F_CPU \u003e= 16000000 // 16 MHz / 128 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 8000000 // 8 MHz / 64 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 4000000 // 4 MHz / 32 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 2000000 // 2 MHz / 16 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 1000000 // 1 MHz / 8 = 125 KHz\n\t\tcbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#else // 128 kHz / 2 = 64 KHz -\u003e This is the closest you can get, the prescaler is 2\n\t\tcbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#endif\n\t// enable a2d conversions\n\tsbi(ADCSRA, ADEN);\n#endif\n\n\t// the bootloader connects pins 0 and 1 to the USART; disconnect them\n\t// here so they can be used as normal digital i/o; they will be\n\t// reconnected in Serial.begin()\n#if defined(UCSRB)\n\tUCSRB = 0;\n#elif defined(UCSR0B)\n\tUCSR0B = 0;\n#endif\n}\n"}},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":13}},"id":352,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":352,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 183

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":11}},"id":353,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":353,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `microServo`  \n\n---\nType: `class Servo`  \n\n---\n```cpp\nServo microServo\n```"},"range":{"end":{"character":14,"line":58},"start":{"character":4,"line":58}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":354,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":354,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":355,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":355,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":12}},"id":356,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":356,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":13}},"context":{"diagnostics":[]}},"id":357,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":357,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":13,"line":59},"start":{"character":10,"line":59}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":50,"character":9}},"id":358,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":358,"jsonrpc":"2.0","result":[{"range":{"end":{"character":10,"line":105},"start":{"character":5,"line":105}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}]}
>>>
Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 13396

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c","languageId":"c","version":1,"text":"/*\n  wiring.c - Partial implementation of the Wiring API for the ATmega8.\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#include \"wiring_private.h\"\n\n// the prescaler is set so that timer0 ticks every 64 clock cycles, and the\n// the overflow handler is called every 256 ticks.\n#define MICROSECONDS_PER_TIMER0_OVERFLOW (clockCyclesToMicroseconds(64 * 256))\n\n// the whole number of milliseconds per timer0 overflow\n#define MILLIS_INC (MICROSECONDS_PER_TIMER0_OVERFLOW / 1000)\n\n// the fractional number of milliseconds per timer0 overflow. we shift right\n// by three to fit these numbers into a byte. (for the clock speeds we care\n// about - 8 and 16 MHz - this doesn't lose precision.)\n#define FRACT_INC ((MICROSECONDS_PER_TIMER0_OVERFLOW % 1000) \u003e\u003e 3)\n#define FRACT_MAX (1000 \u003e\u003e 3)\n\nvolatile unsigned long timer0_overflow_count = 0;\nvolatile unsigned long timer0_millis = 0;\nstatic unsigned char timer0_fract = 0;\n\n#if defined(TIM0_OVF_vect)\nISR(TIM0_OVF_vect)\n#else\nISR(TIMER0_OVF_vect)\n#endif\n{\n\t// copy these to local variables so they can be stored in registers\n\t// (volatile variables must be read from memory on every access)\n\tunsigned long m = timer0_millis;\n\tunsigned char f = timer0_fract;\n\n\tm += MILLIS_INC;\n\tf += FRACT_INC;\n\tif (f \u003e= FRACT_MAX) {\n\t\tf -= FRACT_MAX;\n\t\tm += 1;\n\t}\n\n\ttimer0_fract = f;\n\ttimer0_millis = m;\n\ttimer0_overflow_count++;\n}\n\nunsigned long millis()\n{\n\tunsigned long m;\n\tuint8_t oldSREG = SREG;\n\n\t// disable interrupts while we read timer0_millis or we might get an\n\t// inconsistent value (e.g. in the middle of a write to timer0_millis)\n\tcli();\n\tm = timer0_millis;\n\tSREG = oldSREG;\n\n\treturn m;\n}\n\nunsigned long micros() {\n\tunsigned long m;\n\tuint8_t oldSREG = SREG, t;\n\t\n\tcli();\n\tm = timer0_overflow_count;\n#if defined(TCNT0)\n\tt = TCNT0;\n#elif defined(TCNT0L)\n\tt = TCNT0L;\n#else\n\t#error TIMER 0 not defined\n#endif\n\n#ifdef TIFR0\n\tif ((TIFR0 \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#else\n\tif ((TIFR \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#endif\n\n\tSREG = oldSREG;\n\t\n\treturn ((m \u003c\u003c 8) + t) * (64 / clockCyclesPerMicrosecond());\n}\n\nvoid delay(unsigned long ms)\n{\n\tuint32_t start = micros();\n\n\twhile (ms \u003e 0) {\n\t\tyield();\n\t\twhile ( ms \u003e 0 \u0026\u0026 (micros() - start) \u003e= 1000) {\n\t\t\tms--;\n\t\t\tstart += 1000;\n\t\t}\n\t}\n}\n\n/* Delay for the given number of microseconds.  Assumes a 1, 8, 12, 16, 20 or 24 MHz clock. */\nvoid delayMicroseconds(unsigned int us)\n{\n\t// call = 4 cycles + 2 to 4 cycles to init us(2 for constant delay, 4 for variable)\n\n\t// calling avrlib's delay_us() function with low values (e.g. 1 or\n\t// 2 microseconds) gives delays longer than desired.\n\t//delay_us(us);\n#if F_CPU \u003e= 24000000L\n\t// for the 24 MHz clock for the aventurous ones, trying to overclock\n\n\t// zero delay fix\n\tif (!us) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/6 of a microsecond (4 cycles)\n\t// per iteration, so execute it six times for each microsecond of\n\t// delay requested.\n\tus *= 6; // x6 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 22 (24) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //=2 cycles\n\n#elif F_CPU \u003e= 20000000L\n\t// for the 20 MHz clock on rare Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 18 (20) cycles, which is 1us\n\t__asm__ __volatile__ (\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\"); //just waiting 4 cycles\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/5 of a microsecond (4 cycles)\n\t// per iteration, so execute it five times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 2) + us; // x5 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 26 (28) cycles above, remove 7, (7*4=28)\n\t// us is at least 10 so we can substract 7\n\tus -= 7; // 2 cycles\n\n#elif F_CPU \u003e= 16000000L\n\t// for the 16 MHz clock on most Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/4 of a microsecond (4 cycles)\n\t// per iteration, so execute it four times for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 2; // x4 us, = 4 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 19 (21) cycles above, remove 5, (5*4=20)\n\t// us is at least 8 so we can substract 5\n\tus -= 5; // = 2 cycles,\n\n#elif F_CPU \u003e= 12000000L\n\t// for the 12 MHz clock if somebody is working with USB\n\n\t// for a 1 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1.5us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/3 of a microsecond (4 cycles)\n\t// per iteration, so execute it three times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 1) + us; // x3 us, = 5 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 20 (22) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //2 cycles\n\n#elif F_CPU \u003e= 8000000L\n\t// for the 8 MHz internal clock\n\n\t// for a 1 and 2 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 2us\n\tif (us \u003c= 2) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/2 of a microsecond (4 cycles)\n\t// per iteration, so execute it twice for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 1; //x2 us, = 2 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 17 (19) cycles above, remove 4, (4*4=16)\n\t// us is at least 6 so we can substract 4\n\tus -= 4; // = 2 cycles\n\n#else\n\t// for the 1 MHz internal clock (default settings for common Atmega microcontrollers)\n\n\t// the overhead of the function calls is 14 (16) cycles\n\tif (us \u003c= 16) return; //= 3 cycles, (4 when true)\n\tif (us \u003c= 25) return; //= 3 cycles, (4 when true), (must be at least 25 if we want to substract 22)\n\n\t// compensate for the time taken by the preceeding and next commands (about 22 cycles)\n\tus -= 22; // = 2 cycles\n\t// the following loop takes 4 microseconds (4 cycles)\n\t// per iteration, so execute it us/4 times\n\t// us is at least 4, divided by 4 gives us 1 (no zero delay bug)\n\tus \u003e\u003e= 2; // us div 4, = 4 cycles\n\t\n\n#endif\n\n\t// busy wait\n\t__asm__ __volatile__ (\n\t\t\"1: sbiw %0,1\" \"\\n\\t\" // 2 cycles\n\t\t\"brne 1b\" : \"=w\" (us) : \"0\" (us) // 2 cycles\n\t);\n\t// return = 4 cycles\n}\n\nvoid init()\n{\n\t// this needs to be called before setup() or some functions won't\n\t// work there\n\tsei();\n\t\n\t// on the ATmega168, timer 0 is also used for fast hardware pwm\n\t// (using phase-correct PWM would mean that timer 0 overflowed half as often\n\t// resulting in different millis() behavior on the ATmega8 and ATmega168)\n#if defined(TCCR0A) \u0026\u0026 defined(WGM01)\n\tsbi(TCCR0A, WGM01);\n\tsbi(TCCR0A, WGM00);\n#endif\n\n\t// set timer 0 prescale factor to 64\n#if defined(__AVR_ATmega128__)\n\t// CPU specific: different values for the ATmega128\n\tsbi(TCCR0, CS02);\n#elif defined(TCCR0) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard atmega8\n\tsbi(TCCR0, CS01);\n\tsbi(TCCR0, CS00);\n#elif defined(TCCR0B) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard 168/328/1280/2560\n\tsbi(TCCR0B, CS01);\n\tsbi(TCCR0B, CS00);\n#elif defined(TCCR0A) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the __AVR_ATmega645__ series\n\tsbi(TCCR0A, CS01);\n\tsbi(TCCR0A, CS00);\n#else\n\t#error Timer 0 prescale factor 64 not set correctly\n#endif\n\n\t// enable timer 0 overflow interrupt\n#if defined(TIMSK) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK, TOIE0);\n#elif defined(TIMSK0) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK0, TOIE0);\n#else\n\t#error\tTimer 0 overflow interrupt not set correctly\n#endif\n\n\t// timers 1 and 2 are used for phase-correct hardware pwm\n\t// this is better for motors as it ensures an even waveform\n\t// note, however, that fast pwm mode can achieve a frequency of up\n\t// 8 MHz (with a 16 MHz clock) at 50% duty cycle\n\n#if defined(TCCR1B) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tTCCR1B = 0;\n\n\t// set timer 1 prescale factor to 64\n\tsbi(TCCR1B, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1B, CS10);\n#endif\n#elif defined(TCCR1) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tsbi(TCCR1, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1, CS10);\n#endif\n#endif\n\t// put timer 1 in 8-bit phase correct pwm mode\n#if defined(TCCR1A) \u0026\u0026 defined(WGM10)\n\tsbi(TCCR1A, WGM10);\n#endif\n\n\t// set timer 2 prescale factor to 64\n#if defined(TCCR2) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2, CS22);\n#elif defined(TCCR2B) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2B, CS22);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n\t// configure timer 2 for phase correct pwm (8-bit)\n#if defined(TCCR2) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2, WGM20);\n#elif defined(TCCR2A) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2A, WGM20);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n#if defined(TCCR3B) \u0026\u0026 defined(CS31) \u0026\u0026 defined(WGM30)\n\tsbi(TCCR3B, CS31);\t\t// set timer 3 prescale factor to 64\n\tsbi(TCCR3B, CS30);\n\tsbi(TCCR3A, WGM30);\t\t// put timer 3 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(TCCR4A) \u0026\u0026 defined(TCCR4B) \u0026\u0026 defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */\n\tsbi(TCCR4B, CS42);\t\t// set timer4 prescale factor to 64\n\tsbi(TCCR4B, CS41);\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4D, WGM40);\t\t// put timer 4 in phase- and frequency-correct PWM mode\t\n\tsbi(TCCR4A, PWM4A);\t\t// enable PWM mode for comparator OCR4A\n\tsbi(TCCR4C, PWM4D);\t\t// enable PWM mode for comparator OCR4D\n#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */\n#if defined(TCCR4B) \u0026\u0026 defined(CS41) \u0026\u0026 defined(WGM40)\n\tsbi(TCCR4B, CS41);\t\t// set timer 4 prescale factor to 64\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4A, WGM40);\t\t// put timer 4 in 8-bit phase correct pwm mode\n#endif\n#endif /* end timer4 block for ATMEGA1280/2560 and similar */\t\n\n#if defined(TCCR5B) \u0026\u0026 defined(CS51) \u0026\u0026 defined(WGM50)\n\tsbi(TCCR5B, CS51);\t\t// set timer 5 prescale factor to 64\n\tsbi(TCCR5B, CS50);\n\tsbi(TCCR5A, WGM50);\t\t// put timer 5 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(ADCSRA)\n\t// set a2d prescaler so we are inside the desired 50-200 KHz range.\n\t#if F_CPU \u003e= 16000000 // 16 MHz / 128 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 8000000 // 8 MHz / 64 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 4000000 // 4 MHz / 32 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 2000000 // 2 MHz / 16 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 1000000 // 1 MHz / 8 = 125 KHz\n\t\tcbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#else // 128 kHz / 2 = 64 KHz -\u003e This is the closest you can get, the prescaler is 2\n\t\tcbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#endif\n\t// enable a2d conversions\n\tsbi(ADCSRA, ADEN);\n#endif\n\n\t// the bootloader connects pins 0 and 1 to the USART; disconnect them\n\t// here so they can be used as normal digital i/o; they will be\n\t// reconnected in Serial.begin()\n#if defined(UCSRB)\n\tUCSRB = 0;\n#elif defined(UCSR0B)\n\tUCSR0B = 0;\n#endif\n}\n"}},"jsonrpc":"2.0"}Content-Length: 183

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":49,"character":9}},"id":359,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":359,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":12},"start":{"character":6,"line":12}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":9}},"id":360,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":360,"jsonrpc":"2.0","result":[{"range":{"end":{"character":10,"line":105},"start":{"character":5,"line":105}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}]}
>>>
Content-Length: 13396

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c","languageId":"c","version":1,"text":"/*\n  wiring.c - Partial implementation of the Wiring API for the ATmega8.\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#include \"wiring_private.h\"\n\n// the prescaler is set so that timer0 ticks every 64 clock cycles, and the\n// the overflow handler is called every 256 ticks.\n#define MICROSECONDS_PER_TIMER0_OVERFLOW (clockCyclesToMicroseconds(64 * 256))\n\n// the whole number of milliseconds per timer0 overflow\n#define MILLIS_INC (MICROSECONDS_PER_TIMER0_OVERFLOW / 1000)\n\n// the fractional number of milliseconds per timer0 overflow. we shift right\n// by three to fit these numbers into a byte. (for the clock speeds we care\n// about - 8 and 16 MHz - this doesn't lose precision.)\n#define FRACT_INC ((MICROSECONDS_PER_TIMER0_OVERFLOW % 1000) \u003e\u003e 3)\n#define FRACT_MAX (1000 \u003e\u003e 3)\n\nvolatile unsigned long timer0_overflow_count = 0;\nvolatile unsigned long timer0_millis = 0;\nstatic unsigned char timer0_fract = 0;\n\n#if defined(TIM0_OVF_vect)\nISR(TIM0_OVF_vect)\n#else\nISR(TIMER0_OVF_vect)\n#endif\n{\n\t// copy these to local variables so they can be stored in registers\n\t// (volatile variables must be read from memory on every access)\n\tunsigned long m = timer0_millis;\n\tunsigned char f = timer0_fract;\n\n\tm += MILLIS_INC;\n\tf += FRACT_INC;\n\tif (f \u003e= FRACT_MAX) {\n\t\tf -= FRACT_MAX;\n\t\tm += 1;\n\t}\n\n\ttimer0_fract = f;\n\ttimer0_millis = m;\n\ttimer0_overflow_count++;\n}\n\nunsigned long millis()\n{\n\tunsigned long m;\n\tuint8_t oldSREG = SREG;\n\n\t// disable interrupts while we read timer0_millis or we might get an\n\t// inconsistent value (e.g. in the middle of a write to timer0_millis)\n\tcli();\n\tm = timer0_millis;\n\tSREG = oldSREG;\n\n\treturn m;\n}\n\nunsigned long micros() {\n\tunsigned long m;\n\tuint8_t oldSREG = SREG, t;\n\t\n\tcli();\n\tm = timer0_overflow_count;\n#if defined(TCNT0)\n\tt = TCNT0;\n#elif defined(TCNT0L)\n\tt = TCNT0L;\n#else\n\t#error TIMER 0 not defined\n#endif\n\n#ifdef TIFR0\n\tif ((TIFR0 \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#else\n\tif ((TIFR \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#endif\n\n\tSREG = oldSREG;\n\t\n\treturn ((m \u003c\u003c 8) + t) * (64 / clockCyclesPerMicrosecond());\n}\n\nvoid delay(unsigned long ms)\n{\n\tuint32_t start = micros();\n\n\twhile (ms \u003e 0) {\n\t\tyield();\n\t\twhile ( ms \u003e 0 \u0026\u0026 (micros() - start) \u003e= 1000) {\n\t\t\tms--;\n\t\t\tstart += 1000;\n\t\t}\n\t}\n}\n\n/* Delay for the given number of microseconds.  Assumes a 1, 8, 12, 16, 20 or 24 MHz clock. */\nvoid delayMicroseconds(unsigned int us)\n{\n\t// call = 4 cycles + 2 to 4 cycles to init us(2 for constant delay, 4 for variable)\n\n\t// calling avrlib's delay_us() function with low values (e.g. 1 or\n\t// 2 microseconds) gives delays longer than desired.\n\t//delay_us(us);\n#if F_CPU \u003e= 24000000L\n\t// for the 24 MHz clock for the aventurous ones, trying to overclock\n\n\t// zero delay fix\n\tif (!us) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/6 of a microsecond (4 cycles)\n\t// per iteration, so execute it six times for each microsecond of\n\t// delay requested.\n\tus *= 6; // x6 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 22 (24) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //=2 cycles\n\n#elif F_CPU \u003e= 20000000L\n\t// for the 20 MHz clock on rare Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 18 (20) cycles, which is 1us\n\t__asm__ __volatile__ (\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\"); //just waiting 4 cycles\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/5 of a microsecond (4 cycles)\n\t// per iteration, so execute it five times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 2) + us; // x5 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 26 (28) cycles above, remove 7, (7*4=28)\n\t// us is at least 10 so we can substract 7\n\tus -= 7; // 2 cycles\n\n#elif F_CPU \u003e= 16000000L\n\t// for the 16 MHz clock on most Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/4 of a microsecond (4 cycles)\n\t// per iteration, so execute it four times for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 2; // x4 us, = 4 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 19 (21) cycles above, remove 5, (5*4=20)\n\t// us is at least 8 so we can substract 5\n\tus -= 5; // = 2 cycles,\n\n#elif F_CPU \u003e= 12000000L\n\t// for the 12 MHz clock if somebody is working with USB\n\n\t// for a 1 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1.5us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/3 of a microsecond (4 cycles)\n\t// per iteration, so execute it three times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 1) + us; // x3 us, = 5 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 20 (22) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //2 cycles\n\n#elif F_CPU \u003e= 8000000L\n\t// for the 8 MHz internal clock\n\n\t// for a 1 and 2 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 2us\n\tif (us \u003c= 2) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/2 of a microsecond (4 cycles)\n\t// per iteration, so execute it twice for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 1; //x2 us, = 2 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 17 (19) cycles above, remove 4, (4*4=16)\n\t// us is at least 6 so we can substract 4\n\tus -= 4; // = 2 cycles\n\n#else\n\t// for the 1 MHz internal clock (default settings for common Atmega microcontrollers)\n\n\t// the overhead of the function calls is 14 (16) cycles\n\tif (us \u003c= 16) return; //= 3 cycles, (4 when true)\n\tif (us \u003c= 25) return; //= 3 cycles, (4 when true), (must be at least 25 if we want to substract 22)\n\n\t// compensate for the time taken by the preceeding and next commands (about 22 cycles)\n\tus -= 22; // = 2 cycles\n\t// the following loop takes 4 microseconds (4 cycles)\n\t// per iteration, so execute it us/4 times\n\t// us is at least 4, divided by 4 gives us 1 (no zero delay bug)\n\tus \u003e\u003e= 2; // us div 4, = 4 cycles\n\t\n\n#endif\n\n\t// busy wait\n\t__asm__ __volatile__ (\n\t\t\"1: sbiw %0,1\" \"\\n\\t\" // 2 cycles\n\t\t\"brne 1b\" : \"=w\" (us) : \"0\" (us) // 2 cycles\n\t);\n\t// return = 4 cycles\n}\n\nvoid init()\n{\n\t// this needs to be called before setup() or some functions won't\n\t// work there\n\tsei();\n\t\n\t// on the ATmega168, timer 0 is also used for fast hardware pwm\n\t// (using phase-correct PWM would mean that timer 0 overflowed half as often\n\t// resulting in different millis() behavior on the ATmega8 and ATmega168)\n#if defined(TCCR0A) \u0026\u0026 defined(WGM01)\n\tsbi(TCCR0A, WGM01);\n\tsbi(TCCR0A, WGM00);\n#endif\n\n\t// set timer 0 prescale factor to 64\n#if defined(__AVR_ATmega128__)\n\t// CPU specific: different values for the ATmega128\n\tsbi(TCCR0, CS02);\n#elif defined(TCCR0) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard atmega8\n\tsbi(TCCR0, CS01);\n\tsbi(TCCR0, CS00);\n#elif defined(TCCR0B) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard 168/328/1280/2560\n\tsbi(TCCR0B, CS01);\n\tsbi(TCCR0B, CS00);\n#elif defined(TCCR0A) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the __AVR_ATmega645__ series\n\tsbi(TCCR0A, CS01);\n\tsbi(TCCR0A, CS00);\n#else\n\t#error Timer 0 prescale factor 64 not set correctly\n#endif\n\n\t// enable timer 0 overflow interrupt\n#if defined(TIMSK) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK, TOIE0);\n#elif defined(TIMSK0) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK0, TOIE0);\n#else\n\t#error\tTimer 0 overflow interrupt not set correctly\n#endif\n\n\t// timers 1 and 2 are used for phase-correct hardware pwm\n\t// this is better for motors as it ensures an even waveform\n\t// note, however, that fast pwm mode can achieve a frequency of up\n\t// 8 MHz (with a 16 MHz clock) at 50% duty cycle\n\n#if defined(TCCR1B) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tTCCR1B = 0;\n\n\t// set timer 1 prescale factor to 64\n\tsbi(TCCR1B, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1B, CS10);\n#endif\n#elif defined(TCCR1) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tsbi(TCCR1, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1, CS10);\n#endif\n#endif\n\t// put timer 1 in 8-bit phase correct pwm mode\n#if defined(TCCR1A) \u0026\u0026 defined(WGM10)\n\tsbi(TCCR1A, WGM10);\n#endif\n\n\t// set timer 2 prescale factor to 64\n#if defined(TCCR2) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2, CS22);\n#elif defined(TCCR2B) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2B, CS22);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n\t// configure timer 2 for phase correct pwm (8-bit)\n#if defined(TCCR2) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2, WGM20);\n#elif defined(TCCR2A) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2A, WGM20);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n#if defined(TCCR3B) \u0026\u0026 defined(CS31) \u0026\u0026 defined(WGM30)\n\tsbi(TCCR3B, CS31);\t\t// set timer 3 prescale factor to 64\n\tsbi(TCCR3B, CS30);\n\tsbi(TCCR3A, WGM30);\t\t// put timer 3 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(TCCR4A) \u0026\u0026 defined(TCCR4B) \u0026\u0026 defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */\n\tsbi(TCCR4B, CS42);\t\t// set timer4 prescale factor to 64\n\tsbi(TCCR4B, CS41);\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4D, WGM40);\t\t// put timer 4 in phase- and frequency-correct PWM mode\t\n\tsbi(TCCR4A, PWM4A);\t\t// enable PWM mode for comparator OCR4A\n\tsbi(TCCR4C, PWM4D);\t\t// enable PWM mode for comparator OCR4D\n#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */\n#if defined(TCCR4B) \u0026\u0026 defined(CS41) \u0026\u0026 defined(WGM40)\n\tsbi(TCCR4B, CS41);\t\t// set timer 4 prescale factor to 64\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4A, WGM40);\t\t// put timer 4 in 8-bit phase correct pwm mode\n#endif\n#endif /* end timer4 block for ATMEGA1280/2560 and similar */\t\n\n#if defined(TCCR5B) \u0026\u0026 defined(CS51) \u0026\u0026 defined(WGM50)\n\tsbi(TCCR5B, CS51);\t\t// set timer 5 prescale factor to 64\n\tsbi(TCCR5B, CS50);\n\tsbi(TCCR5A, WGM50);\t\t// put timer 5 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(ADCSRA)\n\t// set a2d prescaler so we are inside the desired 50-200 KHz range.\n\t#if F_CPU \u003e= 16000000 // 16 MHz / 128 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 8000000 // 8 MHz / 64 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 4000000 // 4 MHz / 32 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 2000000 // 2 MHz / 16 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 1000000 // 1 MHz / 8 = 125 KHz\n\t\tcbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#else // 128 kHz / 2 = 64 KHz -\u003e This is the closest you can get, the prescaler is 2\n\t\tcbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#endif\n\t// enable a2d conversions\n\tsbi(ADCSRA, ADEN);\n#endif\n\n\t// the bootloader connects pins 0 and 1 to the USART; disconnect them\n\t// here so they can be used as normal digital i/o; they will be\n\t// reconnected in Serial.begin()\n#if defined(UCSRB)\n\tUCSRB = 0;\n#elif defined(UCSR0B)\n\tUCSR0B = 0;\n#endif\n}\n"}},"jsonrpc":"2.0"}Content-Length: 183

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":10}},"id":361,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":361,"jsonrpc":"2.0","result":[{"range":{"end":{"character":10,"line":105},"start":{"character":5,"line":105}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}]}
>>>
Content-Length: 13396

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c","languageId":"c","version":1,"text":"/*\n  wiring.c - Partial implementation of the Wiring API for the ATmega8.\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#include \"wiring_private.h\"\n\n// the prescaler is set so that timer0 ticks every 64 clock cycles, and the\n// the overflow handler is called every 256 ticks.\n#define MICROSECONDS_PER_TIMER0_OVERFLOW (clockCyclesToMicroseconds(64 * 256))\n\n// the whole number of milliseconds per timer0 overflow\n#define MILLIS_INC (MICROSECONDS_PER_TIMER0_OVERFLOW / 1000)\n\n// the fractional number of milliseconds per timer0 overflow. we shift right\n// by three to fit these numbers into a byte. (for the clock speeds we care\n// about - 8 and 16 MHz - this doesn't lose precision.)\n#define FRACT_INC ((MICROSECONDS_PER_TIMER0_OVERFLOW % 1000) \u003e\u003e 3)\n#define FRACT_MAX (1000 \u003e\u003e 3)\n\nvolatile unsigned long timer0_overflow_count = 0;\nvolatile unsigned long timer0_millis = 0;\nstatic unsigned char timer0_fract = 0;\n\n#if defined(TIM0_OVF_vect)\nISR(TIM0_OVF_vect)\n#else\nISR(TIMER0_OVF_vect)\n#endif\n{\n\t// copy these to local variables so they can be stored in registers\n\t// (volatile variables must be read from memory on every access)\n\tunsigned long m = timer0_millis;\n\tunsigned char f = timer0_fract;\n\n\tm += MILLIS_INC;\n\tf += FRACT_INC;\n\tif (f \u003e= FRACT_MAX) {\n\t\tf -= FRACT_MAX;\n\t\tm += 1;\n\t}\n\n\ttimer0_fract = f;\n\ttimer0_millis = m;\n\ttimer0_overflow_count++;\n}\n\nunsigned long millis()\n{\n\tunsigned long m;\n\tuint8_t oldSREG = SREG;\n\n\t// disable interrupts while we read timer0_millis or we might get an\n\t// inconsistent value (e.g. in the middle of a write to timer0_millis)\n\tcli();\n\tm = timer0_millis;\n\tSREG = oldSREG;\n\n\treturn m;\n}\n\nunsigned long micros() {\n\tunsigned long m;\n\tuint8_t oldSREG = SREG, t;\n\t\n\tcli();\n\tm = timer0_overflow_count;\n#if defined(TCNT0)\n\tt = TCNT0;\n#elif defined(TCNT0L)\n\tt = TCNT0L;\n#else\n\t#error TIMER 0 not defined\n#endif\n\n#ifdef TIFR0\n\tif ((TIFR0 \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#else\n\tif ((TIFR \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#endif\n\n\tSREG = oldSREG;\n\t\n\treturn ((m \u003c\u003c 8) + t) * (64 / clockCyclesPerMicrosecond());\n}\n\nvoid delay(unsigned long ms)\n{\n\tuint32_t start = micros();\n\n\twhile (ms \u003e 0) {\n\t\tyield();\n\t\twhile ( ms \u003e 0 \u0026\u0026 (micros() - start) \u003e= 1000) {\n\t\t\tms--;\n\t\t\tstart += 1000;\n\t\t}\n\t}\n}\n\n/* Delay for the given number of microseconds.  Assumes a 1, 8, 12, 16, 20 or 24 MHz clock. */\nvoid delayMicroseconds(unsigned int us)\n{\n\t// call = 4 cycles + 2 to 4 cycles to init us(2 for constant delay, 4 for variable)\n\n\t// calling avrlib's delay_us() function with low values (e.g. 1 or\n\t// 2 microseconds) gives delays longer than desired.\n\t//delay_us(us);\n#if F_CPU \u003e= 24000000L\n\t// for the 24 MHz clock for the aventurous ones, trying to overclock\n\n\t// zero delay fix\n\tif (!us) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/6 of a microsecond (4 cycles)\n\t// per iteration, so execute it six times for each microsecond of\n\t// delay requested.\n\tus *= 6; // x6 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 22 (24) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //=2 cycles\n\n#elif F_CPU \u003e= 20000000L\n\t// for the 20 MHz clock on rare Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 18 (20) cycles, which is 1us\n\t__asm__ __volatile__ (\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\"); //just waiting 4 cycles\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/5 of a microsecond (4 cycles)\n\t// per iteration, so execute it five times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 2) + us; // x5 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 26 (28) cycles above, remove 7, (7*4=28)\n\t// us is at least 10 so we can substract 7\n\tus -= 7; // 2 cycles\n\n#elif F_CPU \u003e= 16000000L\n\t// for the 16 MHz clock on most Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/4 of a microsecond (4 cycles)\n\t// per iteration, so execute it four times for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 2; // x4 us, = 4 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 19 (21) cycles above, remove 5, (5*4=20)\n\t// us is at least 8 so we can substract 5\n\tus -= 5; // = 2 cycles,\n\n#elif F_CPU \u003e= 12000000L\n\t// for the 12 MHz clock if somebody is working with USB\n\n\t// for a 1 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1.5us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/3 of a microsecond (4 cycles)\n\t// per iteration, so execute it three times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 1) + us; // x3 us, = 5 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 20 (22) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //2 cycles\n\n#elif F_CPU \u003e= 8000000L\n\t// for the 8 MHz internal clock\n\n\t// for a 1 and 2 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 2us\n\tif (us \u003c= 2) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/2 of a microsecond (4 cycles)\n\t// per iteration, so execute it twice for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 1; //x2 us, = 2 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 17 (19) cycles above, remove 4, (4*4=16)\n\t// us is at least 6 so we can substract 4\n\tus -= 4; // = 2 cycles\n\n#else\n\t// for the 1 MHz internal clock (default settings for common Atmega microcontrollers)\n\n\t// the overhead of the function calls is 14 (16) cycles\n\tif (us \u003c= 16) return; //= 3 cycles, (4 when true)\n\tif (us \u003c= 25) return; //= 3 cycles, (4 when true), (must be at least 25 if we want to substract 22)\n\n\t// compensate for the time taken by the preceeding and next commands (about 22 cycles)\n\tus -= 22; // = 2 cycles\n\t// the following loop takes 4 microseconds (4 cycles)\n\t// per iteration, so execute it us/4 times\n\t// us is at least 4, divided by 4 gives us 1 (no zero delay bug)\n\tus \u003e\u003e= 2; // us div 4, = 4 cycles\n\t\n\n#endif\n\n\t// busy wait\n\t__asm__ __volatile__ (\n\t\t\"1: sbiw %0,1\" \"\\n\\t\" // 2 cycles\n\t\t\"brne 1b\" : \"=w\" (us) : \"0\" (us) // 2 cycles\n\t);\n\t// return = 4 cycles\n}\n\nvoid init()\n{\n\t// this needs to be called before setup() or some functions won't\n\t// work there\n\tsei();\n\t\n\t// on the ATmega168, timer 0 is also used for fast hardware pwm\n\t// (using phase-correct PWM would mean that timer 0 overflowed half as often\n\t// resulting in different millis() behavior on the ATmega8 and ATmega168)\n#if defined(TCCR0A) \u0026\u0026 defined(WGM01)\n\tsbi(TCCR0A, WGM01);\n\tsbi(TCCR0A, WGM00);\n#endif\n\n\t// set timer 0 prescale factor to 64\n#if defined(__AVR_ATmega128__)\n\t// CPU specific: different values for the ATmega128\n\tsbi(TCCR0, CS02);\n#elif defined(TCCR0) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard atmega8\n\tsbi(TCCR0, CS01);\n\tsbi(TCCR0, CS00);\n#elif defined(TCCR0B) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard 168/328/1280/2560\n\tsbi(TCCR0B, CS01);\n\tsbi(TCCR0B, CS00);\n#elif defined(TCCR0A) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the __AVR_ATmega645__ series\n\tsbi(TCCR0A, CS01);\n\tsbi(TCCR0A, CS00);\n#else\n\t#error Timer 0 prescale factor 64 not set correctly\n#endif\n\n\t// enable timer 0 overflow interrupt\n#if defined(TIMSK) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK, TOIE0);\n#elif defined(TIMSK0) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK0, TOIE0);\n#else\n\t#error\tTimer 0 overflow interrupt not set correctly\n#endif\n\n\t// timers 1 and 2 are used for phase-correct hardware pwm\n\t// this is better for motors as it ensures an even waveform\n\t// note, however, that fast pwm mode can achieve a frequency of up\n\t// 8 MHz (with a 16 MHz clock) at 50% duty cycle\n\n#if defined(TCCR1B) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tTCCR1B = 0;\n\n\t// set timer 1 prescale factor to 64\n\tsbi(TCCR1B, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1B, CS10);\n#endif\n#elif defined(TCCR1) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tsbi(TCCR1, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1, CS10);\n#endif\n#endif\n\t// put timer 1 in 8-bit phase correct pwm mode\n#if defined(TCCR1A) \u0026\u0026 defined(WGM10)\n\tsbi(TCCR1A, WGM10);\n#endif\n\n\t// set timer 2 prescale factor to 64\n#if defined(TCCR2) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2, CS22);\n#elif defined(TCCR2B) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2B, CS22);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n\t// configure timer 2 for phase correct pwm (8-bit)\n#if defined(TCCR2) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2, WGM20);\n#elif defined(TCCR2A) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2A, WGM20);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n#if defined(TCCR3B) \u0026\u0026 defined(CS31) \u0026\u0026 defined(WGM30)\n\tsbi(TCCR3B, CS31);\t\t// set timer 3 prescale factor to 64\n\tsbi(TCCR3B, CS30);\n\tsbi(TCCR3A, WGM30);\t\t// put timer 3 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(TCCR4A) \u0026\u0026 defined(TCCR4B) \u0026\u0026 defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */\n\tsbi(TCCR4B, CS42);\t\t// set timer4 prescale factor to 64\n\tsbi(TCCR4B, CS41);\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4D, WGM40);\t\t// put timer 4 in phase- and frequency-correct PWM mode\t\n\tsbi(TCCR4A, PWM4A);\t\t// enable PWM mode for comparator OCR4A\n\tsbi(TCCR4C, PWM4D);\t\t// enable PWM mode for comparator OCR4D\n#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */\n#if defined(TCCR4B) \u0026\u0026 defined(CS41) \u0026\u0026 defined(WGM40)\n\tsbi(TCCR4B, CS41);\t\t// set timer 4 prescale factor to 64\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4A, WGM40);\t\t// put timer 4 in 8-bit phase correct pwm mode\n#endif\n#endif /* end timer4 block for ATMEGA1280/2560 and similar */\t\n\n#if defined(TCCR5B) \u0026\u0026 defined(CS51) \u0026\u0026 defined(WGM50)\n\tsbi(TCCR5B, CS51);\t\t// set timer 5 prescale factor to 64\n\tsbi(TCCR5B, CS50);\n\tsbi(TCCR5A, WGM50);\t\t// put timer 5 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(ADCSRA)\n\t// set a2d prescaler so we are inside the desired 50-200 KHz range.\n\t#if F_CPU \u003e= 16000000 // 16 MHz / 128 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 8000000 // 8 MHz / 64 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 4000000 // 4 MHz / 32 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 2000000 // 2 MHz / 16 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 1000000 // 1 MHz / 8 = 125 KHz\n\t\tcbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#else // 128 kHz / 2 = 64 KHz -\u003e This is the closest you can get, the prescaler is 2\n\t\tcbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#endif\n\t// enable a2d conversions\n\tsbi(ADCSRA, ADEN);\n#endif\n\n\t// the bootloader connects pins 0 and 1 to the USART; disconnect them\n\t// here so they can be used as normal digital i/o; they will be\n\t// reconnected in Serial.begin()\n#if defined(UCSRB)\n\tUCSRB = 0;\n#elif defined(UCSR0B)\n\tUCSR0B = 0;\n#endif\n}\n"}},"jsonrpc":"2.0"}Content-Length: 183

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":9}},"id":362,"jsonrpc":"2.0"}
<<<
Content-Length: 285

{"id":362,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `delay`  \n\n---\n→ `void`  \nParameters:  \n- `unsigned long ms`\n\n---\n```cpp\nvoid delay(unsigned long ms)\n```"},"range":{"end":{"character":9,"line":48},"start":{"character":4,"line":48}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":10}},"id":363,"jsonrpc":"2.0"}
<<<
Content-Length: 472

{"id":363,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":9,"line":48},"start":{"character":4,"line":48}}},{"kind":1,"range":{"end":{"character":9,"line":50},"start":{"character":4,"line":50}}},{"kind":1,"range":{"end":{"character":9,"line":57},"start":{"character":4,"line":57}}},{"kind":1,"range":{"end":{"character":9,"line":59},"start":{"character":4,"line":59}}},{"kind":1,"range":{"end":{"character":7,"line":67},"start":{"character":2,"line":67}}}]}
>>>
Content-Length: 356

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":284},"contentChanges":[{"range":{"start":{"line":48,"character":10},"end":{"line":48,"character":13}},"rangeLength":3,"text":"150"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":48,"character":10}},"id":364,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":364,"jsonrpc":"2.0","result":[{"range":{"end":{"character":10,"line":105},"start":{"character":5,"line":105}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}]}Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":284}}
>>>
Content-Length: 13396

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c","languageId":"c","version":1,"text":"/*\n  wiring.c - Partial implementation of the Wiring API for the ATmega8.\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#include \"wiring_private.h\"\n\n// the prescaler is set so that timer0 ticks every 64 clock cycles, and the\n// the overflow handler is called every 256 ticks.\n#define MICROSECONDS_PER_TIMER0_OVERFLOW (clockCyclesToMicroseconds(64 * 256))\n\n// the whole number of milliseconds per timer0 overflow\n#define MILLIS_INC (MICROSECONDS_PER_TIMER0_OVERFLOW / 1000)\n\n// the fractional number of milliseconds per timer0 overflow. we shift right\n// by three to fit these numbers into a byte. (for the clock speeds we care\n// about - 8 and 16 MHz - this doesn't lose precision.)\n#define FRACT_INC ((MICROSECONDS_PER_TIMER0_OVERFLOW % 1000) \u003e\u003e 3)\n#define FRACT_MAX (1000 \u003e\u003e 3)\n\nvolatile unsigned long timer0_overflow_count = 0;\nvolatile unsigned long timer0_millis = 0;\nstatic unsigned char timer0_fract = 0;\n\n#if defined(TIM0_OVF_vect)\nISR(TIM0_OVF_vect)\n#else\nISR(TIMER0_OVF_vect)\n#endif\n{\n\t// copy these to local variables so they can be stored in registers\n\t// (volatile variables must be read from memory on every access)\n\tunsigned long m = timer0_millis;\n\tunsigned char f = timer0_fract;\n\n\tm += MILLIS_INC;\n\tf += FRACT_INC;\n\tif (f \u003e= FRACT_MAX) {\n\t\tf -= FRACT_MAX;\n\t\tm += 1;\n\t}\n\n\ttimer0_fract = f;\n\ttimer0_millis = m;\n\ttimer0_overflow_count++;\n}\n\nunsigned long millis()\n{\n\tunsigned long m;\n\tuint8_t oldSREG = SREG;\n\n\t// disable interrupts while we read timer0_millis or we might get an\n\t// inconsistent value (e.g. in the middle of a write to timer0_millis)\n\tcli();\n\tm = timer0_millis;\n\tSREG = oldSREG;\n\n\treturn m;\n}\n\nunsigned long micros() {\n\tunsigned long m;\n\tuint8_t oldSREG = SREG, t;\n\t\n\tcli();\n\tm = timer0_overflow_count;\n#if defined(TCNT0)\n\tt = TCNT0;\n#elif defined(TCNT0L)\n\tt = TCNT0L;\n#else\n\t#error TIMER 0 not defined\n#endif\n\n#ifdef TIFR0\n\tif ((TIFR0 \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#else\n\tif ((TIFR \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#endif\n\n\tSREG = oldSREG;\n\t\n\treturn ((m \u003c\u003c 8) + t) * (64 / clockCyclesPerMicrosecond());\n}\n\nvoid delay(unsigned long ms)\n{\n\tuint32_t start = micros();\n\n\twhile (ms \u003e 0) {\n\t\tyield();\n\t\twhile ( ms \u003e 0 \u0026\u0026 (micros() - start) \u003e= 1000) {\n\t\t\tms--;\n\t\t\tstart += 1000;\n\t\t}\n\t}\n}\n\n/* Delay for the given number of microseconds.  Assumes a 1, 8, 12, 16, 20 or 24 MHz clock. */\nvoid delayMicroseconds(unsigned int us)\n{\n\t// call = 4 cycles + 2 to 4 cycles to init us(2 for constant delay, 4 for variable)\n\n\t// calling avrlib's delay_us() function with low values (e.g. 1 or\n\t// 2 microseconds) gives delays longer than desired.\n\t//delay_us(us);\n#if F_CPU \u003e= 24000000L\n\t// for the 24 MHz clock for the aventurous ones, trying to overclock\n\n\t// zero delay fix\n\tif (!us) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/6 of a microsecond (4 cycles)\n\t// per iteration, so execute it six times for each microsecond of\n\t// delay requested.\n\tus *= 6; // x6 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 22 (24) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //=2 cycles\n\n#elif F_CPU \u003e= 20000000L\n\t// for the 20 MHz clock on rare Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 18 (20) cycles, which is 1us\n\t__asm__ __volatile__ (\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\"); //just waiting 4 cycles\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/5 of a microsecond (4 cycles)\n\t// per iteration, so execute it five times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 2) + us; // x5 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 26 (28) cycles above, remove 7, (7*4=28)\n\t// us is at least 10 so we can substract 7\n\tus -= 7; // 2 cycles\n\n#elif F_CPU \u003e= 16000000L\n\t// for the 16 MHz clock on most Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/4 of a microsecond (4 cycles)\n\t// per iteration, so execute it four times for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 2; // x4 us, = 4 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 19 (21) cycles above, remove 5, (5*4=20)\n\t// us is at least 8 so we can substract 5\n\tus -= 5; // = 2 cycles,\n\n#elif F_CPU \u003e= 12000000L\n\t// for the 12 MHz clock if somebody is working with USB\n\n\t// for a 1 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1.5us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/3 of a microsecond (4 cycles)\n\t// per iteration, so execute it three times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 1) + us; // x3 us, = 5 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 20 (22) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //2 cycles\n\n#elif F_CPU \u003e= 8000000L\n\t// for the 8 MHz internal clock\n\n\t// for a 1 and 2 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 2us\n\tif (us \u003c= 2) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/2 of a microsecond (4 cycles)\n\t// per iteration, so execute it twice for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 1; //x2 us, = 2 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 17 (19) cycles above, remove 4, (4*4=16)\n\t// us is at least 6 so we can substract 4\n\tus -= 4; // = 2 cycles\n\n#else\n\t// for the 1 MHz internal clock (default settings for common Atmega microcontrollers)\n\n\t// the overhead of the function calls is 14 (16) cycles\n\tif (us \u003c= 16) return; //= 3 cycles, (4 when true)\n\tif (us \u003c= 25) return; //= 3 cycles, (4 when true), (must be at least 25 if we want to substract 22)\n\n\t// compensate for the time taken by the preceeding and next commands (about 22 cycles)\n\tus -= 22; // = 2 cycles\n\t// the following loop takes 4 microseconds (4 cycles)\n\t// per iteration, so execute it us/4 times\n\t// us is at least 4, divided by 4 gives us 1 (no zero delay bug)\n\tus \u003e\u003e= 2; // us div 4, = 4 cycles\n\t\n\n#endif\n\n\t// busy wait\n\t__asm__ __volatile__ (\n\t\t\"1: sbiw %0,1\" \"\\n\\t\" // 2 cycles\n\t\t\"brne 1b\" : \"=w\" (us) : \"0\" (us) // 2 cycles\n\t);\n\t// return = 4 cycles\n}\n\nvoid init()\n{\n\t// this needs to be called before setup() or some functions won't\n\t// work there\n\tsei();\n\t\n\t// on the ATmega168, timer 0 is also used for fast hardware pwm\n\t// (using phase-correct PWM would mean that timer 0 overflowed half as often\n\t// resulting in different millis() behavior on the ATmega8 and ATmega168)\n#if defined(TCCR0A) \u0026\u0026 defined(WGM01)\n\tsbi(TCCR0A, WGM01);\n\tsbi(TCCR0A, WGM00);\n#endif\n\n\t// set timer 0 prescale factor to 64\n#if defined(__AVR_ATmega128__)\n\t// CPU specific: different values for the ATmega128\n\tsbi(TCCR0, CS02);\n#elif defined(TCCR0) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard atmega8\n\tsbi(TCCR0, CS01);\n\tsbi(TCCR0, CS00);\n#elif defined(TCCR0B) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard 168/328/1280/2560\n\tsbi(TCCR0B, CS01);\n\tsbi(TCCR0B, CS00);\n#elif defined(TCCR0A) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the __AVR_ATmega645__ series\n\tsbi(TCCR0A, CS01);\n\tsbi(TCCR0A, CS00);\n#else\n\t#error Timer 0 prescale factor 64 not set correctly\n#endif\n\n\t// enable timer 0 overflow interrupt\n#if defined(TIMSK) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK, TOIE0);\n#elif defined(TIMSK0) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK0, TOIE0);\n#else\n\t#error\tTimer 0 overflow interrupt not set correctly\n#endif\n\n\t// timers 1 and 2 are used for phase-correct hardware pwm\n\t// this is better for motors as it ensures an even waveform\n\t// note, however, that fast pwm mode can achieve a frequency of up\n\t// 8 MHz (with a 16 MHz clock) at 50% duty cycle\n\n#if defined(TCCR1B) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tTCCR1B = 0;\n\n\t// set timer 1 prescale factor to 64\n\tsbi(TCCR1B, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1B, CS10);\n#endif\n#elif defined(TCCR1) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tsbi(TCCR1, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1, CS10);\n#endif\n#endif\n\t// put timer 1 in 8-bit phase correct pwm mode\n#if defined(TCCR1A) \u0026\u0026 defined(WGM10)\n\tsbi(TCCR1A, WGM10);\n#endif\n\n\t// set timer 2 prescale factor to 64\n#if defined(TCCR2) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2, CS22);\n#elif defined(TCCR2B) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2B, CS22);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n\t// configure timer 2 for phase correct pwm (8-bit)\n#if defined(TCCR2) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2, WGM20);\n#elif defined(TCCR2A) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2A, WGM20);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n#if defined(TCCR3B) \u0026\u0026 defined(CS31) \u0026\u0026 defined(WGM30)\n\tsbi(TCCR3B, CS31);\t\t// set timer 3 prescale factor to 64\n\tsbi(TCCR3B, CS30);\n\tsbi(TCCR3A, WGM30);\t\t// put timer 3 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(TCCR4A) \u0026\u0026 defined(TCCR4B) \u0026\u0026 defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */\n\tsbi(TCCR4B, CS42);\t\t// set timer4 prescale factor to 64\n\tsbi(TCCR4B, CS41);\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4D, WGM40);\t\t// put timer 4 in phase- and frequency-correct PWM mode\t\n\tsbi(TCCR4A, PWM4A);\t\t// enable PWM mode for comparator OCR4A\n\tsbi(TCCR4C, PWM4D);\t\t// enable PWM mode for comparator OCR4D\n#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */\n#if defined(TCCR4B) \u0026\u0026 defined(CS41) \u0026\u0026 defined(WGM40)\n\tsbi(TCCR4B, CS41);\t\t// set timer 4 prescale factor to 64\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4A, WGM40);\t\t// put timer 4 in 8-bit phase correct pwm mode\n#endif\n#endif /* end timer4 block for ATMEGA1280/2560 and similar */\t\n\n#if defined(TCCR5B) \u0026\u0026 defined(CS51) \u0026\u0026 defined(WGM50)\n\tsbi(TCCR5B, CS51);\t\t// set timer 5 prescale factor to 64\n\tsbi(TCCR5B, CS50);\n\tsbi(TCCR5A, WGM50);\t\t// put timer 5 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(ADCSRA)\n\t// set a2d prescaler so we are inside the desired 50-200 KHz range.\n\t#if F_CPU \u003e= 16000000 // 16 MHz / 128 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 8000000 // 8 MHz / 64 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 4000000 // 4 MHz / 32 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 2000000 // 2 MHz / 16 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 1000000 // 1 MHz / 8 = 125 KHz\n\t\tcbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#else // 128 kHz / 2 = 64 KHz -\u003e This is the closest you can get, the prescaler is 2\n\t\tcbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#endif\n\t// enable a2d conversions\n\tsbi(ADCSRA, ADEN);\n#endif\n\n\t// the bootloader connects pins 0 and 1 to the USART; disconnect them\n\t// here so they can be used as normal digital i/o; they will be\n\t// reconnected in Serial.begin()\n#if defined(UCSRB)\n\tUCSRB = 0;\n#elif defined(UCSR0B)\n\tUCSR0B = 0;\n#endif\n}\n"}},"jsonrpc":"2.0"}Content-Length: 183

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":48,"character":13},"end":{"line":48,"character":13}},"context":{"diagnostics":[]}},"id":365,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":365,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":50,"character":10}},"id":366,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":366,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":50,"character":11}},"id":367,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":367,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":50,"character":10},"end":{"line":50,"character":13}},"context":{"diagnostics":[]}},"id":368,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":368,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":13,"line":50},"start":{"character":10,"line":50}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":58,"character":12}},"id":369,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":369,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `microServo`  \n\n---\nType: `class Servo`  \n\n---\n```cpp\nServo microServo\n```"},"range":{"end":{"character":14,"line":58},"start":{"character":4,"line":58}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":12}},"id":370,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":370,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":0},"end":{"line":58,"character":0}},"context":{"diagnostics":[]}},"id":371,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":371,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":13}},"id":372,"jsonrpc":"2.0"}
<<<
Content-Length: 472

{"id":372,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":9,"line":48},"start":{"character":4,"line":48}}},{"kind":1,"range":{"end":{"character":9,"line":50},"start":{"character":4,"line":50}}},{"kind":1,"range":{"end":{"character":9,"line":57},"start":{"character":4,"line":57}}},{"kind":1,"range":{"end":{"character":9,"line":59},"start":{"character":4,"line":59}}},{"kind":1,"range":{"end":{"character":7,"line":67},"start":{"character":2,"line":67}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":10},"end":{"line":57,"character":13}},"context":{"diagnostics":[]}},"id":373,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":373,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":13,"line":57},"start":{"character":10,"line":57}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":285},"contentChanges":[{"range":{"start":{"line":57,"character":10},"end":{"line":57,"character":13}},"rangeLength":3,"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":285}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":286},"contentChanges":[{"range":{"start":{"line":57,"character":11},"end":{"line":57,"character":11}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":286}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":287},"contentChanges":[{"range":{"start":{"line":57,"character":12},"end":{"line":57,"character":12}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":287}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":13},"end":{"line":57,"character":13}},"context":{"diagnostics":[]}},"id":374,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":374,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":13}},"id":375,"jsonrpc":"2.0"}
<<<
Content-Length: 223

{"id":375,"jsonrpc":"2.0","result":[{"range":{"end":{"character":10,"line":105},"start":{"character":5,"line":105}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}]}
>>>
Content-Length: 13396

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c","languageId":"c","version":1,"text":"/*\n  wiring.c - Partial implementation of the Wiring API for the ATmega8.\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#include \"wiring_private.h\"\n\n// the prescaler is set so that timer0 ticks every 64 clock cycles, and the\n// the overflow handler is called every 256 ticks.\n#define MICROSECONDS_PER_TIMER0_OVERFLOW (clockCyclesToMicroseconds(64 * 256))\n\n// the whole number of milliseconds per timer0 overflow\n#define MILLIS_INC (MICROSECONDS_PER_TIMER0_OVERFLOW / 1000)\n\n// the fractional number of milliseconds per timer0 overflow. we shift right\n// by three to fit these numbers into a byte. (for the clock speeds we care\n// about - 8 and 16 MHz - this doesn't lose precision.)\n#define FRACT_INC ((MICROSECONDS_PER_TIMER0_OVERFLOW % 1000) \u003e\u003e 3)\n#define FRACT_MAX (1000 \u003e\u003e 3)\n\nvolatile unsigned long timer0_overflow_count = 0;\nvolatile unsigned long timer0_millis = 0;\nstatic unsigned char timer0_fract = 0;\n\n#if defined(TIM0_OVF_vect)\nISR(TIM0_OVF_vect)\n#else\nISR(TIMER0_OVF_vect)\n#endif\n{\n\t// copy these to local variables so they can be stored in registers\n\t// (volatile variables must be read from memory on every access)\n\tunsigned long m = timer0_millis;\n\tunsigned char f = timer0_fract;\n\n\tm += MILLIS_INC;\n\tf += FRACT_INC;\n\tif (f \u003e= FRACT_MAX) {\n\t\tf -= FRACT_MAX;\n\t\tm += 1;\n\t}\n\n\ttimer0_fract = f;\n\ttimer0_millis = m;\n\ttimer0_overflow_count++;\n}\n\nunsigned long millis()\n{\n\tunsigned long m;\n\tuint8_t oldSREG = SREG;\n\n\t// disable interrupts while we read timer0_millis or we might get an\n\t// inconsistent value (e.g. in the middle of a write to timer0_millis)\n\tcli();\n\tm = timer0_millis;\n\tSREG = oldSREG;\n\n\treturn m;\n}\n\nunsigned long micros() {\n\tunsigned long m;\n\tuint8_t oldSREG = SREG, t;\n\t\n\tcli();\n\tm = timer0_overflow_count;\n#if defined(TCNT0)\n\tt = TCNT0;\n#elif defined(TCNT0L)\n\tt = TCNT0L;\n#else\n\t#error TIMER 0 not defined\n#endif\n\n#ifdef TIFR0\n\tif ((TIFR0 \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#else\n\tif ((TIFR \u0026 _BV(TOV0)) \u0026\u0026 (t \u003c 255))\n\t\tm++;\n#endif\n\n\tSREG = oldSREG;\n\t\n\treturn ((m \u003c\u003c 8) + t) * (64 / clockCyclesPerMicrosecond());\n}\n\nvoid delay(unsigned long ms)\n{\n\tuint32_t start = micros();\n\n\twhile (ms \u003e 0) {\n\t\tyield();\n\t\twhile ( ms \u003e 0 \u0026\u0026 (micros() - start) \u003e= 1000) {\n\t\t\tms--;\n\t\t\tstart += 1000;\n\t\t}\n\t}\n}\n\n/* Delay for the given number of microseconds.  Assumes a 1, 8, 12, 16, 20 or 24 MHz clock. */\nvoid delayMicroseconds(unsigned int us)\n{\n\t// call = 4 cycles + 2 to 4 cycles to init us(2 for constant delay, 4 for variable)\n\n\t// calling avrlib's delay_us() function with low values (e.g. 1 or\n\t// 2 microseconds) gives delays longer than desired.\n\t//delay_us(us);\n#if F_CPU \u003e= 24000000L\n\t// for the 24 MHz clock for the aventurous ones, trying to overclock\n\n\t// zero delay fix\n\tif (!us) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/6 of a microsecond (4 cycles)\n\t// per iteration, so execute it six times for each microsecond of\n\t// delay requested.\n\tus *= 6; // x6 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 22 (24) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //=2 cycles\n\n#elif F_CPU \u003e= 20000000L\n\t// for the 20 MHz clock on rare Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 18 (20) cycles, which is 1us\n\t__asm__ __volatile__ (\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\" \"\\n\\t\"\n\t\t\"nop\"); //just waiting 4 cycles\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes a 1/5 of a microsecond (4 cycles)\n\t// per iteration, so execute it five times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 2) + us; // x5 us, = 7 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 26 (28) cycles above, remove 7, (7*4=28)\n\t// us is at least 10 so we can substract 7\n\tus -= 7; // 2 cycles\n\n#elif F_CPU \u003e= 16000000L\n\t// for the 16 MHz clock on most Arduino boards\n\n\t// for a one-microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/4 of a microsecond (4 cycles)\n\t// per iteration, so execute it four times for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 2; // x4 us, = 4 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 19 (21) cycles above, remove 5, (5*4=20)\n\t// us is at least 8 so we can substract 5\n\tus -= 5; // = 2 cycles,\n\n#elif F_CPU \u003e= 12000000L\n\t// for the 12 MHz clock if somebody is working with USB\n\n\t// for a 1 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 1.5us\n\tif (us \u003c= 1) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/3 of a microsecond (4 cycles)\n\t// per iteration, so execute it three times for each microsecond of\n\t// delay requested.\n\tus = (us \u003c\u003c 1) + us; // x3 us, = 5 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 20 (22) cycles above, remove 5, (5*4=20)\n\t// us is at least 6 so we can substract 5\n\tus -= 5; //2 cycles\n\n#elif F_CPU \u003e= 8000000L\n\t// for the 8 MHz internal clock\n\n\t// for a 1 and 2 microsecond delay, simply return.  the overhead\n\t// of the function call takes 14 (16) cycles, which is 2us\n\tif (us \u003c= 2) return; //  = 3 cycles, (4 when true)\n\n\t// the following loop takes 1/2 of a microsecond (4 cycles)\n\t// per iteration, so execute it twice for each microsecond of\n\t// delay requested.\n\tus \u003c\u003c= 1; //x2 us, = 2 cycles\n\n\t// account for the time taken in the preceeding commands.\n\t// we just burned 17 (19) cycles above, remove 4, (4*4=16)\n\t// us is at least 6 so we can substract 4\n\tus -= 4; // = 2 cycles\n\n#else\n\t// for the 1 MHz internal clock (default settings for common Atmega microcontrollers)\n\n\t// the overhead of the function calls is 14 (16) cycles\n\tif (us \u003c= 16) return; //= 3 cycles, (4 when true)\n\tif (us \u003c= 25) return; //= 3 cycles, (4 when true), (must be at least 25 if we want to substract 22)\n\n\t// compensate for the time taken by the preceeding and next commands (about 22 cycles)\n\tus -= 22; // = 2 cycles\n\t// the following loop takes 4 microseconds (4 cycles)\n\t// per iteration, so execute it us/4 times\n\t// us is at least 4, divided by 4 gives us 1 (no zero delay bug)\n\tus \u003e\u003e= 2; // us div 4, = 4 cycles\n\t\n\n#endif\n\n\t// busy wait\n\t__asm__ __volatile__ (\n\t\t\"1: sbiw %0,1\" \"\\n\\t\" // 2 cycles\n\t\t\"brne 1b\" : \"=w\" (us) : \"0\" (us) // 2 cycles\n\t);\n\t// return = 4 cycles\n}\n\nvoid init()\n{\n\t// this needs to be called before setup() or some functions won't\n\t// work there\n\tsei();\n\t\n\t// on the ATmega168, timer 0 is also used for fast hardware pwm\n\t// (using phase-correct PWM would mean that timer 0 overflowed half as often\n\t// resulting in different millis() behavior on the ATmega8 and ATmega168)\n#if defined(TCCR0A) \u0026\u0026 defined(WGM01)\n\tsbi(TCCR0A, WGM01);\n\tsbi(TCCR0A, WGM00);\n#endif\n\n\t// set timer 0 prescale factor to 64\n#if defined(__AVR_ATmega128__)\n\t// CPU specific: different values for the ATmega128\n\tsbi(TCCR0, CS02);\n#elif defined(TCCR0) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard atmega8\n\tsbi(TCCR0, CS01);\n\tsbi(TCCR0, CS00);\n#elif defined(TCCR0B) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the standard 168/328/1280/2560\n\tsbi(TCCR0B, CS01);\n\tsbi(TCCR0B, CS00);\n#elif defined(TCCR0A) \u0026\u0026 defined(CS01) \u0026\u0026 defined(CS00)\n\t// this combination is for the __AVR_ATmega645__ series\n\tsbi(TCCR0A, CS01);\n\tsbi(TCCR0A, CS00);\n#else\n\t#error Timer 0 prescale factor 64 not set correctly\n#endif\n\n\t// enable timer 0 overflow interrupt\n#if defined(TIMSK) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK, TOIE0);\n#elif defined(TIMSK0) \u0026\u0026 defined(TOIE0)\n\tsbi(TIMSK0, TOIE0);\n#else\n\t#error\tTimer 0 overflow interrupt not set correctly\n#endif\n\n\t// timers 1 and 2 are used for phase-correct hardware pwm\n\t// this is better for motors as it ensures an even waveform\n\t// note, however, that fast pwm mode can achieve a frequency of up\n\t// 8 MHz (with a 16 MHz clock) at 50% duty cycle\n\n#if defined(TCCR1B) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tTCCR1B = 0;\n\n\t// set timer 1 prescale factor to 64\n\tsbi(TCCR1B, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1B, CS10);\n#endif\n#elif defined(TCCR1) \u0026\u0026 defined(CS11) \u0026\u0026 defined(CS10)\n\tsbi(TCCR1, CS11);\n#if F_CPU \u003e= 8000000L\n\tsbi(TCCR1, CS10);\n#endif\n#endif\n\t// put timer 1 in 8-bit phase correct pwm mode\n#if defined(TCCR1A) \u0026\u0026 defined(WGM10)\n\tsbi(TCCR1A, WGM10);\n#endif\n\n\t// set timer 2 prescale factor to 64\n#if defined(TCCR2) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2, CS22);\n#elif defined(TCCR2B) \u0026\u0026 defined(CS22)\n\tsbi(TCCR2B, CS22);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n\t// configure timer 2 for phase correct pwm (8-bit)\n#if defined(TCCR2) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2, WGM20);\n#elif defined(TCCR2A) \u0026\u0026 defined(WGM20)\n\tsbi(TCCR2A, WGM20);\n//#else\n\t// Timer 2 not finished (may not be present on this CPU)\n#endif\n\n#if defined(TCCR3B) \u0026\u0026 defined(CS31) \u0026\u0026 defined(WGM30)\n\tsbi(TCCR3B, CS31);\t\t// set timer 3 prescale factor to 64\n\tsbi(TCCR3B, CS30);\n\tsbi(TCCR3A, WGM30);\t\t// put timer 3 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(TCCR4A) \u0026\u0026 defined(TCCR4B) \u0026\u0026 defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */\n\tsbi(TCCR4B, CS42);\t\t// set timer4 prescale factor to 64\n\tsbi(TCCR4B, CS41);\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4D, WGM40);\t\t// put timer 4 in phase- and frequency-correct PWM mode\t\n\tsbi(TCCR4A, PWM4A);\t\t// enable PWM mode for comparator OCR4A\n\tsbi(TCCR4C, PWM4D);\t\t// enable PWM mode for comparator OCR4D\n#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */\n#if defined(TCCR4B) \u0026\u0026 defined(CS41) \u0026\u0026 defined(WGM40)\n\tsbi(TCCR4B, CS41);\t\t// set timer 4 prescale factor to 64\n\tsbi(TCCR4B, CS40);\n\tsbi(TCCR4A, WGM40);\t\t// put timer 4 in 8-bit phase correct pwm mode\n#endif\n#endif /* end timer4 block for ATMEGA1280/2560 and similar */\t\n\n#if defined(TCCR5B) \u0026\u0026 defined(CS51) \u0026\u0026 defined(WGM50)\n\tsbi(TCCR5B, CS51);\t\t// set timer 5 prescale factor to 64\n\tsbi(TCCR5B, CS50);\n\tsbi(TCCR5A, WGM50);\t\t// put timer 5 in 8-bit phase correct pwm mode\n#endif\n\n#if defined(ADCSRA)\n\t// set a2d prescaler so we are inside the desired 50-200 KHz range.\n\t#if F_CPU \u003e= 16000000 // 16 MHz / 128 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 8000000 // 8 MHz / 64 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 4000000 // 4 MHz / 32 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 2000000 // 2 MHz / 16 = 125 KHz\n\t\tsbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tcbi(ADCSRA, ADPS0);\n\t#elif F_CPU \u003e= 1000000 // 1 MHz / 8 = 125 KHz\n\t\tcbi(ADCSRA, ADPS2);\n\t\tsbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#else // 128 kHz / 2 = 64 KHz -\u003e This is the closest you can get, the prescaler is 2\n\t\tcbi(ADCSRA, ADPS2);\n\t\tcbi(ADCSRA, ADPS1);\n\t\tsbi(ADCSRA, ADPS0);\n\t#endif\n\t// enable a2d conversions\n\tsbi(ADCSRA, ADEN);\n#endif\n\n\t// the bootloader connects pins 0 and 1 to the USART; disconnect them\n\t// here so they can be used as normal digital i/o; they will be\n\t// reconnected in Serial.begin()\n#if defined(UCSRB)\n\tUCSRB = 0;\n#elif defined(UCSR0B)\n\tUCSR0B = 0;\n#endif\n}\n"}},"jsonrpc":"2.0"}Content-Length: 183

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 193

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring.c"}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":13}},"id":376,"jsonrpc":"2.0"}
<<<
Content-Length: 287

{"id":376,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `delay`  \n\n---\n→ `void`  \nParameters:  \n- `unsigned long ms`\n\n---\n```cpp\nvoid delay(unsigned long ms)\n```"},"range":{"end":{"character":14,"line":57},"start":{"character":13,"line":57}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":12}},"id":377,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":377,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":12}},"id":378,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":378,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":379,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":379,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":10},"end":{"line":57,"character":13}},"context":{"diagnostics":[]}},"id":380,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":380,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":13,"line":57},"start":{"character":10,"line":57}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":11}},"id":381,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":381,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":382,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":382,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 356

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":288},"contentChanges":[{"range":{"start":{"line":59,"character":10},"end":{"line":59,"character":13}},"rangeLength":3,"text":"200"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":288}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":59,"character":13},"end":{"line":59,"character":13}},"context":{"diagnostics":[]}},"id":383,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":383,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":59,"character":12}},"id":384,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":384,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":29}},"id":385,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":385,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":56,"character":0},"end":{"line":59,"character":15}},"context":{"diagnostics":[]}},"id":386,"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"id":386,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":15,"line":59},"start":{"character":0,"line":56}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":0},"end":{"line":59,"character":15}},"context":{"diagnostics":[]}},"id":387,"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"id":387,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":15,"line":59},"start":{"character":0,"line":57}},"tweakID":"ExtractFunction"}],"command":"clangd.applyTweak","title":"Extract to function"},"kind":"refactor","title":"Extract to function"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":57,"character":15},"end":{"line":57,"character":15}},"context":{"diagnostics":[]}},"id":388,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":388,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":46},"end":{"line":52,"character":46}},"context":{"diagnostics":[]}},"id":389,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":389,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":23}},"id":390,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":390,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `greenPin`  \n\n---\nType: `const int`  \nValue = `5`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int greenPin = 5\n```"},"range":{"end":{"character":28,"line":54},"start":{"character":20,"line":54}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":26}},"id":391,"jsonrpc":"2.0"}
<<<
Content-Length: 309

{"id":391,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `greenPin`  \n\n---\nType: `const int`  \nValue = `5`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int greenPin = 5\n```"},"range":{"end":{"character":28,"line":54},"start":{"character":20,"line":54}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":33}},"id":392,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":392,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":34,"line":54},"start":{"character":33,"line":54}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":32}},"id":393,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":393,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":30},"end":{"line":54,"character":33}},"context":{"diagnostics":[]}},"id":394,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":394,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":33,"line":54},"start":{"character":30,"line":54}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":289},"contentChanges":[{"range":{"start":{"line":54,"character":30},"end":{"line":54,"character":33}},"rangeLength":3,"text":"2"}]},"jsonrpc":"2.0"}Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":290},"contentChanges":[{"range":{"start":{"line":54,"character":31},"end":{"line":54,"character":31}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":290}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":291},"contentChanges":[{"range":{"start":{"line":54,"character":32},"end":{"line":54,"character":32}},"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":291}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":33},"end":{"line":54,"character":33}},"context":{"diagnostics":[]}},"id":395,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":395,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":49,"character":19}},"id":396,"jsonrpc":"2.0"}
<<<
Content-Length: 393

{"id":396,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":20,"line":47},"start":{"character":15,"line":47}}},{"kind":1,"range":{"end":{"character":20,"line":49},"start":{"character":15,"line":49}}},{"kind":1,"range":{"end":{"character":20,"line":56},"start":{"character":15,"line":56}}},{"kind":1,"range":{"end":{"character":20,"line":58},"start":{"character":15,"line":58}}}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":49,"character":18}},"id":397,"jsonrpc":"2.0"}
<<<
Content-Length: 208

{"id":397,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":263},"start":{"character":12,"line":263}},"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}]}
>>>
Content-Length: 11726

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp","languageId":"cpp","version":1,"text":"/*\n Servo.cpp - Interrupt driven Servo library for Arduino using 16 bit timers- Version 2\n Copyright (c) 2009 Michael Margolis.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n#if defined(ARDUINO_ARCH_AVR)\n\n#include \u003cavr/interrupt.h\u003e\n#include \u003cArduino.h\u003e\n\n#include \"Servo.h\"\n\n#define usToTicks(_us)    (( clockCyclesPerMicrosecond()* _us) / 8)     // converts microseconds to tick (assumes prescale of 8)  // 12 Aug 2009\n#define ticksToUs(_ticks) (( (unsigned)_ticks * 8)/ clockCyclesPerMicrosecond() ) // converts from ticks back to microseconds\n\n\n#define TRIM_DURATION       2                               // compensation ticks to trim adjust for digitalWrite delays // 12 August 2009\n\n//#define NBR_TIMERS        (MAX_SERVOS / SERVOS_PER_TIMER)\n\nstatic servo_t servos[MAX_SERVOS];                          // static array of servo structures\nstatic volatile int8_t Channel[_Nbr_16timers ];             // counter for the servo being pulsed for each timer (or -1 if refresh interval)\n\nuint8_t ServoCount = 0;                                     // the total number of attached servos\n\n\n// convenience macros\n#define SERVO_INDEX_TO_TIMER(_servo_nbr) ((timer16_Sequence_t)(_servo_nbr / SERVOS_PER_TIMER)) // returns the timer controlling this servo\n#define SERVO_INDEX_TO_CHANNEL(_servo_nbr) (_servo_nbr % SERVOS_PER_TIMER)       // returns the index of the servo on this timer\n#define SERVO_INDEX(_timer,_channel)  ((_timer*SERVOS_PER_TIMER) + _channel)     // macro to access servo index by timer and channel\n#define SERVO(_timer,_channel)  (servos[SERVO_INDEX(_timer,_channel)])            // macro to access servo class by timer and channel\n\n#define SERVO_MIN() (MIN_PULSE_WIDTH - this-\u003emin * 4)  // minimum value in uS for this servo\n#define SERVO_MAX() (MAX_PULSE_WIDTH - this-\u003emax * 4)  // maximum value in uS for this servo\n\n/************ static functions common to all instances ***********************/\n\nstatic inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)\n{\n  if( Channel[timer] \u003c 0 )\n    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer\n  else{\n    if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 SERVO(timer,Channel[timer]).Pin.isActive == true )\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated\n  }\n\n  Channel[timer]++;    // increment to the next channel\n  if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 Channel[timer] \u003c SERVOS_PER_TIMER) {\n    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;\n    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high\n  }\n  else {\n    // finished all channels so wait for the refresh period to expire before starting over\n    if( ((unsigned)*TCNTn) + 4 \u003c usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed\n      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);\n    else\n      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed\n    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel\n  }\n}\n\n#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform\n// Interrupt handlers for Arduino\n#if defined(_useTimer1)\nSIGNAL (TIMER1_COMPA_vect)\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n\n#if defined(_useTimer3)\nSIGNAL (TIMER3_COMPA_vect)\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n\n#if defined(_useTimer4)\nSIGNAL (TIMER4_COMPA_vect)\n{\n  handle_interrupts(_timer4, \u0026TCNT4, \u0026OCR4A);\n}\n#endif\n\n#if defined(_useTimer5)\nSIGNAL (TIMER5_COMPA_vect)\n{\n  handle_interrupts(_timer5, \u0026TCNT5, \u0026OCR5A);\n}\n#endif\n\n#elif defined WIRING\n// Interrupt handlers for Wiring\n#if defined(_useTimer1)\nvoid Timer1Service()\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n#if defined(_useTimer3)\nvoid Timer3Service()\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n#endif\n\n\nstatic void initISR(timer16_Sequence_t timer)\n{\n#if defined (_useTimer1)\n  if(timer == _timer1) {\n    TCCR1A = 0;             // normal counting mode\n    TCCR1B = _BV(CS11);     // set prescaler of 8\n    TCNT1 = 0;              // clear the timer count\n#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF1A);      // clear any pending interrupts;\n    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt\n#else\n    // here if not ATmega8 or ATmega128\n    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts;\n    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER1OUTCOMPAREA_INT, Timer1Service);\n#endif\n  }\n#endif\n\n#if defined (_useTimer3)\n  if(timer == _timer3) {\n    TCCR3A = 0;             // normal counting mode\n    TCCR3B = _BV(CS31);     // set prescaler of 8\n    TCNT3 = 0;              // clear the timer count\n#if defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF3A);     // clear any pending interrupts;\n\tETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt\n#else\n    TIFR3 = _BV(OCF3A);     // clear any pending interrupts;\n    TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER3OUTCOMPAREA_INT, Timer3Service);  // for Wiring platform only\n#endif\n  }\n#endif\n\n#if defined (_useTimer4)\n  if(timer == _timer4) {\n    TCCR4A = 0;             // normal counting mode\n    TCCR4B = _BV(CS41);     // set prescaler of 8\n    TCNT4 = 0;              // clear the timer count\n    TIFR4 = _BV(OCF4A);     // clear any pending interrupts;\n    TIMSK4 =  _BV(OCIE4A) ; // enable the output compare interrupt\n  }\n#endif\n\n#if defined (_useTimer5)\n  if(timer == _timer5) {\n    TCCR5A = 0;             // normal counting mode\n    TCCR5B = _BV(CS51);     // set prescaler of 8\n    TCNT5 = 0;              // clear the timer count\n    TIFR5 = _BV(OCF5A);     // clear any pending interrupts;\n    TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt\n  }\n#endif\n}\n\nstatic void finISR(timer16_Sequence_t timer)\n{\n    //disable use of the given timer\n#if defined WIRING   // Wiring\n  if(timer == _timer1) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK1 \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #else\n    TIMSK \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #endif\n    timerDetach(TIMER1OUTCOMPAREA_INT);\n  }\n  else if(timer == _timer3) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK3 \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #else\n    ETIMSK \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #endif\n    timerDetach(TIMER3OUTCOMPAREA_INT);\n  }\n#else\n  //For arduino - in future: call here to a currently undefined function to reset the timer\n  (void) timer;  // squash \"unused parameter 'timer' [-Wunused-parameter]\" warning\n#endif\n}\n\nstatic boolean isTimerActive(timer16_Sequence_t timer)\n{\n  // returns true if any servo is active on this timer\n  for(uint8_t channel=0; channel \u003c SERVOS_PER_TIMER; channel++) {\n    if(SERVO(timer,channel).Pin.isActive == true)\n      return true;\n  }\n  return false;\n}\n\n\n/****************** end of static functions ******************************/\n\nServo::Servo()\n{\n  if( ServoCount \u003c MAX_SERVOS) {\n    this-\u003eservoIndex = ServoCount++;                    // assign a servo index to this instance\n\tservos[this-\u003eservoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009\n  }\n  else\n    this-\u003eservoIndex = INVALID_SERVO ;  // too many servos\n}\n\nuint8_t Servo::attach(int pin)\n{\n  return this-\u003eattach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);\n}\n\nuint8_t Servo::attach(int pin, int min, int max)\n{\n  if(this-\u003eservoIndex \u003c MAX_SERVOS ) {\n    pinMode( pin, OUTPUT) ;                                   // set servo pin to output\n    servos[this-\u003eservoIndex].Pin.nbr = pin;\n    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 \u003c 128\n    this-\u003emin  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS\n    this-\u003emax  = (MAX_PULSE_WIDTH - max)/4;\n    // initialize the timer if it has not already been initialized\n    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n    if(isTimerActive(timer) == false)\n      initISR(timer);\n    servos[this-\u003eservoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive\n  }\n  return this-\u003eservoIndex ;\n}\n\nvoid Servo::detach()\n{\n  servos[this-\u003eservoIndex].Pin.isActive = false;\n  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n  if(isTimerActive(timer) == false) {\n    finISR(timer);\n  }\n}\n\nvoid Servo::write(int value)\n{\n  if(value \u003c MIN_PULSE_WIDTH)\n  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)\n    if(value \u003c 0) value = 0;\n    if(value \u003e 180) value = 180;\n    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());\n  }\n  this-\u003ewriteMicroseconds(value);\n}\n\nvoid Servo::writeMicroseconds(int value)\n{\n  // calculate and store the values for the given channel\n  byte channel = this-\u003eservoIndex;\n  if( (channel \u003c MAX_SERVOS) )   // ensure channel is valid\n  {\n    if( value \u003c SERVO_MIN() )          // ensure pulse width is valid\n      value = SERVO_MIN();\n    else if( value \u003e SERVO_MAX() )\n      value = SERVO_MAX();\n\n    value = value - TRIM_DURATION;\n    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009\n\n    uint8_t oldSREG = SREG;\n    cli();\n    servos[channel].ticks = value;\n    SREG = oldSREG;\n  }\n}\n\nint Servo::read() // return the value as degrees\n{\n  return  map( this-\u003ereadMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);\n}\n\nint Servo::readMicroseconds()\n{\n  unsigned int pulsewidth;\n  if( this-\u003eservoIndex != INVALID_SERVO )\n    pulsewidth = ticksToUs(servos[this-\u003eservoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009\n  else\n    pulsewidth  = 0;\n\n  return pulsewidth;\n}\n\nbool Servo::attached()\n{\n  return servos[this-\u003eservoIndex].Pin.isActive ;\n}\n\n#endif // ARDUINO_ARCH_AVR\n\n"}},"jsonrpc":"2.0"}Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":19},"end":{"line":49,"character":19}},"context":{"diagnostics":[]}},"id":398,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":398,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 167

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 177

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":28}},"id":399,"jsonrpc":"2.0"}
<<<
Content-Length: 829

{"id":399,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":15,"line":44},"start":{"character":4,"line":44}}},{"kind":1,"range":{"end":{"character":15,"line":45},"start":{"character":4,"line":45}}},{"kind":1,"range":{"end":{"character":15,"line":46},"start":{"character":4,"line":46}}},{"kind":1,"range":{"end":{"character":15,"line":53},"start":{"character":4,"line":53}}},{"kind":1,"range":{"end":{"character":19,"line":54},"start":{"character":8,"line":54}}},{"kind":1,"range":{"end":{"character":15,"line":55},"start":{"character":4,"line":55}}},{"kind":1,"range":{"end":{"character":15,"line":62},"start":{"character":4,"line":62}}},{"kind":1,"range":{"end":{"character":15,"line":63},"start":{"character":4,"line":63}}},{"kind":1,"range":{"end":{"character":15,"line":64},"start":{"character":4,"line":64}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":28},"end":{"line":54,"character":28}},"context":{"diagnostics":[]}},"id":400,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":400,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":49,"character":26},"end":{"line":49,"character":26}},"context":{"diagnostics":[]}},"id":401,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":401,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":25}},"id":402,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":402,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":24}},"id":403,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":403,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":24,"line":45},"start":{"character":23,"line":45}}}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":21}},"id":404,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":404,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":21}},"id":405,"jsonrpc":"2.0"}
<<<
Content-Length: 307

{"id":405,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `bluePin`  \n\n---\nType: `const int`  \nValue = `6`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int bluePin = 6\n```"},"range":{"end":{"character":23,"line":45},"start":{"character":16,"line":45}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":44,"character":26}},"id":406,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":406,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":44,"character":24},"end":{"line":44,"character":27}},"context":{"diagnostics":[]}},"id":407,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":407,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":27,"line":44},"start":{"character":24,"line":44}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":52,"character":26}},"id":408,"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"id":408,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `distance`  \n\n---\nType: `float`  \nValue = `0.000000e+00`  \n\n---\n```cpp\nfloat distance = 0\n```"},"range":{"end":{"character":26,"line":52},"start":{"character":18,"line":52}}}}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":52,"character":26}},"id":409,"jsonrpc":"2.0"}
<<<
Content-Length: 568

{"id":409,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}}},{"kind":3,"range":{"end":{"character":10,"line":37},"start":{"character":2,"line":37}}},{"kind":2,"range":{"end":{"character":23,"line":39},"start":{"character":15,"line":39}}},{"kind":2,"range":{"end":{"character":14,"line":42},"start":{"character":6,"line":42}}},{"kind":2,"range":{"end":{"character":26,"line":52},"start":{"character":18,"line":52}}},{"kind":2,"range":{"end":{"character":38,"line":52},"start":{"character":30,"line":52}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":26},"end":{"line":52,"character":26}},"context":{"diagnostics":[]}},"id":410,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":410,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":25}},"id":411,"jsonrpc":"2.0"}
<<<
Content-Length: 480

{"id":411,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":2,"range":{"end":{"character":18,"line":29},"start":{"character":10,"line":29}}},{"kind":2,"range":{"end":{"character":24,"line":46},"start":{"character":16,"line":46}}},{"kind":2,"range":{"end":{"character":28,"line":54},"start":{"character":20,"line":54}}},{"kind":2,"range":{"end":{"character":24,"line":63},"start":{"character":16,"line":63}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":25},"end":{"line":54,"character":25}},"context":{"diagnostics":[]}},"id":412,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":412,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":25}},"id":413,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":413,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":25}},"id":414,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":414,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":53,"character":24},"end":{"line":53,"character":27}},"context":{"diagnostics":[]}},"id":415,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":415,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":27,"line":53},"start":{"character":24,"line":53}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":292},"contentChanges":[{"range":{"start":{"line":53,"character":24},"end":{"line":53,"character":27}},"rangeLength":3,"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":292}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":53,"character":25},"end":{"line":53,"character":25}},"context":{"diagnostics":[]}},"id":416,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":416,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":293},"contentChanges":[{"range":{"start":{"line":53,"character":25},"end":{"line":53,"character":25}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":293}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":25}},"id":417,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":417,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":53,"character":26},"end":{"line":53,"character":26}},"context":{"diagnostics":[]}},"id":418,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":418,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":294},"contentChanges":[{"range":{"start":{"line":53,"character":26},"end":{"line":53,"character":26}},"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":294}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":53,"character":27},"end":{"line":53,"character":27}},"context":{"diagnostics":[]}},"id":419,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":419,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":53,"character":29}},"id":420,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":420,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":30}},"id":421,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":421,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":30},"end":{"line":54,"character":30}},"context":{"diagnostics":[]}},"id":422,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":422,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":30},"end":{"line":54,"character":33}},"context":{"diagnostics":[]}},"id":423,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":423,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":33,"line":54},"start":{"character":30,"line":54}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":295},"contentChanges":[{"range":{"start":{"line":54,"character":30},"end":{"line":54,"character":33}},"rangeLength":3,"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":295}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":296},"contentChanges":[{"range":{"start":{"line":54,"character":31},"end":{"line":54,"character":31}},"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":296}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":29}},"id":424,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":424,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":29,"line":54},"start":{"character":28,"line":54}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":32},"end":{"line":54,"character":32}},"context":{"diagnostics":[]}},"id":425,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":425,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":297},"contentChanges":[{"range":{"start":{"line":54,"character":32},"end":{"line":54,"character":32}},"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":297}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":54,"character":33},"end":{"line":54,"character":33}},"context":{"diagnostics":[]}},"id":426,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":426,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":30}},"id":427,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":427,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":29}},"id":428,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":428,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":29,"line":54},"start":{"character":28,"line":54}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":26}},"id":429,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":429,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"end":{"character":27,"line":55},"start":{"character":26,"line":55}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":25}},"id":430,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":430,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":25}},"id":431,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":431,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":25}},"id":432,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":432,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":55,"character":25},"end":{"line":55,"character":26}},"context":{"diagnostics":[]}},"id":433,"jsonrpc":"2.0"}
<<<
Content-Length: 449

{"id":433,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":26,"line":55},"start":{"character":25,"line":55}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":298},"contentChanges":[{"range":{"start":{"line":55,"character":25},"end":{"line":55,"character":26}},"rangeLength":1,"text":"5"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":298}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":55,"character":26},"end":{"line":55,"character":26}},"context":{"diagnostics":[]}},"id":434,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":434,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":32}},"id":435,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":435,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":54,"character":31}},"id":436,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":436,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":45,"character":15}},"id":437,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":437,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":52,"character":46},"end":{"line":52,"character":46}},"context":{"diagnostics":[]}},"id":438,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":438,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":53,"character":29},"end":{"line":53,"character":29}},"context":{"diagnostics":[]}},"id":439,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":439,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":52,"character":31}},"id":440,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":440,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":11},"start":{"character":6,"line":11}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":9,"character":22},"end":{"line":9,"character":22}},"context":{"diagnostics":[]}},"id":441,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":441,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":299},"contentChanges":[{"range":{"start":{"line":9,"character":22},"end":{"line":9,"character":22}},"text":"\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":299}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":300},"contentChanges":[{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":0}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'i'","range":{"end":{"character":1,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":300}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":301},"contentChanges":[{"range":{"start":{"line":10,"character":1},"end":{"line":10,"character":1}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 405

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'in'","range":{"end":{"character":2,"line":10},"start":{"character":0,"line":10}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":301}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":302},"contentChanges":[{"range":{"start":{"line":10,"character":2},"end":{"line":10,"character":2}},"text":"t"}]},"jsonrpc":"2.0"}Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":303},"contentChanges":[{"range":{"start":{"line":10,"character":3},"end":{"line":10,"character":3}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 452

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'int' declaration specifier","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":302}}Content-Length: 452

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_decl_spec_combination","message":"Cannot combine with previous 'int' declaration specifier","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":303}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":304},"contentChanges":[{"range":{"start":{"line":10,"character":4},"end":{"line":10,"character":4}},"text":"b"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 461

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":304}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":5}},"context":{"diagnostics":[]}},"id":442,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":442,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":305},"contentChanges":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":5}},"text":"u"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 461

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":305}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":306},"contentChanges":[{"range":{"start":{"line":10,"character":6},"end":{"line":10,"character":6}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 461

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":306}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":307},"contentChanges":[{"range":{"start":{"line":10,"character":7},"end":{"line":10,"character":7}},"text":"t"}]},"jsonrpc":"2.0"}Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":308},"contentChanges":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 461

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":308}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":309},"contentChanges":[{"range":{"start":{"line":10,"character":9},"end":{"line":10,"character":9}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 461

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":309}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":10,"character":10},"end":{"line":10,"character":10}},"context":{"diagnostics":[]}},"id":443,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":443,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":310},"contentChanges":[{"range":{"start":{"line":10,"character":10},"end":{"line":10,"character":10}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 461

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":310}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":311},"contentChanges":[{"range":{"start":{"line":10,"character":11},"end":{"line":10,"character":11}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 461

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":311}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":312},"contentChanges":[{"range":{"start":{"line":10,"character":12},"end":{"line":10,"character":12}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 461

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":5,"line":12},"start":{"character":0,"line":12}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":312}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":313},"contentChanges":[{"range":{"start":{"line":10,"character":13},"end":{"line":10,"character":13}},"text":" "}]},"jsonrpc":"2.0"}Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":314},"contentChanges":[{"range":{"start":{"line":10,"character":14},"end":{"line":10,"character":14}},"text":"="}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1399

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'distance'","range":{"end":{"character":10,"line":38},"start":{"character":2,"line":38}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'distance'","range":{"end":{"character":23,"line":40},"start":{"character":15,"line":40}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'distance'","range":{"end":{"character":14,"line":43},"start":{"character":6,"line":43}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'distance'","range":{"end":{"character":26,"line":53},"start":{"character":18,"line":53}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'distance'","range":{"end":{"character":38,"line":53},"start":{"character":30,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":314}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":315},"contentChanges":[{"range":{"start":{"line":10,"character":15},"end":{"line":10,"character":15}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 1399

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'distance'","range":{"end":{"character":10,"line":38},"start":{"character":2,"line":38}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'distance'","range":{"end":{"character":23,"line":40},"start":{"character":15,"line":40}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'distance'","range":{"end":{"character":14,"line":43},"start":{"character":6,"line":43}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'distance'","range":{"end":{"character":26,"line":53},"start":{"character":18,"line":53}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'distance'","range":{"end":{"character":38,"line":53},"start":{"character":30,"line":53}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":315}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":316},"contentChanges":[{"range":{"start":{"line":10,"character":16},"end":{"line":10,"character":16}},"text":"2"}]},"jsonrpc":"2.0"}Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":317},"contentChanges":[{"range":{"start":{"line":10,"character":17},"end":{"line":10,"character":17}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":317}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":10,"character":18},"end":{"line":10,"character":18}},"context":{"diagnostics":[]}},"id":444,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":444,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":445,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":445,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":34},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":69},"start":{"character":0,"line":36}},"selectionRange":{"end":{"character":9,"line":36},"start":{"character":5,"line":36}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":84},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":17,"line":72},"start":{"character":6,"line":72}}}]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":9,"character":21}},"id":446,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":446,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":18}},"context":{"diagnostics":[]}},"id":447,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":447,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":9,"character":0},"end":{"line":10,"character":18}},"context":{"diagnostics":[]}},"id":448,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":448,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":10,"character":18},"end":{"line":10,"character":18}},"context":{"diagnostics":[]}},"id":449,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":449,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":18}},"context":{"diagnostics":[]}},"id":450,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":450,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":24,"character":19}},"id":451,"jsonrpc":"2.0"}
<<<
Content-Length: 231

{"id":451,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":120},"start":{"character":9,"line":120}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}]}
>>>
Content-Length: 5693

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h","languageId":"cpp","version":1,"text":"/*\n  HardwareSerial.h - Hardware serial library for Wiring\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 28 September 2010 by Mark Sproul\n  Modified 14 August 2012 by Alarus\n  Modified 3 December 2013 by Matthijs Kooijman\n*/\n\n#ifndef HardwareSerial_h\n#define HardwareSerial_h\n\n#include \u003cinttypes.h\u003e\n\n#include \"Stream.h\"\n\n// Define constants and variables for buffering incoming serial data.  We're\n// using a ring buffer (I think), in which head is the index of the location\n// to which to write the next incoming character and tail is the index of the\n// location from which to read.\n// NOTE: a \"power of 2\" buffer size is reccomended to dramatically\n//       optimize all the modulo operations for ring buffers.\n// WARNING: When buffer sizes are increased to \u003e 256, the buffer index\n// variables are automatically increased in size, but the extra\n// atomicity guards needed for that are not implemented. This will\n// often work, but occasionally a race condition can occur that makes\n// Serial behave erratically. See https://github.com/arduino/Arduino/issues/2405\n#if !defined(SERIAL_TX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) \u003c 1023)\n#define SERIAL_TX_BUFFER_SIZE 16\n#else\n#define SERIAL_TX_BUFFER_SIZE 64\n#endif\n#endif\n#if !defined(SERIAL_RX_BUFFER_SIZE)\n#if ((RAMEND - RAMSTART) \u003c 1023)\n#define SERIAL_RX_BUFFER_SIZE 16\n#else\n#define SERIAL_RX_BUFFER_SIZE 64\n#endif\n#endif\n#if (SERIAL_TX_BUFFER_SIZE\u003e256)\ntypedef uint16_t tx_buffer_index_t;\n#else\ntypedef uint8_t tx_buffer_index_t;\n#endif\n#if  (SERIAL_RX_BUFFER_SIZE\u003e256)\ntypedef uint16_t rx_buffer_index_t;\n#else\ntypedef uint8_t rx_buffer_index_t;\n#endif\n\n// Define config for Serial.begin(baud, config);\n#define SERIAL_5N1 0x00\n#define SERIAL_6N1 0x02\n#define SERIAL_7N1 0x04\n#define SERIAL_8N1 0x06\n#define SERIAL_5N2 0x08\n#define SERIAL_6N2 0x0A\n#define SERIAL_7N2 0x0C\n#define SERIAL_8N2 0x0E\n#define SERIAL_5E1 0x20\n#define SERIAL_6E1 0x22\n#define SERIAL_7E1 0x24\n#define SERIAL_8E1 0x26\n#define SERIAL_5E2 0x28\n#define SERIAL_6E2 0x2A\n#define SERIAL_7E2 0x2C\n#define SERIAL_8E2 0x2E\n#define SERIAL_5O1 0x30\n#define SERIAL_6O1 0x32\n#define SERIAL_7O1 0x34\n#define SERIAL_8O1 0x36\n#define SERIAL_5O2 0x38\n#define SERIAL_6O2 0x3A\n#define SERIAL_7O2 0x3C\n#define SERIAL_8O2 0x3E\n\nclass HardwareSerial : public Stream\n{\n  protected:\n    volatile uint8_t * const _ubrrh;\n    volatile uint8_t * const _ubrrl;\n    volatile uint8_t * const _ucsra;\n    volatile uint8_t * const _ucsrb;\n    volatile uint8_t * const _ucsrc;\n    volatile uint8_t * const _udr;\n    // Has any byte been written to the UART since begin()\n    bool _written;\n\n    volatile rx_buffer_index_t _rx_buffer_head;\n    volatile rx_buffer_index_t _rx_buffer_tail;\n    volatile tx_buffer_index_t _tx_buffer_head;\n    volatile tx_buffer_index_t _tx_buffer_tail;\n\n    // Don't put any members after these buffers, since only the first\n    // 32 bytes of this struct can be accessed quickly using the ldd\n    // instruction.\n    unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];\n    unsigned char _tx_buffer[SERIAL_TX_BUFFER_SIZE];\n\n  public:\n    inline HardwareSerial(\n      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,\n      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,\n      volatile uint8_t *ucsrc, volatile uint8_t *udr);\n    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }\n    void begin(unsigned long, uint8_t);\n    void end();\n    virtual int available(void);\n    virtual int peek(void);\n    virtual int read(void);\n    virtual int availableForWrite(void);\n    virtual void flush(void);\n    virtual size_t write(uint8_t);\n    inline size_t write(unsigned long n) { return write((uint8_t)n); }\n    inline size_t write(long n) { return write((uint8_t)n); }\n    inline size_t write(unsigned int n) { return write((uint8_t)n); }\n    inline size_t write(int n) { return write((uint8_t)n); }\n    using Print::write; // pull in write(str) and write(buf, size) from Print\n    operator bool() { return true; }\n\n    // Interrupt handlers - Not intended to be called externally\n    inline void _rx_complete_irq(void);\n    void _tx_udr_empty_irq(void);\n};\n\n#if defined(UBRRH) || defined(UBRR0H)\n  extern HardwareSerial Serial;\n  #define HAVE_HWSERIAL0\n#endif\n#if defined(UBRR1H)\n  extern HardwareSerial Serial1;\n  #define HAVE_HWSERIAL1\n#endif\n#if defined(UBRR2H)\n  extern HardwareSerial Serial2;\n  #define HAVE_HWSERIAL2\n#endif\n#if defined(UBRR3H)\n  extern HardwareSerial Serial3;\n  #define HAVE_HWSERIAL3\n#endif\n\nextern void serialEventRun(void) __attribute__((weak));\n\n#endif\n"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h"}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":26,"character":23}},"id":452,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":452,"jsonrpc":"2.0","result":[{"range":{"end":{"character":14,"line":43},"start":{"character":8,"line":43}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}]}
>>>
Content-Length: 8302

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n\n#include \u003cavr/pgmspace.h\u003e\n#include \u003cavr/io.h\u003e\n#include \u003cavr/interrupt.h\u003e\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)\u003c(b)?(a):(b))\n#define max(a,b) ((a)\u003e(b)?(a):(b))\n#define abs(x) ((x)\u003e0?(x):-(x))\n#define constrain(amt,low,high) ((amt)\u003c(low)?(low):((amt)\u003e(high)?(high):(amt)))\n#define round(x)     ((x)\u003e=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) \u0026 0xff))\n#define highByte(w) ((uint8_t) ((w) \u003e\u003e 8))\n\n#define bitRead(value, bit) (((value) \u003e\u003e (bit)) \u0026 0x01)\n#define bitSet(value, bit) ((value) |= (1UL \u003c\u003c (bit)))\n#define bitClear(value, bit) ((value) \u0026= ~(1UL \u003c\u003c (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL \u003c\u003c (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL \u003c\u003c (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) \u0026\u0026 defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}},"jsonrpc":"2.0"}Content-Length: 184

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":27,"character":26},"end":{"line":27,"character":26}},"context":{"diagnostics":[]}},"id":453,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":453,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 341

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":318},"contentChanges":[{"range":{"start":{"line":27,"character":26},"end":{"line":27,"character":26}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":318}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":319},"contentChanges":[{"range":{"start":{"line":28,"character":2},"end":{"line":28,"character":2}},"text":"p"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'p'","range":{"end":{"character":3,"line":28},"start":{"character":2,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":319}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":320},"contentChanges":[{"range":{"start":{"line":28,"character":3},"end":{"line":28,"character":3}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 405

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'pi'","range":{"end":{"character":4,"line":28},"start":{"character":2,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":320}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":321},"contentChanges":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":4}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 846

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pin'; did you mean 'sin'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/../lib/gcc/avr/7.3.0/../../../../avr/include/math.h:133:15:\nnote: 'sin' declared here","range":{"end":{"character":5,"line":28},"start":{"character":2,"line":28}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":321}}
>>>
Content-Length: 738

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":5},"end":{"line":28,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":28,"character":2},"end":{"line":28,"character":5}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'pin'; did you mean 'sin'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/../lib/gcc/avr/7.3.0/../../../../avr/include/math.h:133:15:\nnote: 'sin' declared here"}]}},"id":454,"jsonrpc":"2.0"}
<<<
Content-Length: 780

{"id":454,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pin'; did you mean 'sin'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/../lib/gcc/avr/7.3.0/../../../../avr/include/math.h:133:15:\nnote: 'sin' declared here","range":{"end":{"character":5,"line":28},"start":{"character":2,"line":28}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"sin","range":{"end":{"character":5,"line":28},"start":{"character":2,"line":28}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'pin' to 'sin'"}]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":322},"contentChanges":[{"range":{"start":{"line":28,"character":5},"end":{"line":28,"character":5}},"text":"M"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 407

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'pinM'","range":{"end":{"character":6,"line":28},"start":{"character":2,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":322}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":323},"contentChanges":[{"range":{"start":{"line":28,"character":6},"end":{"line":28,"character":6}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 408

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'pinMo'","range":{"end":{"character":7,"line":28},"start":{"character":2,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":323}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":324},"contentChanges":[{"range":{"start":{"line":28,"character":7},"end":{"line":28,"character":7}},"text":"d"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 803

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'pinMod'; did you mean 'pinMode'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: 'pinMode' declared here","range":{"end":{"character":8,"line":28},"start":{"character":2,"line":28}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":324}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":325},"contentChanges":[{"range":{"start":{"line":28,"character":8},"end":{"line":28,"character":8}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":325}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":9},"end":{"line":28,"character":9}},"context":{"diagnostics":[]}},"id":455,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":455,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":456,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":456,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":70},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":85},"start":{"character":0,"line":73}},"selectionRange":{"end":{"character":17,"line":73},"start":{"character":6,"line":73}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":326},"contentChanges":[{"range":{"start":{"line":28,"character":9},"end":{"line":28,"character":9}},"text":"()"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 820

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'pinMode'\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: candidate function not viable: requires 2 arguments, but 0 were provided","range":{"end":{"character":9,"line":28},"start":{"character":2,"line":28}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":326}}
>>>
Content-Length: 265

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":28,"character":10}},"id":457,"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"id":457,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[{"label":"pinMode(uint8_t pin, uint8_t mode) -> void","parameters":[{"label":[8,19]},{"label":[21,33]}]}]}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":10}},"context":{"diagnostics":[]}},"id":458,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":458,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":459,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":459,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":70},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":85},"start":{"character":0,"line":73}},"selectionRange":{"end":{"character":17,"line":73},"start":{"character":6,"line":73}}}]}
>>>
Content-Length: 355

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":327},"contentChanges":[{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":10}},"text":"int buttonPin = 2;"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 452

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_lparen_after_type","message":"Expected '(' for function-style cast or type construction","range":{"end":{"character":23,"line":28},"start":{"character":14,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":327}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":28},"end":{"line":28,"character":28}},"context":{"diagnostics":[]}},"id":460,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":460,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 354

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":328},"contentChanges":[{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":28}},"rangeLength":18,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 820

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'pinMode'\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: candidate function not viable: requires 2 arguments, but 0 were provided","range":{"end":{"character":9,"line":28},"start":{"character":2,"line":28}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":328}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":10}},"context":{"diagnostics":[]}},"id":461,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":461,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":462,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":462,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":70},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":85},"start":{"character":0,"line":73}},"selectionRange":{"end":{"character":17,"line":73},"start":{"character":6,"line":73}}}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":329},"contentChanges":[{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":10}},"text":"b"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 619

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":11,"line":28},"start":{"character":10,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":329}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":330},"contentChanges":[{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":11}},"text":"u"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 620

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bu'","range":{"end":{"character":12,"line":28},"start":{"character":10,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":330}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":331},"contentChanges":[{"range":{"start":{"line":28,"character":12},"end":{"line":28,"character":12}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 621

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'but'","range":{"end":{"character":13,"line":28},"start":{"character":10,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":331}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":332},"contentChanges":[{"range":{"start":{"line":28,"character":13},"end":{"line":28,"character":13}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 622

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'butt'","range":{"end":{"character":14,"line":28},"start":{"character":10,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":332}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":333},"contentChanges":[{"range":{"start":{"line":28,"character":14},"end":{"line":28,"character":14}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 623

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'butto'","range":{"end":{"character":15,"line":28},"start":{"character":10,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":333}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":334},"contentChanges":[{"range":{"start":{"line":28,"character":15},"end":{"line":28,"character":15}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 624

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'button'","range":{"end":{"character":16,"line":28},"start":{"character":10,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":334}}
>>>
Content-Length: 518

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":16},"end":{"line":28,"character":16}},"context":{"diagnostics":[{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'button'"}]}},"id":463,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":463,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":464,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":464,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":70},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":85},"start":{"character":0,"line":73}},"selectionRange":{"end":{"character":17,"line":73},"start":{"character":6,"line":73}}}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":335},"contentChanges":[{"range":{"start":{"line":28,"character":16},"end":{"line":28,"character":16}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 625

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'buttonP'","range":{"end":{"character":17,"line":28},"start":{"character":10,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":335}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":336},"contentChanges":[{"range":{"start":{"line":28,"character":17},"end":{"line":28,"character":17}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 626

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'buttonPi'","range":{"end":{"character":18,"line":28},"start":{"character":10,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":336}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":337},"contentChanges":[{"range":{"start":{"line":28,"character":18},"end":{"line":28,"character":18}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 819

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'pinMode'\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:134:6:\nnote: candidate function not viable: requires 2 arguments, but 1 was provided","range":{"end":{"character":9,"line":28},"start":{"character":2,"line":28}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":337}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":19},"end":{"line":28,"character":19}},"context":{"diagnostics":[]}},"id":465,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":465,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":466,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":466,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":70},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":85},"start":{"character":0,"line":73}},"selectionRange":{"end":{"character":17,"line":73},"start":{"character":6,"line":73}}}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":338},"contentChanges":[{"range":{"start":{"line":28,"character":19},"end":{"line":28,"character":19}},"text":","}]},"jsonrpc":"2.0"}
<<<
Content-Length: 407

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":21,"line":28},"start":{"character":20,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":338}}
>>>
Content-Length: 265

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":28,"character":20}},"id":467,"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"id":467,"jsonrpc":"2.0","result":{"activeParameter":1,"activeSignature":0,"signatures":[{"label":"pinMode(uint8_t pin, uint8_t mode) -> void","parameters":[{"label":[8,19]},{"label":[21,33]}]}]}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":339},"contentChanges":[{"range":{"start":{"line":28,"character":20},"end":{"line":28,"character":20}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 407

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":22,"line":28},"start":{"character":21,"line":28}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":339}}
>>>
Content-Length: 501

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":21},"end":{"line":28,"character":21}},"context":{"diagnostics":[{"range":{"start":{"line":28,"character":21},"end":{"line":28,"character":22}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":468,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":468,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":27,"character":25}},"id":469,"jsonrpc":"2.0"}
<<<
Content-Length: 313

{"id":469,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `pinMode`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t mode`\n\n---\n```cpp\nvoid pinMode(uint8_t pin, uint8_t mode)\n```"},"range":{"end":{"character":26,"line":27},"start":{"character":25,"line":27}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":26,"character":24}},"id":470,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"id":470,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `OUTPUT`  \n\n---\n```cpp\n#define OUTPUT 0x1\n```"},"range":{"end":{"character":25,"line":26},"start":{"character":19,"line":26}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":26,"character":25}},"id":471,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"id":471,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `OUTPUT`  \n\n---\n```cpp\n#define OUTPUT 0x1\n```"},"range":{"end":{"character":25,"line":26},"start":{"character":19,"line":26}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":26,"character":27},"end":{"line":26,"character":27}},"context":{"diagnostics":[]}},"id":472,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":472,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":26,"character":26}},"id":473,"jsonrpc":"2.0"}
<<<
Content-Length: 313

{"id":473,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `pinMode`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t mode`\n\n---\n```cpp\nvoid pinMode(uint8_t pin, uint8_t mode)\n```"},"range":{"end":{"character":27,"line":26},"start":{"character":26,"line":26}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":26,"character":27}},"id":474,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":474,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":26,"character":27}},"id":475,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":475,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":22,"character":14},"end":{"line":22,"character":14}},"context":{"diagnostics":[]}},"id":476,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":476,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":23,"character":19}},"id":477,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":477,"jsonrpc":"2.0","result":[{"range":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":23,"character":12}},"id":478,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":478,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":13,"character":14}},"id":479,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":479,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `microServo`  \n\n---\nType: `class Servo`  \n\n---\n```cpp\nServo microServo\n```"},"range":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":13,"character":15}},"id":480,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":480,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `microServo`  \n\n---\nType: `class Servo`  \n\n---\n```cpp\nServo microServo\n```"},"range":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}}}
>>>
Content-Length: 349

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":340},"contentChanges":[{"range":{"start":{"line":28,"character":21},"end":{"line":28,"character":21}},"text":"INPUT_PULLUP"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":27,"character":21}},"id":481,"jsonrpc":"2.0"}
<<<
Content-Length: 222

{"id":481,"jsonrpc":"2.0","result":[{"range":{"end":{"character":13,"line":42},"start":{"character":8,"line":42}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}]}Content-Length: 436

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":340}}
>>>
Content-Length: 8302

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include \u003cstdlib.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cmath.h\u003e\n\n#include \u003cavr/pgmspace.h\u003e\n#include \u003cavr/io.h\u003e\n#include \u003cavr/interrupt.h\u003e\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)\u003c(b)?(a):(b))\n#define max(a,b) ((a)\u003e(b)?(a):(b))\n#define abs(x) ((x)\u003e0?(x):-(x))\n#define constrain(amt,low,high) ((amt)\u003c(low)?(low):((amt)\u003e(high)?(high):(amt)))\n#define round(x)     ((x)\u003e=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) \u0026 0xff))\n#define highByte(w) ((uint8_t) ((w) \u003e\u003e 8))\n\n#define bitRead(value, bit) (((value) \u003e\u003e (bit)) \u0026 0x01)\n#define bitSet(value, bit) ((value) |= (1UL \u003c\u003c (bit)))\n#define bitClear(value, bit) ((value) \u0026= ~(1UL \u003c\u003c (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL \u003c\u003c (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL \u003c\u003c (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) \u0026\u0026 defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}},"jsonrpc":"2.0"}Content-Length: 184

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}},"jsonrpc":"2.0"}
<<<
Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":26,"character":26}},"id":482,"jsonrpc":"2.0"}
<<<
Content-Length: 313

{"id":482,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `pinMode`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t mode`\n\n---\n```cpp\nvoid pinMode(uint8_t pin, uint8_t mode)\n```"},"range":{"end":{"character":27,"line":26},"start":{"character":26,"line":26}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":33},"end":{"line":28,"character":33}},"context":{"diagnostics":[]}},"id":483,"jsonrpc":"2.0"}
<<<
Content-Length: 433

{"id":483,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":33,"line":28},"start":{"character":33,"line":28}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'INPUT_PULLUP'"},"kind":"refactor","title":"Expand macro 'INPUT_PULLUP'"}]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":13}},"id":484,"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"id":484,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `const int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int redPin = 3\n```"},"range":{"end":{"character":16,"line":30},"start":{"character":10,"line":30}}}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":13}},"id":485,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":485,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":9}},"id":486,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"id":486,"jsonrpc":"2.0","result":[{"range":{"end":{"character":12,"line":28},"start":{"character":5,"line":28}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}]}
>>>
Content-Length: 5753

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg \u0026= ~bit;\n\t\t*out \u0026= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg \u0026= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out \u0026= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) \u0026 bit) return HIGH;\n\treturn LOW;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":4}},"id":487,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"id":487,"jsonrpc":"2.0","result":[{"range":{"end":{"character":12,"line":28},"start":{"character":5,"line":28}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}]}
>>>
Content-Length: 5753

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg \u0026= ~bit;\n\t\t*out \u0026= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg \u0026= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out \u0026= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) \u0026 bit) return HIGH;\n\treturn LOW;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":30,"character":4}},"id":488,"jsonrpc":"2.0"}
<<<
Content-Length: 311

{"id":488,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `pinMode`  \n\n---\n→ `void`  \nParameters:  \n- `uint8_t pin`\n- `uint8_t mode`\n\n---\n```cpp\nvoid pinMode(uint8_t pin, uint8_t mode)\n```"},"range":{"end":{"character":9,"line":30},"start":{"character":2,"line":30}}}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":34},"end":{"line":28,"character":34}},"context":{"diagnostics":[]}},"id":489,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":489,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":341},"contentChanges":[{"range":{"start":{"line":28,"character":34},"end":{"line":28,"character":34}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":341}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":28,"character":35},"end":{"line":28,"character":35}},"context":{"diagnostics":[]}},"id":490,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":490,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":67,"character":3},"end":{"line":67,"character":3}},"context":{"diagnostics":[]}},"id":491,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":491,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":66,"character":22}},"id":492,"jsonrpc":"2.0"}
<<<
Content-Length: 307

{"id":492,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `bluePin`  \n\n---\nType: `const int`  \nValue = `6`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nconst int bluePin = 6\n```"},"range":{"end":{"character":23,"line":66},"start":{"character":16,"line":66}}}}
>>>
Content-Length: 339

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":342},"contentChanges":[{"range":{"start":{"line":67,"character":3},"end":{"line":67,"character":3}},"text":"\n  "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":342}}
>>>
Content-Length: 443

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":344},"contentChanges":[{"range":{"start":{"line":68,"character":2},"end":{"line":68,"character":2}},"text":"\n  "},{"range":{"start":{"line":68,"character":0},"end":{"line":68,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":344}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":345},"contentChanges":[{"range":{"start":{"line":69,"character":2},"end":{"line":69,"character":2}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'i'","range":{"end":{"character":3,"line":69},"start":{"character":2,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":345}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":346},"contentChanges":[{"range":{"start":{"line":69,"character":3},"end":{"line":69,"character":3}},"text":"f"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 411

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_lparen_after","message":"Expected '(' after 'if'","range":{"end":{"character":7,"line":71},"start":{"character":2,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":346}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":347},"contentChanges":[{"range":{"start":{"line":69,"character":4},"end":{"line":69,"character":4}},"text":"()"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 405

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":6,"line":69},"start":{"character":5,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":347}}
>>>
Content-Length: 264

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":5}},"id":493,"jsonrpc":"2.0"}
<<<
Content-Length: 93

{"id":493,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[]}}
>>>
Content-Length: 497

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":5},"end":{"line":69,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":5},"end":{"line":69,"character":6}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":494,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":494,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":348},"contentChanges":[{"range":{"start":{"line":69,"character":5},"end":{"line":69,"character":5}},"text":"d"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'd'","range":{"end":{"character":6,"line":69},"start":{"character":5,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":348}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":349},"contentChanges":[{"range":{"start":{"line":69,"character":6},"end":{"line":69,"character":6}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'di'","range":{"end":{"character":7,"line":69},"start":{"character":5,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":349}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":350},"contentChanges":[{"range":{"start":{"line":69,"character":7},"end":{"line":69,"character":7}},"text":"g"}]},"jsonrpc":"2.0"}Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":351},"contentChanges":[{"range":{"start":{"line":69,"character":8},"end":{"line":69,"character":8}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 648

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'dig'; did you mean 'div'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/../lib/gcc/avr/7.3.0/../../../../avr/include/stdlib.h:162:14:\nnote: 'div' declared here","range":{"end":{"character":8,"line":69},"start":{"character":5,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":350}}Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'digi'","range":{"end":{"character":9,"line":69},"start":{"character":5,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":351}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":352},"contentChanges":[{"range":{"start":{"line":69,"character":9},"end":{"line":69,"character":9}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 422

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'digit'","range":{"end":{"character":10,"line":69},"start":{"character":5,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":352}}
>>>
Content-Length: 516

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":10},"end":{"line":69,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":5},"end":{"line":69,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'digit'"}]}},"id":495,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":495,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":496,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":496,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":72},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":87},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":17,"line":75},"start":{"character":6,"line":75}}}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":353},"contentChanges":[{"range":{"start":{"line":69,"character":10},"end":{"line":69,"character":10}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 423

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'digita'","range":{"end":{"character":11,"line":69},"start":{"character":5,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":353}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":354},"contentChanges":[{"range":{"start":{"line":69,"character":11},"end":{"line":69,"character":11}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 424

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'digital'","range":{"end":{"character":12,"line":69},"start":{"character":5,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":354}}
>>>
Content-Length: 518

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":5},"end":{"line":69,"character":12}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'digital'"}]}},"id":497,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":497,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":498,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":498,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":72},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":87},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":17,"line":75},"start":{"character":6,"line":75}}}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":355},"contentChanges":[{"range":{"start":{"line":69,"character":12},"end":{"line":69,"character":12}},"text":"R"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 425

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'digitalR'","range":{"end":{"character":13,"line":69},"start":{"character":5,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":355}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":356},"contentChanges":[{"range":{"start":{"line":69,"character":13},"end":{"line":69,"character":13}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 615

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'digitalRe'; did you mean 'digitalRead'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:136:5:\nnote: 'digitalRead' declared here","range":{"end":{"character":14,"line":69},"start":{"character":5,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":356}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":357},"contentChanges":[{"range":{"start":{"line":69,"character":14},"end":{"line":69,"character":14}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 616

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'digitalRea'; did you mean 'digitalRead'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:136:5:\nnote: 'digitalRead' declared here","range":{"end":{"character":15,"line":69},"start":{"character":5,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":357}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":358},"contentChanges":[{"range":{"start":{"line":69,"character":15},"end":{"line":69,"character":15}},"text":"d"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":358}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":16},"end":{"line":69,"character":16}},"context":{"diagnostics":[]}},"id":499,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":499,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":500,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":500,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":72},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":87},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":17,"line":75},"start":{"character":6,"line":75}}}]}
>>>
Content-Length: 339

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":359},"contentChanges":[{"range":{"start":{"line":69,"character":16},"end":{"line":69,"character":16}},"text":"()"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 646

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'digitalRead'\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:136:5:\nnote: candidate function not viable: requires single argument 'pin', but no arguments were provided","range":{"end":{"character":16,"line":69},"start":{"character":5,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":359}}
>>>
Content-Length: 265

{"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":17}},"id":501,"jsonrpc":"2.0"}
<<<
Content-Length: 169

{"id":501,"jsonrpc":"2.0","result":{"activeParameter":0,"activeSignature":0,"signatures":[{"label":"digitalRead(uint8_t pin) -> int","parameters":[{"label":[12,23]}]}]}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":17},"end":{"line":69,"character":17}},"context":{"diagnostics":[]}},"id":502,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":502,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":503,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":503,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":72},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":87},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":17,"line":75},"start":{"character":6,"line":75}}}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":360},"contentChanges":[{"range":{"start":{"line":69,"character":17},"end":{"line":69,"character":17}},"text":"b"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":18,"line":69},"start":{"character":17,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":360}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":361},"contentChanges":[{"range":{"start":{"line":69,"character":18},"end":{"line":69,"character":18}},"text":"u"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bu'","range":{"end":{"character":19,"line":69},"start":{"character":17,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":361}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":362},"contentChanges":[{"range":{"start":{"line":69,"character":19},"end":{"line":69,"character":19}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 421

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'but'","range":{"end":{"character":20,"line":69},"start":{"character":17,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":362}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":363},"contentChanges":[{"range":{"start":{"line":69,"character":20},"end":{"line":69,"character":20}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 422

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'butt'","range":{"end":{"character":21,"line":69},"start":{"character":17,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":363}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":364},"contentChanges":[{"range":{"start":{"line":69,"character":21},"end":{"line":69,"character":21}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 423

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'butto'","range":{"end":{"character":22,"line":69},"start":{"character":17,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":364}}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":365},"contentChanges":[{"range":{"start":{"line":69,"character":22},"end":{"line":69,"character":22}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 424

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'button'","range":{"end":{"character":23,"line":69},"start":{"character":17,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":365}}
>>>
Content-Length: 518

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":23},"end":{"line":69,"character":23}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":17},"end":{"line":69,"character":23}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'button'"}]}},"id":504,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":504,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":505,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":505,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":72},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":87},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":17,"line":75},"start":{"character":6,"line":75}}}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":366},"contentChanges":[{"range":{"start":{"line":69,"character":23},"end":{"line":69,"character":23}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 776

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'buttonP'; did you mean 'buttonPin'? (fix available)\n\nDistanceSensor.ino.cpp:11:5: note: 'buttonPin' declared here","range":{"end":{"character":24,"line":69},"start":{"character":17,"line":69}},"severity":1,"source":"clang"},{"message":"'buttonPin' declared here\n\nDistanceSensor.ino.cpp:70:18: error: use of undeclared identifier 'buttonP'; did you mean 'buttonPin'?","range":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":366}}
>>>
Content-Length: 634

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":24},"end":{"line":69,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":17},"end":{"line":69,"character":24}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'buttonP'; did you mean 'buttonPin'? (fix available)\n\nDistanceSensor.ino.cpp:11:5: note: 'buttonPin' declared here"}]}},"id":506,"jsonrpc":"2.0"}
<<<
Content-Length: 692

{"id":506,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'buttonP'; did you mean 'buttonPin'? (fix available)\n\nDistanceSensor.ino.cpp:11:5: note: 'buttonPin' declared here","range":{"end":{"character":24,"line":69},"start":{"character":17,"line":69}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"buttonPin","range":{"end":{"character":24,"line":69},"start":{"character":17,"line":69}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'buttonP' to 'buttonPin'"}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":367},"contentChanges":[{"range":{"start":{"line":69,"character":24},"end":{"line":69,"character":24}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 778

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'buttonPi'; did you mean 'buttonPin'? (fix available)\n\nDistanceSensor.ino.cpp:11:5: note: 'buttonPin' declared here","range":{"end":{"character":25,"line":69},"start":{"character":17,"line":69}},"severity":1,"source":"clang"},{"message":"'buttonPin' declared here\n\nDistanceSensor.ino.cpp:70:18: error: use of undeclared identifier 'buttonPi'; did you mean 'buttonPin'?","range":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":367}}
>>>
Content-Length: 635

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":25},"end":{"line":69,"character":25}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":17},"end":{"line":69,"character":25}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'buttonPi'; did you mean 'buttonPin'? (fix available)\n\nDistanceSensor.ino.cpp:11:5: note: 'buttonPin' declared here"}]}},"id":507,"jsonrpc":"2.0"}
<<<
Content-Length: 694

{"id":507,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'buttonPi'; did you mean 'buttonPin'? (fix available)\n\nDistanceSensor.ino.cpp:11:5: note: 'buttonPin' declared here","range":{"end":{"character":25,"line":69},"start":{"character":17,"line":69}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp":[{"newText":"buttonPin","range":{"end":{"character":25,"line":69},"start":{"character":17,"line":69}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'buttonPi' to 'buttonPin'"}]}
>>>
Content-Length: 338

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":368},"contentChanges":[{"range":{"start":{"line":69,"character":25},"end":{"line":69,"character":25}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":368}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":26},"end":{"line":69,"character":26}},"context":{"diagnostics":[]}},"id":508,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":508,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp"}},"id":509,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":509,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":72},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":87},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":17,"line":75},"start":{"character":6,"line":75}}}]}
>>>
Content-Length: 700

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":369},"contentChanges":[{"range":{"start":{"line":49,"character":0},"end":{"line":63,"character":0}},"rangeLength":327,"text":"    microServo.write(0);\n    delay(150);\n    microServo.write(150);\n    delay(150);\n\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 252);\n        analogWrite(greenPin, 225);\n    analogWrite(bluePin, 5);\n    microServo.write(45);\n    delay(200);\n    microServo.write(115);\n    delay(200);\n\n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 237

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server931132580/sketch/DistanceSensor.ino.cpp","version":369}}
>>>
Content-Length: 60

{"method":"shutdown","params":null,"id":510,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":510,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 47

{"method":"exit","params":null,"jsonrpc":"2.0"}<<< Read Error: EOF







Started logging.

>>>
Content-Length: 2201

{"method":"initialize","params":{"processId":51554,"rootPath":"/private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch","rootUri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 2344

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\n#include \u003cServo.h\u003e\n\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\nint buttonPin = 2;\n\nfloat distance = 0;\nServo microServo;\n\n#line 14 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 29 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 67 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nfloat getDistance();\n#line 14 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n  pinMode(buttonPin, INPUT_PULLUP);\n\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n\n  microServo.attach(9);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\");\n\n  if (distance \u003c= 10) {\n\n    analogWrite(redPin, 255);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 0);\n    microServo.write(0);\n    delay(150);\n    microServo.write(150);\n    delay(150);\n\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 252);\n        analogWrite(greenPin, 225);\n    analogWrite(bluePin, 5);\n    microServo.write(45);\n    delay(200);\n    microServo.write(115);\n    delay(200);\n\n  } else {\n    analogWrite(redPin, 0);\n    analogWrite(greenPin, 255);\n    analogWrite(bluePin, 0);\n  }\n\n  if(digitalRead(buttonPin))\n\n  delay(50);\n}\n\n\nfloat getDistance() {\n  float echoTime;\n  float calculatedDistance;\n\n  digitalWrite(trigPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigPin, LOW);\n\n  echoTime = pulseIn(echoPin, HIGH);\n  calculatedDistance = echoTime / 148.0;\n\n  return(calculatedDistance);\n}\n"}},"jsonrpc":"2.0"}Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":26},"end":{"line":69,"character":26}},"context":{"diagnostics":[]}},"id":1,"jsonrpc":"2.0"}Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/34","percentage":0}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/34","percentage":2.9411764705882355}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/34","percentage":2.9411764705882355}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/34","percentage":2.9411764705882355}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/34","percentage":2.9411764705882355}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/34","percentage":2.9411764705882355}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/34","percentage":2.9411764705882355}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/34","percentage":2.9411764705882355}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/34","percentage":2.9411764705882355}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/34","percentage":2.9411764705882355}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/34","percentage":5.882352941176471}}}Content-Length: 158

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/34","percentage":5.882352941176471}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/34","percentage":8.8235294117647065}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/34","percentage":8.8235294117647065}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/34","percentage":11.764705882352942}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/34","percentage":11.764705882352942}}}Content-Length: 235

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":1}}Content-Length: 36

{"id":1,"jsonrpc":"2.0","result":[]}Content-Length: 2707

{"id":2,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":72},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":87},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":17,"line":75},"start":{"character":6,"line":75}}}]}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/34","percentage":14.705882352941176}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/34","percentage":14.705882352941176}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/34","percentage":17.647058823529413}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/34","percentage":17.647058823529413}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/34","percentage":20.588235294117649}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/34","percentage":20.588235294117649}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/34","percentage":23.529411764705884}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/34","percentage":23.529411764705884}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/34","percentage":26.470588235294116}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/34","percentage":26.470588235294116}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/34","percentage":29.411764705882351}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/34","percentage":29.411764705882351}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/34","percentage":32.352941176470587}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/34","percentage":32.352941176470587}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/34","percentage":35.294117647058826}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/34","percentage":35.294117647058826}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/34","percentage":38.235294117647058}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/34","percentage":38.235294117647058}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/34","percentage":41.176470588235297}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/34","percentage":41.176470588235297}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/34","percentage":44.117647058823529}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/34","percentage":44.117647058823529}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/34","percentage":47.058823529411768}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/34","percentage":47.058823529411768}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/34","percentage":50}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/34","percentage":50}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/34","percentage":52.941176470588232}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/34","percentage":52.941176470588232}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/34","percentage":55.882352941176471}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/34","percentage":55.882352941176471}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/34","percentage":58.823529411764703}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/34","percentage":58.823529411764703}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/34","percentage":61.764705882352942}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/34","percentage":61.764705882352942}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/34","percentage":64.705882352941174}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/34","percentage":64.705882352941174}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/34","percentage":67.647058823529406}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/34","percentage":67.647058823529406}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/34","percentage":70.588235294117652}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/34","percentage":70.588235294117652}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/34","percentage":73.529411764705884}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/34","percentage":73.529411764705884}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/34","percentage":76.470588235294116}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/34","percentage":76.470588235294116}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"27/34","percentage":79.411764705882348}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"28/34","percentage":82.352941176470594}}}
>>>
Content-Length: 254

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":3}},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":3,"jsonrpc":"2.0","result":null}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"29/34","percentage":85.294117647058826}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"30/34","percentage":88.235294117647058}}}Content-Length: 159

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"31/34","percentage":91.17647058823529}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"32/34","percentage":94.117647058823536}}}Content-Length: 160

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"33/34","percentage":97.058823529411768}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 254

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":2}},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":4,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 266

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":2}},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":5,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":2},"end":{"line":69,"character":28}},"context":{"diagnostics":[]}},"id":6,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":6,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 413

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":2},"contentChanges":[{"range":{"start":{"line":69,"character":2},"end":{"line":69,"character":28}},"rangeLength":26,"text":"if (digitalRead(firstKeyPin) == LOW) {\n    blue();      \n  }"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'firstKeyPin'","range":{"end":{"character":29,"line":69},"start":{"character":18,"line":69}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blue'","range":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":2}}
>>>
Content-Length: 327

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":3},"end":{"line":71,"character":3}},"context":{"diagnostics":[]}},"id":7,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":7,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 226

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":8,"jsonrpc":"2.0"}
<<<
Content-Length: 2707

{"id":8,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":74},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":89},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":17,"line":77},"start":{"character":6,"line":77}}}]}
>>>
Content-Length: 2384

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":3},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\n#include \u003cServo.h\u003e\n\nconst int trigPin = 11;\nconst int echoPin = 12;\n\nconst int redPin = 3;\nconst int greenPin = 5;\nconst int bluePin = 6;\nint buttonPin = 2;\n\nfloat distance = 0;\nServo microServo;\n\n#line 14 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup();\n#line 29 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid loop();\n#line 69 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nfloat getDistance();\n#line 14 \"/Users/lalit/Desktop/Coding/Arduino/DistanceSensor/DistanceSensor.ino\"\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n\n  pinMode(trigPin, OUTPUT);\n  pinMode(echoPin, INPUT);\n  pinMode(buttonPin, INPUT_PULLUP);\n\n  pinMode(redPin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n\n  microServo.attach(9);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  distance = getDistance();\n\n  Serial.print(distance);\n  Serial.println(\" in\");\n\n  if (distance \u003c= 10) {\n\n    analogWrite(redPin, 255);\n    analogWrite(bluePin, 0);\n    analogWrite(greenPin, 0);\n    microServo.write(0);\n    delay(150);\n    microServo.write(150);\n    delay(150);\n\n  } else if (10 \u003c distance \u0026\u0026 distance \u003c 20) {\n    analogWrite(redPin, 252);\n        analogWrite(greenPin, 225);\n    analogWrite(bluePin, 5);\n    microServo.write(45);\n    delay(200);\n    microServo.write(115);\n    delay(200);\n\n  } else {\n    analogWrite(redPin, 0);\n    analogWrite(greenPin, 255);\n    analogWrite(bluePin, 0);\n  }\n\n  if (digitalRead(firstKeyPin) == LOW) {\n    blue();      \n  }\n\n  delay(50);\n}\n\n\nfloat getDistance() {\n  float echoTime;\n  float calculatedDistance;\n\n  digitalWrite(trigPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(trigPin, LOW);\n\n  echoTime = pulseIn(echoPin, HIGH);\n  calculatedDistance = echoTime / 148.0;\n\n  return(calculatedDistance);\n}\n"}]},"jsonrpc":"2.0"}Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":29}},"id":9,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":1,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":1,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 36

{"id":9,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":10,"jsonrpc":"2.0"}
<<<
Content-Length: 611

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'firstKeyPin'","range":{"end":{"character":29,"line":69},"start":{"character":18,"line":69}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blue'","range":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":3}}Content-Length: 2708

{"id":10,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":74},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":89},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":17,"line":77},"start":{"character":6,"line":77}}}]}
>>>
Content-Length: 522

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":18},"end":{"line":69,"character":29}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":18},"end":{"line":69,"character":29}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'firstKeyPin'"}]}},"id":11,"jsonrpc":"2.0"}
<<<
Content-Length: 448

{"id":11,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":29,"line":69},"start":{"character":18,"line":69}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":12,"jsonrpc":"2.0"}
<<<
Content-Length: 2708

{"id":12,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":74},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":89},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":17,"line":77},"start":{"character":6,"line":77}}}]}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":4},"contentChanges":[{"range":{"start":{"line":69,"character":18},"end":{"line":69,"character":29}},"rangeLength":11,"text":"b"}]},"jsonrpc":"2.0"}Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":5},"contentChanges":[{"range":{"start":{"line":69,"character":19},"end":{"line":69,"character":19}},"text":"u"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 602

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bu'","range":{"end":{"character":20,"line":69},"start":{"character":18,"line":69}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blue'","range":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":5}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":6},"contentChanges":[{"range":{"start":{"line":69,"character":20},"end":{"line":69,"character":20}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 603

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'but'","range":{"end":{"character":21,"line":69},"start":{"character":18,"line":69}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blue'","range":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":6}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":7},"contentChanges":[{"range":{"start":{"line":69,"character":21},"end":{"line":69,"character":21}},"text":"t"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 604

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'butt'","range":{"end":{"character":22,"line":69},"start":{"character":18,"line":69}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blue'","range":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":7}}
>>>
Content-Length: 515

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":22},"end":{"line":69,"character":22}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":18},"end":{"line":69,"character":22}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'butt'"}]}},"id":13,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":13,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":14,"jsonrpc":"2.0"}
<<<
Content-Length: 2708

{"id":14,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":74},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":89},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":17,"line":77},"start":{"character":6,"line":77}}}]}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":8},"contentChanges":[{"range":{"start":{"line":69,"character":22},"end":{"line":69,"character":22}},"text":"o"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 605

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'butto'","range":{"end":{"character":23,"line":69},"start":{"character":18,"line":69}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blue'","range":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":8}}
>>>
Content-Length: 336

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":9},"contentChanges":[{"range":{"start":{"line":69,"character":23},"end":{"line":69,"character":23}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 606

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'button'","range":{"end":{"character":24,"line":69},"start":{"character":18,"line":69}},"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blue'","range":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":9}}
>>>
Content-Length: 517

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":24},"end":{"line":69,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":18},"end":{"line":69,"character":24}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'button'"}]}},"id":15,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":15,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":16,"jsonrpc":"2.0"}
<<<
Content-Length: 2708

{"id":16,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":74},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":89},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":17,"line":77},"start":{"character":6,"line":77}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":10},"contentChanges":[{"range":{"start":{"line":69,"character":24},"end":{"line":69,"character":24}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 959

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'buttonP'; did you mean 'buttonPin'? (fix available)\n\nDistanceSensor.ino.cpp:11:5: note: 'buttonPin' declared here","range":{"end":{"character":25,"line":69},"start":{"character":18,"line":69}},"severity":1,"source":"clang"},{"message":"'buttonPin' declared here\n\nDistanceSensor.ino.cpp:70:19: error: use of undeclared identifier 'buttonP'; did you mean 'buttonPin'?","range":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}},"severity":3},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blue'","range":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":10}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":11},"contentChanges":[{"range":{"start":{"line":69,"character":25},"end":{"line":69,"character":25}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 961

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'buttonPi'; did you mean 'buttonPin'? (fix available)\n\nDistanceSensor.ino.cpp:11:5: note: 'buttonPin' declared here","range":{"end":{"character":26,"line":69},"start":{"character":18,"line":69}},"severity":1,"source":"clang"},{"message":"'buttonPin' declared here\n\nDistanceSensor.ino.cpp:70:19: error: use of undeclared identifier 'buttonPi'; did you mean 'buttonPin'?","range":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}},"severity":3},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blue'","range":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":11}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":12},"contentChanges":[{"range":{"start":{"line":69,"character":26},"end":{"line":69,"character":26}},"text":"n"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blue'","range":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":12}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":27},"end":{"line":69,"character":27}},"context":{"diagnostics":[]}},"id":17,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":17,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":18,"jsonrpc":"2.0"}
<<<
Content-Length: 2708

{"id":18,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":74},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":89},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":17,"line":77},"start":{"character":6,"line":77}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":14}},"id":19,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":19,"jsonrpc":"2.0","result":[{"range":{"end":{"character":15,"line":164},"start":{"character":4,"line":164}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}]}
>>>
Content-Length: 5753

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg \u0026= ~bit;\n\t\t*out \u0026= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg \u0026= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out \u0026= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) \u0026 bit) return HIGH;\n\treturn LOW;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}
>>>
Content-Length: 267

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":5}},"id":20,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":20,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 511

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":4},"end":{"line":70,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":70,"character":4},"end":{"line":70,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'blue'"}]}},"id":21,"jsonrpc":"2.0"}
<<<
Content-Length: 446

{"id":21,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":5}},"id":22,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":22,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 511

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":4},"end":{"line":70,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":70,"character":4},"end":{"line":70,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'blue'"}]}},"id":23,"jsonrpc":"2.0"}
<<<
Content-Length: 446

{"id":23,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":5}},"id":24,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":24,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":5}},"id":25,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":25,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":5}},"id":26,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":26,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":10},"end":{"line":70,"character":10}},"context":{"diagnostics":[]}},"id":27,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":27,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 511

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":4},"end":{"line":70,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":70,"character":4},"end":{"line":70,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'blue'"}]}},"id":28,"jsonrpc":"2.0"}
<<<
Content-Length: 446

{"id":28,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":5}},"id":29,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":29,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":11},"end":{"line":70,"character":11}},"context":{"diagnostics":[]}},"id":30,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":30,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 511

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":4},"end":{"line":70,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":70,"character":4},"end":{"line":70,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'blue'"}]}},"id":31,"jsonrpc":"2.0"}
<<<
Content-Length: 446

{"id":31,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":13},"contentChanges":[{"range":{"start":{"line":70,"character":10},"end":{"line":70,"character":11}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 619

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blue'","range":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":71},"start":{"character":2,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":13}}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":14},"contentChanges":[{"range":{"start":{"line":70,"character":9},"end":{"line":70,"character":10}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 787

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":3,"line":71},"start":{"character":2,"line":71}},"severity":1,"source":"clang"},{"code":"expected","message":"Expected '}'\n\nDistanceSensor.ino.cpp:70:38: note: to match this '{'","range":{"end":{"character":0,"line":90},"start":{"character":0,"line":90}},"severity":1,"source":"clang"},{"message":"To match this '{'\n\nDistanceSensor.ino.cpp:91:1: error: expected '}'","range":{"end":{"character":38,"line":69},"start":{"character":37,"line":69}},"severity":3}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":14}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":15},"contentChanges":[{"range":{"start":{"line":70,"character":8},"end":{"line":70,"character":9}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blue'","range":{"end":{"character":8,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":15}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":16},"contentChanges":[{"range":{"start":{"line":70,"character":7},"end":{"line":70,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'blu'","range":{"end":{"character":7,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":16}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":17},"contentChanges":[{"range":{"start":{"line":70,"character":6},"end":{"line":70,"character":7}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bl'","range":{"end":{"character":6,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":17}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":18},"contentChanges":[{"range":{"start":{"line":70,"character":5},"end":{"line":70,"character":6}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":5,"line":70},"start":{"character":4,"line":70}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":18}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":19},"contentChanges":[{"range":{"start":{"line":70,"character":4},"end":{"line":70,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":19}}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":5}},"id":32,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":32,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 227

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":33,"jsonrpc":"2.0"}
<<<
Content-Length: 2708

{"id":33,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":17,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":74},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":89},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":17,"line":77},"start":{"character":6,"line":77}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":56,"character":26}},"id":34,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":34,"jsonrpc":"2.0","result":[{"range":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":57,"character":26}},"id":35,"jsonrpc":"2.0"}
<<<
Content-Length: 229

{"id":35,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":26}},"context":{"diagnostics":[]}},"id":36,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":36,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":60,"character":5},"end":{"line":60,"character":26}},"context":{"diagnostics":[]}},"id":37,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":37,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":60,"character":4},"end":{"line":60,"character":26}},"context":{"diagnostics":[]}},"id":38,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":38,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":60,"character":7}},"id":39,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":39,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 358

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":20},"contentChanges":[{"range":{"start":{"line":70,"character":10},"end":{"line":70,"character":10}},"text":"microServo.write(115);"}]},"jsonrpc":"2.0"}Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":15}},"id":40,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":40,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}]}Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":20}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":15}},"id":41,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":41,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `microServo`  \n\n---\nType: `class Servo`  \n\n---\n```cpp\nServo microServo\n```"},"range":{"end":{"character":20,"line":70},"start":{"character":10,"line":70}}}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":32},"end":{"line":70,"character":32}},"context":{"diagnostics":[]}},"id":42,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":42,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":15}},"id":43,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":43,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `microServo`  \n\n---\nType: `class Servo`  \n\n---\n```cpp\nServo microServo\n```"},"range":{"end":{"character":20,"line":70},"start":{"character":10,"line":70}}}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":27}},"id":44,"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"id":44,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":263},"start":{"character":12,"line":263}},"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}]}
>>>
Content-Length: 11726

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp","languageId":"cpp","version":1,"text":"/*\n Servo.cpp - Interrupt driven Servo library for Arduino using 16 bit timers- Version 2\n Copyright (c) 2009 Michael Margolis.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n#if defined(ARDUINO_ARCH_AVR)\n\n#include \u003cavr/interrupt.h\u003e\n#include \u003cArduino.h\u003e\n\n#include \"Servo.h\"\n\n#define usToTicks(_us)    (( clockCyclesPerMicrosecond()* _us) / 8)     // converts microseconds to tick (assumes prescale of 8)  // 12 Aug 2009\n#define ticksToUs(_ticks) (( (unsigned)_ticks * 8)/ clockCyclesPerMicrosecond() ) // converts from ticks back to microseconds\n\n\n#define TRIM_DURATION       2                               // compensation ticks to trim adjust for digitalWrite delays // 12 August 2009\n\n//#define NBR_TIMERS        (MAX_SERVOS / SERVOS_PER_TIMER)\n\nstatic servo_t servos[MAX_SERVOS];                          // static array of servo structures\nstatic volatile int8_t Channel[_Nbr_16timers ];             // counter for the servo being pulsed for each timer (or -1 if refresh interval)\n\nuint8_t ServoCount = 0;                                     // the total number of attached servos\n\n\n// convenience macros\n#define SERVO_INDEX_TO_TIMER(_servo_nbr) ((timer16_Sequence_t)(_servo_nbr / SERVOS_PER_TIMER)) // returns the timer controlling this servo\n#define SERVO_INDEX_TO_CHANNEL(_servo_nbr) (_servo_nbr % SERVOS_PER_TIMER)       // returns the index of the servo on this timer\n#define SERVO_INDEX(_timer,_channel)  ((_timer*SERVOS_PER_TIMER) + _channel)     // macro to access servo index by timer and channel\n#define SERVO(_timer,_channel)  (servos[SERVO_INDEX(_timer,_channel)])            // macro to access servo class by timer and channel\n\n#define SERVO_MIN() (MIN_PULSE_WIDTH - this-\u003emin * 4)  // minimum value in uS for this servo\n#define SERVO_MAX() (MAX_PULSE_WIDTH - this-\u003emax * 4)  // maximum value in uS for this servo\n\n/************ static functions common to all instances ***********************/\n\nstatic inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)\n{\n  if( Channel[timer] \u003c 0 )\n    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer\n  else{\n    if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 SERVO(timer,Channel[timer]).Pin.isActive == true )\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated\n  }\n\n  Channel[timer]++;    // increment to the next channel\n  if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 Channel[timer] \u003c SERVOS_PER_TIMER) {\n    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;\n    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high\n  }\n  else {\n    // finished all channels so wait for the refresh period to expire before starting over\n    if( ((unsigned)*TCNTn) + 4 \u003c usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed\n      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);\n    else\n      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed\n    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel\n  }\n}\n\n#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform\n// Interrupt handlers for Arduino\n#if defined(_useTimer1)\nSIGNAL (TIMER1_COMPA_vect)\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n\n#if defined(_useTimer3)\nSIGNAL (TIMER3_COMPA_vect)\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n\n#if defined(_useTimer4)\nSIGNAL (TIMER4_COMPA_vect)\n{\n  handle_interrupts(_timer4, \u0026TCNT4, \u0026OCR4A);\n}\n#endif\n\n#if defined(_useTimer5)\nSIGNAL (TIMER5_COMPA_vect)\n{\n  handle_interrupts(_timer5, \u0026TCNT5, \u0026OCR5A);\n}\n#endif\n\n#elif defined WIRING\n// Interrupt handlers for Wiring\n#if defined(_useTimer1)\nvoid Timer1Service()\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n#if defined(_useTimer3)\nvoid Timer3Service()\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n#endif\n\n\nstatic void initISR(timer16_Sequence_t timer)\n{\n#if defined (_useTimer1)\n  if(timer == _timer1) {\n    TCCR1A = 0;             // normal counting mode\n    TCCR1B = _BV(CS11);     // set prescaler of 8\n    TCNT1 = 0;              // clear the timer count\n#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF1A);      // clear any pending interrupts;\n    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt\n#else\n    // here if not ATmega8 or ATmega128\n    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts;\n    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER1OUTCOMPAREA_INT, Timer1Service);\n#endif\n  }\n#endif\n\n#if defined (_useTimer3)\n  if(timer == _timer3) {\n    TCCR3A = 0;             // normal counting mode\n    TCCR3B = _BV(CS31);     // set prescaler of 8\n    TCNT3 = 0;              // clear the timer count\n#if defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF3A);     // clear any pending interrupts;\n\tETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt\n#else\n    TIFR3 = _BV(OCF3A);     // clear any pending interrupts;\n    TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER3OUTCOMPAREA_INT, Timer3Service);  // for Wiring platform only\n#endif\n  }\n#endif\n\n#if defined (_useTimer4)\n  if(timer == _timer4) {\n    TCCR4A = 0;             // normal counting mode\n    TCCR4B = _BV(CS41);     // set prescaler of 8\n    TCNT4 = 0;              // clear the timer count\n    TIFR4 = _BV(OCF4A);     // clear any pending interrupts;\n    TIMSK4 =  _BV(OCIE4A) ; // enable the output compare interrupt\n  }\n#endif\n\n#if defined (_useTimer5)\n  if(timer == _timer5) {\n    TCCR5A = 0;             // normal counting mode\n    TCCR5B = _BV(CS51);     // set prescaler of 8\n    TCNT5 = 0;              // clear the timer count\n    TIFR5 = _BV(OCF5A);     // clear any pending interrupts;\n    TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt\n  }\n#endif\n}\n\nstatic void finISR(timer16_Sequence_t timer)\n{\n    //disable use of the given timer\n#if defined WIRING   // Wiring\n  if(timer == _timer1) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK1 \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #else\n    TIMSK \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #endif\n    timerDetach(TIMER1OUTCOMPAREA_INT);\n  }\n  else if(timer == _timer3) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK3 \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #else\n    ETIMSK \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #endif\n    timerDetach(TIMER3OUTCOMPAREA_INT);\n  }\n#else\n  //For arduino - in future: call here to a currently undefined function to reset the timer\n  (void) timer;  // squash \"unused parameter 'timer' [-Wunused-parameter]\" warning\n#endif\n}\n\nstatic boolean isTimerActive(timer16_Sequence_t timer)\n{\n  // returns true if any servo is active on this timer\n  for(uint8_t channel=0; channel \u003c SERVOS_PER_TIMER; channel++) {\n    if(SERVO(timer,channel).Pin.isActive == true)\n      return true;\n  }\n  return false;\n}\n\n\n/****************** end of static functions ******************************/\n\nServo::Servo()\n{\n  if( ServoCount \u003c MAX_SERVOS) {\n    this-\u003eservoIndex = ServoCount++;                    // assign a servo index to this instance\n\tservos[this-\u003eservoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009\n  }\n  else\n    this-\u003eservoIndex = INVALID_SERVO ;  // too many servos\n}\n\nuint8_t Servo::attach(int pin)\n{\n  return this-\u003eattach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);\n}\n\nuint8_t Servo::attach(int pin, int min, int max)\n{\n  if(this-\u003eservoIndex \u003c MAX_SERVOS ) {\n    pinMode( pin, OUTPUT) ;                                   // set servo pin to output\n    servos[this-\u003eservoIndex].Pin.nbr = pin;\n    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 \u003c 128\n    this-\u003emin  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS\n    this-\u003emax  = (MAX_PULSE_WIDTH - max)/4;\n    // initialize the timer if it has not already been initialized\n    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n    if(isTimerActive(timer) == false)\n      initISR(timer);\n    servos[this-\u003eservoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive\n  }\n  return this-\u003eservoIndex ;\n}\n\nvoid Servo::detach()\n{\n  servos[this-\u003eservoIndex].Pin.isActive = false;\n  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n  if(isTimerActive(timer) == false) {\n    finISR(timer);\n  }\n}\n\nvoid Servo::write(int value)\n{\n  if(value \u003c MIN_PULSE_WIDTH)\n  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)\n    if(value \u003c 0) value = 0;\n    if(value \u003e 180) value = 180;\n    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());\n  }\n  this-\u003ewriteMicroseconds(value);\n}\n\nvoid Servo::writeMicroseconds(int value)\n{\n  // calculate and store the values for the given channel\n  byte channel = this-\u003eservoIndex;\n  if( (channel \u003c MAX_SERVOS) )   // ensure channel is valid\n  {\n    if( value \u003c SERVO_MIN() )          // ensure pulse width is valid\n      value = SERVO_MIN();\n    else if( value \u003e SERVO_MAX() )\n      value = SERVO_MAX();\n\n    value = value - TRIM_DURATION;\n    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009\n\n    uint8_t oldSREG = SREG;\n    cli();\n    servos[channel].ticks = value;\n    SREG = oldSREG;\n  }\n}\n\nint Servo::read() // return the value as degrees\n{\n  return  map( this-\u003ereadMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);\n}\n\nint Servo::readMicroseconds()\n{\n  unsigned int pulsewidth;\n  if( this-\u003eservoIndex != INVALID_SERVO )\n    pulsewidth = ticksToUs(servos[this-\u003eservoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009\n  else\n    pulsewidth  = 0;\n\n  return pulsewidth;\n}\n\nbool Servo::attached()\n{\n  return servos[this-\u003eservoIndex].Pin.isActive ;\n}\n\n#endif // ARDUINO_ARCH_AVR\n\n"}},"jsonrpc":"2.0"}Content-Length: 167

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 177

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":27}},"id":45,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":45,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":27}},"id":46,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":46,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":28}},"id":47,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":47,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":27},"end":{"line":70,"character":30}},"context":{"diagnostics":[]}},"id":48,"jsonrpc":"2.0"}
<<<
Content-Length: 448

{"id":48,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":30,"line":70},"start":{"character":27,"line":70}},"tweakID":"ExtractVariable"}],"command":"clangd.applyTweak","title":"Extract subexpression to variable"},"kind":"refactor","title":"Extract subexpression to variable"}]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":29}},"id":49,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":49,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":21},"contentChanges":[{"range":{"start":{"line":70,"character":27},"end":{"line":70,"character":30}},"rangeLength":3,"text":"0"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":21}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":28},"end":{"line":70,"character":28}},"context":{"diagnostics":[]}},"id":50,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":50,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":19}},"id":51,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":51,"jsonrpc":"2.0","result":[{"range":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":17}},"id":52,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":52,"jsonrpc":"2.0","result":[{"range":{"end":{"character":15,"line":164},"start":{"character":4,"line":164}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}]}
>>>
Content-Length: 5753

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg \u0026= ~bit;\n\t\t*out \u0026= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg \u0026= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out \u0026= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) \u0026 bit) return HIGH;\n\treturn LOW;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":8}},"id":53,"jsonrpc":"2.0"}
<<<
Content-Length: 285

{"id":53,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\n→ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"end":{"character":17,"line":69},"start":{"character":6,"line":69}}}}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":8}},"id":54,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":54,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":9}},"id":55,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":55,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":10}},"id":56,"jsonrpc":"2.0"}
<<<
Content-Length: 653

{"id":56,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":1,"range":{"end":{"character":12,"line":34},"start":{"character":2,"line":34}}},{"kind":1,"range":{"end":{"character":14,"line":49},"start":{"character":4,"line":49}}},{"kind":1,"range":{"end":{"character":14,"line":51},"start":{"character":4,"line":51}}},{"kind":1,"range":{"end":{"character":14,"line":58},"start":{"character":4,"line":58}}},{"kind":1,"range":{"end":{"character":14,"line":60},"start":{"character":4,"line":60}}},{"kind":1,"range":{"end":{"character":20,"line":70},"start":{"character":10,"line":70}}}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":10},"end":{"line":70,"character":10}},"context":{"diagnostics":[]}},"id":57,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":57,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":22},"contentChanges":[{"range":{"start":{"line":70,"character":8},"end":{"line":70,"character":10}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":22}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":8},"end":{"line":70,"character":8}},"context":{"diagnostics":[]}},"id":58,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":58,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":23},"contentChanges":[{"range":{"start":{"line":70,"character":6},"end":{"line":70,"character":8}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}Content-Length: 63

{"method":"$/cancelRequest","params":{"id":50},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":23}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":6},"end":{"line":70,"character":6}},"context":{"diagnostics":[]}},"id":59,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":59,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":24},"contentChanges":[{"range":{"start":{"line":70,"character":4},"end":{"line":70,"character":6}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":24}}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":4},"end":{"line":70,"character":4}},"context":{"diagnostics":[]}},"id":60,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":60,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":26}},"context":{"diagnostics":[]}},"id":61,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":61,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":60,"character":0},"end":{"line":61,"character":0}},"context":{"diagnostics":[]}},"id":62,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":62,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":60,"character":26},"end":{"line":60,"character":26}},"context":{"diagnostics":[]}},"id":63,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":63,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":14}},"id":64,"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"id":64,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":263},"start":{"character":12,"line":263}},"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}]}
>>>
Content-Length: 11726

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp","languageId":"cpp","version":1,"text":"/*\n Servo.cpp - Interrupt driven Servo library for Arduino using 16 bit timers- Version 2\n Copyright (c) 2009 Michael Margolis.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n#if defined(ARDUINO_ARCH_AVR)\n\n#include \u003cavr/interrupt.h\u003e\n#include \u003cArduino.h\u003e\n\n#include \"Servo.h\"\n\n#define usToTicks(_us)    (( clockCyclesPerMicrosecond()* _us) / 8)     // converts microseconds to tick (assumes prescale of 8)  // 12 Aug 2009\n#define ticksToUs(_ticks) (( (unsigned)_ticks * 8)/ clockCyclesPerMicrosecond() ) // converts from ticks back to microseconds\n\n\n#define TRIM_DURATION       2                               // compensation ticks to trim adjust for digitalWrite delays // 12 August 2009\n\n//#define NBR_TIMERS        (MAX_SERVOS / SERVOS_PER_TIMER)\n\nstatic servo_t servos[MAX_SERVOS];                          // static array of servo structures\nstatic volatile int8_t Channel[_Nbr_16timers ];             // counter for the servo being pulsed for each timer (or -1 if refresh interval)\n\nuint8_t ServoCount = 0;                                     // the total number of attached servos\n\n\n// convenience macros\n#define SERVO_INDEX_TO_TIMER(_servo_nbr) ((timer16_Sequence_t)(_servo_nbr / SERVOS_PER_TIMER)) // returns the timer controlling this servo\n#define SERVO_INDEX_TO_CHANNEL(_servo_nbr) (_servo_nbr % SERVOS_PER_TIMER)       // returns the index of the servo on this timer\n#define SERVO_INDEX(_timer,_channel)  ((_timer*SERVOS_PER_TIMER) + _channel)     // macro to access servo index by timer and channel\n#define SERVO(_timer,_channel)  (servos[SERVO_INDEX(_timer,_channel)])            // macro to access servo class by timer and channel\n\n#define SERVO_MIN() (MIN_PULSE_WIDTH - this-\u003emin * 4)  // minimum value in uS for this servo\n#define SERVO_MAX() (MAX_PULSE_WIDTH - this-\u003emax * 4)  // maximum value in uS for this servo\n\n/************ static functions common to all instances ***********************/\n\nstatic inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)\n{\n  if( Channel[timer] \u003c 0 )\n    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer\n  else{\n    if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 SERVO(timer,Channel[timer]).Pin.isActive == true )\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated\n  }\n\n  Channel[timer]++;    // increment to the next channel\n  if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 Channel[timer] \u003c SERVOS_PER_TIMER) {\n    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;\n    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high\n  }\n  else {\n    // finished all channels so wait for the refresh period to expire before starting over\n    if( ((unsigned)*TCNTn) + 4 \u003c usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed\n      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);\n    else\n      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed\n    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel\n  }\n}\n\n#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform\n// Interrupt handlers for Arduino\n#if defined(_useTimer1)\nSIGNAL (TIMER1_COMPA_vect)\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n\n#if defined(_useTimer3)\nSIGNAL (TIMER3_COMPA_vect)\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n\n#if defined(_useTimer4)\nSIGNAL (TIMER4_COMPA_vect)\n{\n  handle_interrupts(_timer4, \u0026TCNT4, \u0026OCR4A);\n}\n#endif\n\n#if defined(_useTimer5)\nSIGNAL (TIMER5_COMPA_vect)\n{\n  handle_interrupts(_timer5, \u0026TCNT5, \u0026OCR5A);\n}\n#endif\n\n#elif defined WIRING\n// Interrupt handlers for Wiring\n#if defined(_useTimer1)\nvoid Timer1Service()\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n#if defined(_useTimer3)\nvoid Timer3Service()\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n#endif\n\n\nstatic void initISR(timer16_Sequence_t timer)\n{\n#if defined (_useTimer1)\n  if(timer == _timer1) {\n    TCCR1A = 0;             // normal counting mode\n    TCCR1B = _BV(CS11);     // set prescaler of 8\n    TCNT1 = 0;              // clear the timer count\n#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF1A);      // clear any pending interrupts;\n    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt\n#else\n    // here if not ATmega8 or ATmega128\n    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts;\n    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER1OUTCOMPAREA_INT, Timer1Service);\n#endif\n  }\n#endif\n\n#if defined (_useTimer3)\n  if(timer == _timer3) {\n    TCCR3A = 0;             // normal counting mode\n    TCCR3B = _BV(CS31);     // set prescaler of 8\n    TCNT3 = 0;              // clear the timer count\n#if defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF3A);     // clear any pending interrupts;\n\tETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt\n#else\n    TIFR3 = _BV(OCF3A);     // clear any pending interrupts;\n    TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER3OUTCOMPAREA_INT, Timer3Service);  // for Wiring platform only\n#endif\n  }\n#endif\n\n#if defined (_useTimer4)\n  if(timer == _timer4) {\n    TCCR4A = 0;             // normal counting mode\n    TCCR4B = _BV(CS41);     // set prescaler of 8\n    TCNT4 = 0;              // clear the timer count\n    TIFR4 = _BV(OCF4A);     // clear any pending interrupts;\n    TIMSK4 =  _BV(OCIE4A) ; // enable the output compare interrupt\n  }\n#endif\n\n#if defined (_useTimer5)\n  if(timer == _timer5) {\n    TCCR5A = 0;             // normal counting mode\n    TCCR5B = _BV(CS51);     // set prescaler of 8\n    TCNT5 = 0;              // clear the timer count\n    TIFR5 = _BV(OCF5A);     // clear any pending interrupts;\n    TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt\n  }\n#endif\n}\n\nstatic void finISR(timer16_Sequence_t timer)\n{\n    //disable use of the given timer\n#if defined WIRING   // Wiring\n  if(timer == _timer1) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK1 \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #else\n    TIMSK \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #endif\n    timerDetach(TIMER1OUTCOMPAREA_INT);\n  }\n  else if(timer == _timer3) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK3 \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #else\n    ETIMSK \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #endif\n    timerDetach(TIMER3OUTCOMPAREA_INT);\n  }\n#else\n  //For arduino - in future: call here to a currently undefined function to reset the timer\n  (void) timer;  // squash \"unused parameter 'timer' [-Wunused-parameter]\" warning\n#endif\n}\n\nstatic boolean isTimerActive(timer16_Sequence_t timer)\n{\n  // returns true if any servo is active on this timer\n  for(uint8_t channel=0; channel \u003c SERVOS_PER_TIMER; channel++) {\n    if(SERVO(timer,channel).Pin.isActive == true)\n      return true;\n  }\n  return false;\n}\n\n\n/****************** end of static functions ******************************/\n\nServo::Servo()\n{\n  if( ServoCount \u003c MAX_SERVOS) {\n    this-\u003eservoIndex = ServoCount++;                    // assign a servo index to this instance\n\tservos[this-\u003eservoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009\n  }\n  else\n    this-\u003eservoIndex = INVALID_SERVO ;  // too many servos\n}\n\nuint8_t Servo::attach(int pin)\n{\n  return this-\u003eattach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);\n}\n\nuint8_t Servo::attach(int pin, int min, int max)\n{\n  if(this-\u003eservoIndex \u003c MAX_SERVOS ) {\n    pinMode( pin, OUTPUT) ;                                   // set servo pin to output\n    servos[this-\u003eservoIndex].Pin.nbr = pin;\n    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 \u003c 128\n    this-\u003emin  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS\n    this-\u003emax  = (MAX_PULSE_WIDTH - max)/4;\n    // initialize the timer if it has not already been initialized\n    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n    if(isTimerActive(timer) == false)\n      initISR(timer);\n    servos[this-\u003eservoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive\n  }\n  return this-\u003eservoIndex ;\n}\n\nvoid Servo::detach()\n{\n  servos[this-\u003eservoIndex].Pin.isActive = false;\n  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n  if(isTimerActive(timer) == false) {\n    finISR(timer);\n  }\n}\n\nvoid Servo::write(int value)\n{\n  if(value \u003c MIN_PULSE_WIDTH)\n  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)\n    if(value \u003c 0) value = 0;\n    if(value \u003e 180) value = 180;\n    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());\n  }\n  this-\u003ewriteMicroseconds(value);\n}\n\nvoid Servo::writeMicroseconds(int value)\n{\n  // calculate and store the values for the given channel\n  byte channel = this-\u003eservoIndex;\n  if( (channel \u003c MAX_SERVOS) )   // ensure channel is valid\n  {\n    if( value \u003c SERVO_MIN() )          // ensure pulse width is valid\n      value = SERVO_MIN();\n    else if( value \u003e SERVO_MAX() )\n      value = SERVO_MAX();\n\n    value = value - TRIM_DURATION;\n    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009\n\n    uint8_t oldSREG = SREG;\n    cli();\n    servos[channel].ticks = value;\n    SREG = oldSREG;\n  }\n}\n\nint Servo::read() // return the value as degrees\n{\n  return  map( this-\u003ereadMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);\n}\n\nint Servo::readMicroseconds()\n{\n  unsigned int pulsewidth;\n  if( this-\u003eservoIndex != INVALID_SERVO )\n    pulsewidth = ticksToUs(servos[this-\u003eservoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009\n  else\n    pulsewidth  = 0;\n\n  return pulsewidth;\n}\n\nbool Servo::attached()\n{\n  return servos[this-\u003eservoIndex].Pin.isActive ;\n}\n\n#endif // ARDUINO_ARCH_AVR\n\n"}},"jsonrpc":"2.0"}Content-Length: 167

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 177

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":0}},"id":65,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":65,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":5}},"id":66,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":66,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":17}},"id":67,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":67,"jsonrpc":"2.0","result":[{"range":{"end":{"character":15,"line":164},"start":{"character":4,"line":164}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}]}
>>>
Content-Length: 5753

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg \u0026= ~bit;\n\t\t*out \u0026= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg \u0026= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out \u0026= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) \u0026 bit) return HIGH;\n\treturn LOW;\n}\n"}},"jsonrpc":"2.0"}Content-Length: 191

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":38},"end":{"line":69,"character":38}},"context":{"diagnostics":[]}},"id":68,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":68,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":34}},"id":69,"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"id":69,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### macro `LOW`  \n\n---\n```cpp\n#define LOW 0x0\n```"},"range":{"end":{"character":35,"line":69},"start":{"character":32,"line":69}}}}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":35}},"id":70,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":70,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":35},"end":{"line":69,"character":35}},"context":{"diagnostics":[]}},"id":71,"jsonrpc":"2.0"}
<<<
Content-Length: 414

{"id":71,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":35,"line":69},"start":{"character":35,"line":69}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'LOW'"},"kind":"refactor","title":"Expand macro 'LOW'"}]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":31}},"id":72,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":72,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":31},"end":{"line":69,"character":31}},"context":{"diagnostics":[]}},"id":73,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":73,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":25},"contentChanges":[{"range":{"start":{"line":69,"character":31},"end":{"line":69,"character":31}},"text":"="}]},"jsonrpc":"2.0"}
<<<
Content-Length: 406

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":32,"line":69},"start":{"character":31,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":25}}
>>>
Content-Length: 500

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":32},"end":{"line":69,"character":32}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":31},"end":{"line":69,"character":32}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":74,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":74,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":26},"contentChanges":[{"range":{"start":{"line":69,"character":31},"end":{"line":69,"character":32}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":26}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":31},"end":{"line":69,"character":31}},"context":{"diagnostics":[]}},"id":75,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":75,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":73,"character":12},"end":{"line":73,"character":12}},"context":{"diagnostics":[]}},"id":76,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":76,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 328

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":3},"end":{"line":71,"character":3}},"context":{"diagnostics":[]}},"id":77,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":77,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":25}},"id":78,"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"id":78,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `buttonPin`  \n\n---\nType: `int`  \nValue = `2`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint buttonPin = 2\n```"},"range":{"end":{"character":27,"line":69},"start":{"character":18,"line":69}}}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":25}},"id":79,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":79,"jsonrpc":"2.0","result":[{"range":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":22}},"id":80,"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"id":80,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `buttonPin`  \n\n---\nType: `int`  \nValue = `2`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint buttonPin = 2\n```"},"range":{"end":{"character":27,"line":69},"start":{"character":18,"line":69}}}}
>>>
Content-Length: 259

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":7,"character":8}},"id":81,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":81,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":10,"character":10}},"id":82,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":82,"jsonrpc":"2.0","result":[{"range":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 255

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":10,"character":9}},"id":83,"jsonrpc":"2.0"}
<<<
Content-Length: 257

{"id":83,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `buttonPin`  \n\n---\nType: `int`  \nValue = `2`  \n\n---\n```cpp\nint buttonPin = 2\n```"},"range":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":10,"character":16}},"id":84,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":84,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":10,"character":16}},"id":85,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":85,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":10,"character":17}},"id":86,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":86,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":10,"character":17}},"id":87,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":87,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":60,"character":16}},"id":88,"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"id":88,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int value`\n\n---\n```cpp\n// In Servo\npublic: void write(int value)\n```"},"range":{"end":{"character":20,"line":60},"start":{"character":15,"line":60}}}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":60,"character":24}},"id":89,"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"id":89,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":263},"start":{"character":12,"line":263}},"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}]}
>>>
Content-Length: 11726

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp","languageId":"cpp","version":1,"text":"/*\n Servo.cpp - Interrupt driven Servo library for Arduino using 16 bit timers- Version 2\n Copyright (c) 2009 Michael Margolis.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n#if defined(ARDUINO_ARCH_AVR)\n\n#include \u003cavr/interrupt.h\u003e\n#include \u003cArduino.h\u003e\n\n#include \"Servo.h\"\n\n#define usToTicks(_us)    (( clockCyclesPerMicrosecond()* _us) / 8)     // converts microseconds to tick (assumes prescale of 8)  // 12 Aug 2009\n#define ticksToUs(_ticks) (( (unsigned)_ticks * 8)/ clockCyclesPerMicrosecond() ) // converts from ticks back to microseconds\n\n\n#define TRIM_DURATION       2                               // compensation ticks to trim adjust for digitalWrite delays // 12 August 2009\n\n//#define NBR_TIMERS        (MAX_SERVOS / SERVOS_PER_TIMER)\n\nstatic servo_t servos[MAX_SERVOS];                          // static array of servo structures\nstatic volatile int8_t Channel[_Nbr_16timers ];             // counter for the servo being pulsed for each timer (or -1 if refresh interval)\n\nuint8_t ServoCount = 0;                                     // the total number of attached servos\n\n\n// convenience macros\n#define SERVO_INDEX_TO_TIMER(_servo_nbr) ((timer16_Sequence_t)(_servo_nbr / SERVOS_PER_TIMER)) // returns the timer controlling this servo\n#define SERVO_INDEX_TO_CHANNEL(_servo_nbr) (_servo_nbr % SERVOS_PER_TIMER)       // returns the index of the servo on this timer\n#define SERVO_INDEX(_timer,_channel)  ((_timer*SERVOS_PER_TIMER) + _channel)     // macro to access servo index by timer and channel\n#define SERVO(_timer,_channel)  (servos[SERVO_INDEX(_timer,_channel)])            // macro to access servo class by timer and channel\n\n#define SERVO_MIN() (MIN_PULSE_WIDTH - this-\u003emin * 4)  // minimum value in uS for this servo\n#define SERVO_MAX() (MAX_PULSE_WIDTH - this-\u003emax * 4)  // maximum value in uS for this servo\n\n/************ static functions common to all instances ***********************/\n\nstatic inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)\n{\n  if( Channel[timer] \u003c 0 )\n    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer\n  else{\n    if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 SERVO(timer,Channel[timer]).Pin.isActive == true )\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated\n  }\n\n  Channel[timer]++;    // increment to the next channel\n  if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 Channel[timer] \u003c SERVOS_PER_TIMER) {\n    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;\n    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high\n  }\n  else {\n    // finished all channels so wait for the refresh period to expire before starting over\n    if( ((unsigned)*TCNTn) + 4 \u003c usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed\n      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);\n    else\n      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed\n    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel\n  }\n}\n\n#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform\n// Interrupt handlers for Arduino\n#if defined(_useTimer1)\nSIGNAL (TIMER1_COMPA_vect)\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n\n#if defined(_useTimer3)\nSIGNAL (TIMER3_COMPA_vect)\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n\n#if defined(_useTimer4)\nSIGNAL (TIMER4_COMPA_vect)\n{\n  handle_interrupts(_timer4, \u0026TCNT4, \u0026OCR4A);\n}\n#endif\n\n#if defined(_useTimer5)\nSIGNAL (TIMER5_COMPA_vect)\n{\n  handle_interrupts(_timer5, \u0026TCNT5, \u0026OCR5A);\n}\n#endif\n\n#elif defined WIRING\n// Interrupt handlers for Wiring\n#if defined(_useTimer1)\nvoid Timer1Service()\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n#if defined(_useTimer3)\nvoid Timer3Service()\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n#endif\n\n\nstatic void initISR(timer16_Sequence_t timer)\n{\n#if defined (_useTimer1)\n  if(timer == _timer1) {\n    TCCR1A = 0;             // normal counting mode\n    TCCR1B = _BV(CS11);     // set prescaler of 8\n    TCNT1 = 0;              // clear the timer count\n#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF1A);      // clear any pending interrupts;\n    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt\n#else\n    // here if not ATmega8 or ATmega128\n    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts;\n    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER1OUTCOMPAREA_INT, Timer1Service);\n#endif\n  }\n#endif\n\n#if defined (_useTimer3)\n  if(timer == _timer3) {\n    TCCR3A = 0;             // normal counting mode\n    TCCR3B = _BV(CS31);     // set prescaler of 8\n    TCNT3 = 0;              // clear the timer count\n#if defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF3A);     // clear any pending interrupts;\n\tETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt\n#else\n    TIFR3 = _BV(OCF3A);     // clear any pending interrupts;\n    TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER3OUTCOMPAREA_INT, Timer3Service);  // for Wiring platform only\n#endif\n  }\n#endif\n\n#if defined (_useTimer4)\n  if(timer == _timer4) {\n    TCCR4A = 0;             // normal counting mode\n    TCCR4B = _BV(CS41);     // set prescaler of 8\n    TCNT4 = 0;              // clear the timer count\n    TIFR4 = _BV(OCF4A);     // clear any pending interrupts;\n    TIMSK4 =  _BV(OCIE4A) ; // enable the output compare interrupt\n  }\n#endif\n\n#if defined (_useTimer5)\n  if(timer == _timer5) {\n    TCCR5A = 0;             // normal counting mode\n    TCCR5B = _BV(CS51);     // set prescaler of 8\n    TCNT5 = 0;              // clear the timer count\n    TIFR5 = _BV(OCF5A);     // clear any pending interrupts;\n    TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt\n  }\n#endif\n}\n\nstatic void finISR(timer16_Sequence_t timer)\n{\n    //disable use of the given timer\n#if defined WIRING   // Wiring\n  if(timer == _timer1) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK1 \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #else\n    TIMSK \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #endif\n    timerDetach(TIMER1OUTCOMPAREA_INT);\n  }\n  else if(timer == _timer3) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK3 \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #else\n    ETIMSK \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #endif\n    timerDetach(TIMER3OUTCOMPAREA_INT);\n  }\n#else\n  //For arduino - in future: call here to a currently undefined function to reset the timer\n  (void) timer;  // squash \"unused parameter 'timer' [-Wunused-parameter]\" warning\n#endif\n}\n\nstatic boolean isTimerActive(timer16_Sequence_t timer)\n{\n  // returns true if any servo is active on this timer\n  for(uint8_t channel=0; channel \u003c SERVOS_PER_TIMER; channel++) {\n    if(SERVO(timer,channel).Pin.isActive == true)\n      return true;\n  }\n  return false;\n}\n\n\n/****************** end of static functions ******************************/\n\nServo::Servo()\n{\n  if( ServoCount \u003c MAX_SERVOS) {\n    this-\u003eservoIndex = ServoCount++;                    // assign a servo index to this instance\n\tservos[this-\u003eservoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009\n  }\n  else\n    this-\u003eservoIndex = INVALID_SERVO ;  // too many servos\n}\n\nuint8_t Servo::attach(int pin)\n{\n  return this-\u003eattach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);\n}\n\nuint8_t Servo::attach(int pin, int min, int max)\n{\n  if(this-\u003eservoIndex \u003c MAX_SERVOS ) {\n    pinMode( pin, OUTPUT) ;                                   // set servo pin to output\n    servos[this-\u003eservoIndex].Pin.nbr = pin;\n    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 \u003c 128\n    this-\u003emin  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS\n    this-\u003emax  = (MAX_PULSE_WIDTH - max)/4;\n    // initialize the timer if it has not already been initialized\n    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n    if(isTimerActive(timer) == false)\n      initISR(timer);\n    servos[this-\u003eservoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive\n  }\n  return this-\u003eservoIndex ;\n}\n\nvoid Servo::detach()\n{\n  servos[this-\u003eservoIndex].Pin.isActive = false;\n  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n  if(isTimerActive(timer) == false) {\n    finISR(timer);\n  }\n}\n\nvoid Servo::write(int value)\n{\n  if(value \u003c MIN_PULSE_WIDTH)\n  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)\n    if(value \u003c 0) value = 0;\n    if(value \u003e 180) value = 180;\n    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());\n  }\n  this-\u003ewriteMicroseconds(value);\n}\n\nvoid Servo::writeMicroseconds(int value)\n{\n  // calculate and store the values for the given channel\n  byte channel = this-\u003eservoIndex;\n  if( (channel \u003c MAX_SERVOS) )   // ensure channel is valid\n  {\n    if( value \u003c SERVO_MIN() )          // ensure pulse width is valid\n      value = SERVO_MIN();\n    else if( value \u003e SERVO_MAX() )\n      value = SERVO_MAX();\n\n    value = value - TRIM_DURATION;\n    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009\n\n    uint8_t oldSREG = SREG;\n    cli();\n    servos[channel].ticks = value;\n    SREG = oldSREG;\n  }\n}\n\nint Servo::read() // return the value as degrees\n{\n  return  map( this-\u003ereadMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);\n}\n\nint Servo::readMicroseconds()\n{\n  unsigned int pulsewidth;\n  if( this-\u003eservoIndex != INVALID_SERVO )\n    pulsewidth = ticksToUs(servos[this-\u003eservoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009\n  else\n    pulsewidth  = 0;\n\n  return pulsewidth;\n}\n\nbool Servo::attached()\n{\n  return servos[this-\u003eservoIndex].Pin.isActive ;\n}\n\n#endif // ARDUINO_ARCH_AVR\n\n"}},"jsonrpc":"2.0"}Content-Length: 167

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 177

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":60,"character":24}},"id":90,"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"id":90,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### instance-method `write`  \n\n---\n→ `void`  \nParameters:  \n- `int value`\n\n---\n```cpp\n// In Servo\npublic: void write(int value)\n```"},"range":{"end":{"character":25,"line":60},"start":{"character":24,"line":60}}}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":10,"character":15},"end":{"line":10,"character":16}},"context":{"diagnostics":[]}},"id":91,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":91,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":10,"character":17}},"id":92,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":92,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":10,"character":16},"end":{"line":10,"character":17}},"context":{"diagnostics":[]}},"id":93,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":93,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 353

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":27},"contentChanges":[{"range":{"start":{"line":10,"character":16},"end":{"line":10,"character":17}},"rangeLength":1,"text":"1"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":27}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":10,"character":17}},"id":94,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":94,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":10,"character":17},"end":{"line":10,"character":17}},"context":{"diagnostics":[]}},"id":95,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":95,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":28},"contentChanges":[{"range":{"start":{"line":10,"character":17},"end":{"line":10,"character":17}},"text":"2"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":28}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":10,"character":18},"end":{"line":10,"character":18}},"context":{"diagnostics":[]}},"id":96,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":96,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":29},"contentChanges":[{"range":{"start":{"line":10,"character":17},"end":{"line":10,"character":18}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":30},"contentChanges":[{"range":{"start":{"line":10,"character":17},"end":{"line":10,"character":17}},"text":"3"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":30}}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":10,"character":18},"end":{"line":10,"character":18}},"context":{"diagnostics":[]}},"id":97,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":97,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 260

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":5,"character":15}},"id":98,"jsonrpc":"2.0"}
<<<
Content-Length: 249

{"id":98,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 330

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":12,"character":19},"end":{"line":12,"character":19}},"context":{"diagnostics":[]}},"id":99,"jsonrpc":"2.0"}
<<<
Content-Length: 37

{"id":99,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":10,"character":0}},"id":100,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":100,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":10,"character":1}},"id":101,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":101,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":10,"character":1},"end":{"line":10,"character":1}},"context":{"diagnostics":[]}},"id":102,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":102,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":31,"character":28},"end":{"line":31,"character":28}},"context":{"diagnostics":[]}},"id":103,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":103,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":26,"character":27},"end":{"line":26,"character":27}},"context":{"diagnostics":[]}},"id":104,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":104,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":34,"character":4}},"id":105,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":105,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":35,"character":1},"end":{"line":35,"character":1}},"context":{"diagnostics":[]}},"id":106,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":106,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":81,"character":30},"end":{"line":81,"character":30}},"context":{"diagnostics":[]}},"id":107,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":107,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 269

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":85,"character":34}},"id":108,"jsonrpc":"2.0"}
<<<
Content-Length: 126

{"id":108,"jsonrpc":"2.0","result":[{"kind":1,"range":{"end":{"character":20,"line":85},"start":{"character":13,"line":85}}}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":85,"character":34},"end":{"line":85,"character":34}},"context":{"diagnostics":[]}},"id":109,"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"id":109,"jsonrpc":"2.0","result":[{"command":{"arguments":[{"file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","selection":{"end":{"character":34,"line":85},"start":{"character":34,"line":85}},"tweakID":"ExpandMacro"}],"command":"clangd.applyTweak","title":"Expand macro 'HIGH'"},"kind":"refactor","title":"Expand macro 'HIGH'"}]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":86,"character":40},"end":{"line":86,"character":40}},"context":{"diagnostics":[]}},"id":110,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":110,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 257

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":70,"character":24}},"id":111,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":111,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":70,"character":24},"end":{"line":70,"character":24}},"context":{"diagnostics":[]}},"id":112,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":112,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 342

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":31},"contentChanges":[{"range":{"start":{"line":70,"character":24},"end":{"line":70,"character":24}},"text":"\n    "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":31}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":32},"contentChanges":[{"range":{"start":{"line":71,"character":4},"end":{"line":71,"character":4}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 's'","range":{"end":{"character":5,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":32}}
>>>
Content-Length: 509

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":5},"end":{"line":71,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":71,"character":4},"end":{"line":71,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 's'"}]}},"id":113,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":113,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":114,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":114,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":18,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":90},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":17,"line":78},"start":{"character":6,"line":78}}}]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":33},"contentChanges":[{"range":{"start":{"line":71,"character":5},"end":{"line":71,"character":5}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'se'","range":{"end":{"character":6,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":33}}
>>>
Content-Length: 510

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":6},"end":{"line":71,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":71,"character":4},"end":{"line":71,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'se'"}]}},"id":115,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":115,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":116,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":116,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":18,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":90},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":17,"line":78},"start":{"character":6,"line":78}}}]}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":34},"contentChanges":[{"range":{"start":{"line":71,"character":5},"end":{"line":71,"character":6}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 's'","range":{"end":{"character":5,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":34}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":35},"contentChanges":[{"range":{"start":{"line":71,"character":4},"end":{"line":71,"character":5}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":35}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":36},"contentChanges":[{"range":{"start":{"line":71,"character":4},"end":{"line":71,"character":4}},"text":"S"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 416

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S'","range":{"end":{"character":5,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":36}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":37},"contentChanges":[{"range":{"start":{"line":71,"character":5},"end":{"line":71,"character":5}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 417

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Se'","range":{"end":{"character":6,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":37}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":38},"contentChanges":[{"range":{"start":{"line":71,"character":6},"end":{"line":71,"character":6}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Ser'","range":{"end":{"character":7,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":38}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":39},"contentChanges":[{"range":{"start":{"line":71,"character":7},"end":{"line":71,"character":7}},"text":"u"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Seru'","range":{"end":{"character":8,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":39}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":40},"contentChanges":[{"range":{"start":{"line":71,"character":8},"end":{"line":71,"character":8}},"text":"a"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serua'","range":{"end":{"character":9,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":40}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":41},"contentChanges":[{"range":{"start":{"line":71,"character":9},"end":{"line":71,"character":9}},"text":"k"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 809

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'Seruak'; did you mean 'Serial'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:143:25:\nnote: 'Serial' declared here","range":{"end":{"character":10,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":41}}
>>>
Content-Length: 704

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":10},"end":{"line":71,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":71,"character":4},"end":{"line":71,"character":10}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'Seruak'; did you mean 'Serial'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:143:25:\nnote: 'Serial' declared here"}]}},"id":117,"jsonrpc":"2.0"}
<<<
Content-Length: 754

{"id":117,"jsonrpc":"2.0","result":[{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'Seruak'; did you mean 'Serial'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:143:25:\nnote: 'Serial' declared here","range":{"end":{"character":10,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"edit":{"changes":{"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp":[{"newText":"Serial","range":{"end":{"character":10,"line":71},"start":{"character":4,"line":71}}}]}},"isPreferred":true,"kind":"quickfix","title":"change 'Seruak' to 'Serial'"}]}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":42},"contentChanges":[{"range":{"start":{"line":71,"character":9},"end":{"line":71,"character":10}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serua'","range":{"end":{"character":9,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":42}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":43},"contentChanges":[{"range":{"start":{"line":71,"character":8},"end":{"line":71,"character":9}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Seru'","range":{"end":{"character":8,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":43}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":44},"contentChanges":[{"range":{"start":{"line":71,"character":8},"end":{"line":71,"character":8}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 420

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serui'","range":{"end":{"character":9,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":44}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":45},"contentChanges":[{"range":{"start":{"line":71,"character":8},"end":{"line":71,"character":9}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Seru'","range":{"end":{"character":8,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":45}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":46},"contentChanges":[{"range":{"start":{"line":71,"character":7},"end":{"line":71,"character":8}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 418

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Ser'","range":{"end":{"character":7,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":46}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":47},"contentChanges":[{"range":{"start":{"line":71,"character":7},"end":{"line":71,"character":7}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 419

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Seri'","range":{"end":{"character":8,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":47}}
>>>
Content-Length: 512

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":8},"end":{"line":71,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":71,"character":4},"end":{"line":71,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Seri'"}]}},"id":118,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":118,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":119,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":119,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":18,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":90},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":17,"line":78},"start":{"character":6,"line":78}}}]}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":48},"contentChanges":[{"range":{"start":{"line":71,"character":8},"end":{"line":71,"character":8}},"text":"a"}]},"jsonrpc":"2.0"}Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":49},"contentChanges":[{"range":{"start":{"line":71,"character":9},"end":{"line":71,"character":9}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 807

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'Seria'; did you mean 'Serial'? (fix available)\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:143:25:\nnote: 'Serial' declared here","range":{"end":{"character":9,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":48}}Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":49}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":10},"end":{"line":71,"character":10}},"context":{"diagnostics":[]}},"id":120,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":120,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":121,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":121,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":18,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":90},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":17,"line":78},"start":{"character":6,"line":78}}}]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":50},"contentChanges":[{"range":{"start":{"line":71,"character":10},"end":{"line":71,"character":10}},"text":"."}]},"jsonrpc":"2.0"}Content-Length: 313

{"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":71,"character":11},"context":{"triggerKind":2,"triggerCharacter":"."}},"id":122,"jsonrpc":"2.0"}
<<<
Content-Length: 7899

{"id":122,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[{"detail":"int","filterText":"availableForWrite","insertText":"availableForWrite()","insertTextFormat":2,"kind":2,"label":" availableForWrite()","score":14.520001411437988,"sortText":"3e97ae13availableForWrite","textEdit":{"newText":"availableForWrite()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"int","filterText":"read","insertText":"read()","insertTextFormat":2,"kind":2,"label":" read()","score":14.520001411437988,"sortText":"3e97ae13read","textEdit":{"newText":"read()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"[5 overloads]","filterText":"write","insertText":"write($0)","insertTextFormat":2,"kind":2,"label":" write(…)","score":14.520001411437988,"sortText":"3e97ae13write","textEdit":{"newText":"write($0)","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"[3 overloads]","filterText":"write","insertText":"write($0)","insertTextFormat":2,"kind":2,"label":" write(…)","score":14.520001411437988,"sortText":"3e97ae13write","textEdit":{"newText":"write($0)","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"void","filterText":"_rx_complete_irq","insertText":"_rx_complete_irq()","insertTextFormat":2,"kind":2,"label":" _rx_complete_irq()","score":9.6800003051757812,"sortText":"3ee51eb8_rx_complete_irq","textEdit":{"newText":"_rx_complete_irq()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"void","filterText":"_tx_udr_empty_irq","insertText":"_tx_udr_empty_irq()","insertTextFormat":2,"kind":2,"label":" _tx_udr_empty_irq()","score":9.6800003051757812,"sortText":"3ee51eb8_tx_udr_empty_irq","textEdit":{"newText":"_tx_udr_empty_irq()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"int","filterText":"available","insertText":"available()","insertTextFormat":2,"kind":2,"label":" available()","score":9.6800003051757812,"sortText":"3ee51eb8available","textEdit":{"newText":"available()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"[2 overloads]","filterText":"begin","insertText":"begin($0)","insertTextFormat":2,"kind":2,"label":" begin(…)","score":9.6800003051757812,"sortText":"3ee51eb8begin","textEdit":{"newText":"begin($0)","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"void","filterText":"end","insertText":"end()","insertTextFormat":2,"kind":2,"label":" end()","score":9.6800003051757812,"sortText":"3ee51eb8end","textEdit":{"newText":"end()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"void","filterText":"flush","insertText":"flush()","insertTextFormat":2,"kind":2,"label":" flush()","score":9.6800003051757812,"sortText":"3ee51eb8flush","textEdit":{"newText":"flush()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"int","filterText":"peek","insertText":"peek()","insertTextFormat":2,"kind":2,"label":" peek()","score":9.6800003051757812,"sortText":"3ee51eb8peek","textEdit":{"newText":"peek()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"void","filterText":"clearWriteError","insertText":"clearWriteError()","insertTextFormat":2,"kind":2,"label":" clearWriteError()","score":7.2600007057189941,"sortText":"3f17ae13clearWriteError","textEdit":{"newText":"clearWriteError()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"int","filterText":"getWriteError","insertText":"getWriteError()","insertTextFormat":2,"kind":2,"label":" getWriteError()","score":7.2600007057189941,"sortText":"3f17ae13getWriteError","textEdit":{"newText":"getWriteError()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"[2 overloads]","filterText":"readBytes","insertText":"readBytes($0)","insertTextFormat":2,"kind":2,"label":" readBytes(…)","score":7.2600007057189941,"sortText":"3f17ae13readBytes","textEdit":{"newText":"readBytes($0)","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"[2 overloads]","filterText":"readBytesUntil","insertText":"readBytesUntil($0)","insertTextFormat":2,"kind":2,"label":" readBytesUntil(…)","score":7.2600007057189941,"sortText":"3f17ae13readBytesUntil","textEdit":{"newText":"readBytesUntil($0)","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"String","filterText":"readString","insertText":"readString()","insertTextFormat":2,"kind":2,"label":" readString()","score":7.2600007057189941,"sortText":"3f17ae13readString","textEdit":{"newText":"readString()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"String","filterText":"readStringUntil","insertText":"readStringUntil(${1:char terminator})","insertTextFormat":2,"kind":2,"label":" readStringUntil(char terminator)","score":7.2600007057189941,"sortText":"3f17ae13readStringUntil","textEdit":{"newText":"readStringUntil(${1:char terminator})","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"[5 overloads]","filterText":"find","insertText":"find($0)","insertTextFormat":2,"kind":2,"label":" find(…)","score":4.8400001525878906,"sortText":"3f651eb8find","textEdit":{"newText":"find($0)","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"[4 overloads]","filterText":"findUntil","insertText":"findUntil($0)","insertTextFormat":2,"kind":2,"label":" findUntil(…)","score":4.8400001525878906,"sortText":"3f651eb8findUntil","textEdit":{"newText":"findUntil($0)","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"unsigned long","filterText":"getTimeout","insertText":"getTimeout()","insertTextFormat":2,"kind":2,"label":" getTimeout()","score":4.8400001525878906,"sortText":"3f651eb8getTimeout","textEdit":{"newText":"getTimeout()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"float","filterText":"parseFloat","insertText":"parseFloat()","insertTextFormat":2,"kind":2,"label":" parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR)","score":4.8400001525878906,"sortText":"3f651eb8parseFloat","textEdit":{"newText":"parseFloat()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"long","filterText":"parseInt","insertText":"parseInt()","insertTextFormat":2,"kind":2,"label":" parseInt(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR)","score":4.8400001525878906,"sortText":"3f651eb8parseInt","textEdit":{"newText":"parseInt()","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"[11 overloads]","filterText":"print","insertText":"print($0)","insertTextFormat":2,"kind":2,"label":" print(…)","score":4.8400001525878906,"sortText":"3f651eb8print","textEdit":{"newText":"print($0)","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"[12 overloads]","filterText":"println","insertText":"println($0)","insertTextFormat":2,"kind":2,"label":" println(…)","score":4.8400001525878906,"sortText":"3f651eb8println","textEdit":{"newText":"println($0)","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}},{"detail":"void","filterText":"setTimeout","insertText":"setTimeout(${1:unsigned long timeout})","insertTextFormat":2,"kind":2,"label":" setTimeout(unsigned long timeout)","score":4.8400001525878906,"sortText":"3f651eb8setTimeout","textEdit":{"newText":"setTimeout(${1:unsigned long timeout})","range":{"end":{"character":11,"line":71},"start":{"character":11,"line":71}}}}]}}Content-Length: 412

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":50}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":11},"end":{"line":71,"character":11}},"context":{"diagnostics":[]}},"id":123,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":123,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":73,"character":0}},"id":124,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":124,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 343

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":51},"contentChanges":[{"range":{"start":{"line":71,"character":11},"end":{"line":71,"character":11}},"text":"write()"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2229

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"ovl_no_viable_member_function_in_call","message":"No matching member function for call to 'write'\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:129:20:\nnote: candidate function not viable: requires 1 argument, but 0 were provided\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:130:19:\nnote: candidate function not viable: requires single argument 'n', but no arguments were provided\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:131:19:\nnote: candidate function not viable: requires single argument 'n', but no arguments were provided\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:132:19:\nnote: candidate function not viable: requires single argument 'n', but no arguments were provided\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial.h:133:19:\nnote: candidate function not viable: requires single argument 'n', but no arguments were provided\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.h:52:12:\nnote: candidate function not viable: requires single argument 'str', but no arguments were provided\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.h:56:20:\nnote: candidate function not viable: requires 2 arguments, but 0 were provided\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.h:57:12:\nnote: candidate function not viable: requires 2 arguments, but 0 were provided","range":{"end":{"character":16,"line":71},"start":{"character":4,"line":71}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":51}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":17},"end":{"line":71,"character":17}},"context":{"diagnostics":[]}},"id":125,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":125,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 340

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":52},"contentChanges":[{"range":{"start":{"line":71,"character":17},"end":{"line":71,"character":17}},"text":"\"\""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":52}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":18},"end":{"line":71,"character":18}},"context":{"diagnostics":[]}},"id":126,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":126,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":53},"contentChanges":[{"range":{"start":{"line":71,"character":18},"end":{"line":71,"character":18}},"text":"O"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":53}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":54},"contentChanges":[{"range":{"start":{"line":71,"character":19},"end":{"line":71,"character":19}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":54}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":55},"contentChanges":[{"range":{"start":{"line":71,"character":20},"end":{"line":71,"character":20}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":55}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":21},"end":{"line":71,"character":21}},"context":{"diagnostics":[]}},"id":127,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":127,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":56},"contentChanges":[{"range":{"start":{"line":71,"character":20},"end":{"line":71,"character":21}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":56}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":57},"contentChanges":[{"range":{"start":{"line":71,"character":19},"end":{"line":71,"character":20}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":57}}
>>>
Content-Length: 352

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":58},"contentChanges":[{"range":{"start":{"line":71,"character":18},"end":{"line":71,"character":19}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":58}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":18},"end":{"line":71,"character":18}},"context":{"diagnostics":[]}},"id":128,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":128,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":59},"contentChanges":[{"range":{"start":{"line":71,"character":18},"end":{"line":71,"character":18}},"text":"P"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":59}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":60},"contentChanges":[{"range":{"start":{"line":71,"character":19},"end":{"line":71,"character":19}},"text":"r"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":60}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":61},"contentChanges":[{"range":{"start":{"line":71,"character":20},"end":{"line":71,"character":20}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":61}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":62},"contentChanges":[{"range":{"start":{"line":71,"character":21},"end":{"line":71,"character":21}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":62}}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":63},"contentChanges":[{"range":{"start":{"line":71,"character":22},"end":{"line":71,"character":22}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":3,"line":72},"start":{"character":2,"line":72}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":63}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":23},"end":{"line":71,"character":23}},"context":{"diagnostics":[]}},"id":129,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":129,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":25},"end":{"line":71,"character":25}},"context":{"diagnostics":[]}},"id":130,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":130,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 337

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":64},"contentChanges":[{"range":{"start":{"line":71,"character":25},"end":{"line":71,"character":25}},"text":";"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":64}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":26},"end":{"line":71,"character":26}},"context":{"diagnostics":[]}},"id":131,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":131,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":65,"character":5}},"id":132,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":132,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":66,"character":5}},"id":133,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":133,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":71,"character":9}},"id":134,"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"id":134,"jsonrpc":"2.0","result":[{"range":{"end":{"character":23,"line":69},"start":{"character":17,"line":69}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp"}]}
>>>
Content-Length: 3001

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp","languageId":"cpp","version":1,"text":"/*\n  HardwareSerial0.cpp - Hardware serial library for Wiring\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 23 November 2006 by David A. Mellis\n  Modified 28 September 2010 by Mark Sproul\n  Modified 14 August 2012 by Alarus\n  Modified 3 December 2013 by Matthijs Kooijman\n*/\n\n#include \"Arduino.h\"\n#include \"HardwareSerial.h\"\n#include \"HardwareSerial_private.h\"\n\n// Each HardwareSerial is defined in its own file, since the linker pulls\n// in the entire file when any element inside is used. --gc-sections can\n// additionally cause unused symbols to be dropped, but ISRs have the\n// \"used\" attribute so are never dropped and they keep the\n// HardwareSerial instance in as well. Putting each instance in its own\n// file prevents the linker from pulling in any unused instances in the\n// first place.\n\n#if defined(HAVE_HWSERIAL0)\n\n#if defined(USART_RX_vect)\n  ISR(USART_RX_vect)\n#elif defined(USART0_RX_vect)\n  ISR(USART0_RX_vect)\n#elif defined(USART_RXC_vect)\n  ISR(USART_RXC_vect) // ATmega8\n#else\n  #error \"Don't know what the Data Received vector is called for Serial\"\n#endif\n  {\n    Serial._rx_complete_irq();\n  }\n\n#if defined(UART0_UDRE_vect)\nISR(UART0_UDRE_vect)\n#elif defined(UART_UDRE_vect)\nISR(UART_UDRE_vect)\n#elif defined(USART0_UDRE_vect)\nISR(USART0_UDRE_vect)\n#elif defined(USART_UDRE_vect)\nISR(USART_UDRE_vect)\n#else\n  #error \"Don't know what the Data Register Empty vector is called for Serial\"\n#endif\n{\n  Serial._tx_udr_empty_irq();\n}\n\n#if defined(UBRRH) \u0026\u0026 defined(UBRRL)\n  HardwareSerial Serial(\u0026UBRRH, \u0026UBRRL, \u0026UCSRA, \u0026UCSRB, \u0026UCSRC, \u0026UDR);\n#else\n  HardwareSerial Serial(\u0026UBRR0H, \u0026UBRR0L, \u0026UCSR0A, \u0026UCSR0B, \u0026UCSR0C, \u0026UDR0);\n#endif\n\n// Function that can be weakly referenced by serialEventRun to prevent\n// pulling in this file if it's not otherwise used.\nbool Serial0_available() {\n  return Serial.available();\n}\n\n#endif // HAVE_HWSERIAL0\n"}},"jsonrpc":"2.0"}Content-Length: 194

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp"}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":71,"character":8}},"id":135,"jsonrpc":"2.0"}
<<<
Content-Length: 268

{"id":135,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"end":{"character":10,"line":71},"start":{"character":4,"line":71}}}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":2}},"id":136,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":136,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":2}},"id":137,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":137,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":2},"end":{"line":69,"character":4}},"context":{"diagnostics":[]}},"id":138,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":138,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":2}},"id":139,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":139,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":65},"contentChanges":[{"range":{"start":{"line":69,"character":2},"end":{"line":69,"character":4}},"rangeLength":2,"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 618

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'e'","range":{"end":{"character":3,"line":69},"start":{"character":2,"line":69}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":37,"line":69},"start":{"character":36,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":65}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":66},"contentChanges":[{"range":{"start":{"line":69,"character":3},"end":{"line":69,"character":3}},"text":"l"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 619

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'el'","range":{"end":{"character":4,"line":69},"start":{"character":2,"line":69}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":38,"line":69},"start":{"character":37,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":66}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":67},"contentChanges":[{"range":{"start":{"line":69,"character":4},"end":{"line":69,"character":4}},"text":"s"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 620

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'els'","range":{"end":{"character":5,"line":69},"start":{"character":2,"line":69}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":39,"line":69},"start":{"character":38,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":67}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":68},"contentChanges":[{"range":{"start":{"line":69,"character":5},"end":{"line":69,"character":5}},"text":"e"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":6,"line":69},"start":{"character":2,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":68}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":69},"contentChanges":[{"range":{"start":{"line":69,"character":6},"end":{"line":69,"character":6}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":6,"line":69},"start":{"character":2,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":69}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":70},"contentChanges":[{"range":{"start":{"line":69,"character":7},"end":{"line":69,"character":7}},"text":"i"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":6,"line":69},"start":{"character":2,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":70}}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":71},"contentChanges":[{"range":{"start":{"line":69,"character":8},"end":{"line":69,"character":8}},"text":"f"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 404

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":6,"line":69},"start":{"character":2,"line":69}},"severity":1,"source":"clang"}],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":71}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":9},"end":{"line":69,"character":9}},"context":{"diagnostics":[]}},"id":140,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":140,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 228

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}},"id":141,"jsonrpc":"2.0"}
<<<
Content-Length: 2709

{"id":141,"jsonrpc":"2.0","result":[{"kind":13,"name":"trigPin","range":{"end":{"character":22,"line":4},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":17,"line":4},"start":{"character":10,"line":4}}},{"kind":13,"name":"echoPin","range":{"end":{"character":22,"line":5},"start":{"character":0,"line":5}},"selectionRange":{"end":{"character":17,"line":5},"start":{"character":10,"line":5}}},{"kind":13,"name":"redPin","range":{"end":{"character":20,"line":7},"start":{"character":0,"line":7}},"selectionRange":{"end":{"character":16,"line":7},"start":{"character":10,"line":7}}},{"kind":13,"name":"greenPin","range":{"end":{"character":22,"line":8},"start":{"character":0,"line":8}},"selectionRange":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}}},{"kind":13,"name":"bluePin","range":{"end":{"character":21,"line":9},"start":{"character":0,"line":9}},"selectionRange":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}}},{"kind":13,"name":"buttonPin","range":{"end":{"character":18,"line":10},"start":{"character":0,"line":10}},"selectionRange":{"end":{"character":13,"line":10},"start":{"character":4,"line":10}}},{"kind":13,"name":"distance","range":{"end":{"character":18,"line":12},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":14,"line":12},"start":{"character":6,"line":12}}},{"kind":13,"name":"microServo","range":{"end":{"character":16,"line":13},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}}},{"kind":12,"name":"setup","range":{"end":{"character":12,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":10,"line":16},"start":{"character":5,"line":16}}},{"kind":12,"name":"loop","range":{"end":{"character":11,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":9,"line":18},"start":{"character":5,"line":18}}},{"kind":12,"name":"getDistance","range":{"end":{"character":19,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":17,"line":20},"start":{"character":6,"line":20}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":35},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":10,"line":22},"start":{"character":5,"line":22}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":75},"start":{"character":0,"line":37}},"selectionRange":{"end":{"character":9,"line":37},"start":{"character":5,"line":37}}},{"kind":12,"name":"getDistance","range":{"end":{"character":1,"line":90},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":17,"line":78},"start":{"character":6,"line":78}}}]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":2}},"id":142,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":142,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":2}},"id":143,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":143,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 497

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":69,"character":2},"end":{"line":72,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":69,"character":2},"end":{"line":69,"character":6}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]}},"id":144,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":144,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":2}},"id":145,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":145,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 351

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":72},"contentChanges":[{"range":{"start":{"line":69,"character":2},"end":{"line":72,"character":3}},"rangeLength":97,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":72}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":73},"contentChanges":[{"range":{"start":{"line":69,"character":2},"end":{"line":70,"character":0}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":73}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":74},"contentChanges":[{"range":{"start":{"line":69,"character":2},"end":{"line":70,"character":0}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":74}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":75},"contentChanges":[{"range":{"start":{"line":69,"character":0},"end":{"line":69,"character":2}},"rangeLength":2,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":75}}
>>>
Content-Length: 350

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":76},"contentChanges":[{"range":{"start":{"line":68,"character":0},"end":{"line":69,"character":0}},"rangeLength":1,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":76}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":64,"character":3}},"id":146,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":146,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 268

{"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":63,"character":4}},"id":147,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":147,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":63,"character":4}},"id":148,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":148,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 436

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":77},"contentChanges":[{"range":{"start":{"line":63,"character":4},"end":{"line":63,"character":4}},"text":"else if (digitalRead(buttonPin) == LOW) {\n    microServo.write(0);\n    Serial.write(\"Press\");\n  }"}]},"jsonrpc":"2.0"}Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":64,"character":10}},"id":149,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":149,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}]}Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":77}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":66,"character":3},"end":{"line":66,"character":3}},"context":{"diagnostics":[]}},"id":150,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":150,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":65,"character":9}},"id":151,"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"id":151,"jsonrpc":"2.0","result":[{"range":{"end":{"character":23,"line":69},"start":{"character":17,"line":69}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp"}]}
>>>
Content-Length: 3001

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp","languageId":"cpp","version":1,"text":"/*\n  HardwareSerial0.cpp - Hardware serial library for Wiring\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 23 November 2006 by David A. Mellis\n  Modified 28 September 2010 by Mark Sproul\n  Modified 14 August 2012 by Alarus\n  Modified 3 December 2013 by Matthijs Kooijman\n*/\n\n#include \"Arduino.h\"\n#include \"HardwareSerial.h\"\n#include \"HardwareSerial_private.h\"\n\n// Each HardwareSerial is defined in its own file, since the linker pulls\n// in the entire file when any element inside is used. --gc-sections can\n// additionally cause unused symbols to be dropped, but ISRs have the\n// \"used\" attribute so are never dropped and they keep the\n// HardwareSerial instance in as well. Putting each instance in its own\n// file prevents the linker from pulling in any unused instances in the\n// first place.\n\n#if defined(HAVE_HWSERIAL0)\n\n#if defined(USART_RX_vect)\n  ISR(USART_RX_vect)\n#elif defined(USART0_RX_vect)\n  ISR(USART0_RX_vect)\n#elif defined(USART_RXC_vect)\n  ISR(USART_RXC_vect) // ATmega8\n#else\n  #error \"Don't know what the Data Received vector is called for Serial\"\n#endif\n  {\n    Serial._rx_complete_irq();\n  }\n\n#if defined(UART0_UDRE_vect)\nISR(UART0_UDRE_vect)\n#elif defined(UART_UDRE_vect)\nISR(UART_UDRE_vect)\n#elif defined(USART0_UDRE_vect)\nISR(USART0_UDRE_vect)\n#elif defined(USART_UDRE_vect)\nISR(USART_UDRE_vect)\n#else\n  #error \"Don't know what the Data Register Empty vector is called for Serial\"\n#endif\n{\n  Serial._tx_udr_empty_irq();\n}\n\n#if defined(UBRRH) \u0026\u0026 defined(UBRRL)\n  HardwareSerial Serial(\u0026UBRRH, \u0026UBRRL, \u0026UCSRA, \u0026UCSRB, \u0026UCSRC, \u0026UDR);\n#else\n  HardwareSerial Serial(\u0026UBRR0H, \u0026UBRR0L, \u0026UCSR0A, \u0026UCSR0B, \u0026UCSR0C, \u0026UDR0);\n#endif\n\n// Function that can be weakly referenced by serialEventRun to prevent\n// pulling in this file if it's not otherwise used.\nbool Serial0_available() {\n  return Serial.available();\n}\n\n#endif // HAVE_HWSERIAL0\n"}},"jsonrpc":"2.0"}Content-Length: 194

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp"}}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":66,"character":8}},"id":152,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":152,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":66,"character":8}},"id":153,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":153,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 335

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":78},"contentChanges":[{"range":{"start":{"line":66,"character":3},"end":{"line":66,"character":3}},"text":" "}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":78}}
>>>
Content-Length: 329

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":66,"character":4},"end":{"line":66,"character":4}},"context":{"diagnostics":[]}},"id":154,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":154,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":66,"character":8}},"id":155,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":155,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":66,"character":8}},"id":156,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":156,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":67,"character":10}},"id":157,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":157,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 331

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"range":{"start":{"line":71,"character":12},"end":{"line":71,"character":12}},"context":{"diagnostics":[]}},"id":158,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":158,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 277

{"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"options":{"tabSize":2,"insertSpaces":true,"key":""}},"id":159,"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"id":159,"jsonrpc":"2.0","result":[{"newText":"\n    ","range":{"end":{"character":8,"line":56},"start":{"character":29,"line":55}}},{"newText":" ","range":{"end":{"character":8,"line":86},"start":{"character":8,"line":86}}}]}
>>>
Content-Length: 439

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":80},"contentChanges":[{"range":{"start":{"line":86,"character":8},"end":{"line":86,"character":8}},"text":" "},{"range":{"start":{"line":56,"character":4},"end":{"line":56,"character":8}},"rangeLength":4,"text":""}]},"jsonrpc":"2.0"}
<<<
Content-Length: 236

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp","version":80}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":69,"character":16}},"id":160,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":160,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":9},"start":{"character":10,"line":9}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":68,"character":16}},"id":161,"jsonrpc":"2.0"}
<<<
Content-Length: 250

{"id":161,"jsonrpc":"2.0","result":[{"range":{"end":{"character":18,"line":8},"start":{"character":10,"line":8}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":64,"character":14}},"id":162,"jsonrpc":"2.0"}
<<<
Content-Length: 208

{"id":162,"jsonrpc":"2.0","result":[{"range":{"end":{"character":17,"line":263},"start":{"character":12,"line":263}},"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}]}
>>>
Content-Length: 11726

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp","languageId":"cpp","version":1,"text":"/*\n Servo.cpp - Interrupt driven Servo library for Arduino using 16 bit timers- Version 2\n Copyright (c) 2009 Michael Margolis.  All right reserved.\n\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n#if defined(ARDUINO_ARCH_AVR)\n\n#include \u003cavr/interrupt.h\u003e\n#include \u003cArduino.h\u003e\n\n#include \"Servo.h\"\n\n#define usToTicks(_us)    (( clockCyclesPerMicrosecond()* _us) / 8)     // converts microseconds to tick (assumes prescale of 8)  // 12 Aug 2009\n#define ticksToUs(_ticks) (( (unsigned)_ticks * 8)/ clockCyclesPerMicrosecond() ) // converts from ticks back to microseconds\n\n\n#define TRIM_DURATION       2                               // compensation ticks to trim adjust for digitalWrite delays // 12 August 2009\n\n//#define NBR_TIMERS        (MAX_SERVOS / SERVOS_PER_TIMER)\n\nstatic servo_t servos[MAX_SERVOS];                          // static array of servo structures\nstatic volatile int8_t Channel[_Nbr_16timers ];             // counter for the servo being pulsed for each timer (or -1 if refresh interval)\n\nuint8_t ServoCount = 0;                                     // the total number of attached servos\n\n\n// convenience macros\n#define SERVO_INDEX_TO_TIMER(_servo_nbr) ((timer16_Sequence_t)(_servo_nbr / SERVOS_PER_TIMER)) // returns the timer controlling this servo\n#define SERVO_INDEX_TO_CHANNEL(_servo_nbr) (_servo_nbr % SERVOS_PER_TIMER)       // returns the index of the servo on this timer\n#define SERVO_INDEX(_timer,_channel)  ((_timer*SERVOS_PER_TIMER) + _channel)     // macro to access servo index by timer and channel\n#define SERVO(_timer,_channel)  (servos[SERVO_INDEX(_timer,_channel)])            // macro to access servo class by timer and channel\n\n#define SERVO_MIN() (MIN_PULSE_WIDTH - this-\u003emin * 4)  // minimum value in uS for this servo\n#define SERVO_MAX() (MAX_PULSE_WIDTH - this-\u003emax * 4)  // maximum value in uS for this servo\n\n/************ static functions common to all instances ***********************/\n\nstatic inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)\n{\n  if( Channel[timer] \u003c 0 )\n    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer\n  else{\n    if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 SERVO(timer,Channel[timer]).Pin.isActive == true )\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated\n  }\n\n  Channel[timer]++;    // increment to the next channel\n  if( SERVO_INDEX(timer,Channel[timer]) \u003c ServoCount \u0026\u0026 Channel[timer] \u003c SERVOS_PER_TIMER) {\n    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;\n    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated\n      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high\n  }\n  else {\n    // finished all channels so wait for the refresh period to expire before starting over\n    if( ((unsigned)*TCNTn) + 4 \u003c usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed\n      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);\n    else\n      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed\n    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel\n  }\n}\n\n#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform\n// Interrupt handlers for Arduino\n#if defined(_useTimer1)\nSIGNAL (TIMER1_COMPA_vect)\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n\n#if defined(_useTimer3)\nSIGNAL (TIMER3_COMPA_vect)\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n\n#if defined(_useTimer4)\nSIGNAL (TIMER4_COMPA_vect)\n{\n  handle_interrupts(_timer4, \u0026TCNT4, \u0026OCR4A);\n}\n#endif\n\n#if defined(_useTimer5)\nSIGNAL (TIMER5_COMPA_vect)\n{\n  handle_interrupts(_timer5, \u0026TCNT5, \u0026OCR5A);\n}\n#endif\n\n#elif defined WIRING\n// Interrupt handlers for Wiring\n#if defined(_useTimer1)\nvoid Timer1Service()\n{\n  handle_interrupts(_timer1, \u0026TCNT1, \u0026OCR1A);\n}\n#endif\n#if defined(_useTimer3)\nvoid Timer3Service()\n{\n  handle_interrupts(_timer3, \u0026TCNT3, \u0026OCR3A);\n}\n#endif\n#endif\n\n\nstatic void initISR(timer16_Sequence_t timer)\n{\n#if defined (_useTimer1)\n  if(timer == _timer1) {\n    TCCR1A = 0;             // normal counting mode\n    TCCR1B = _BV(CS11);     // set prescaler of 8\n    TCNT1 = 0;              // clear the timer count\n#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF1A);      // clear any pending interrupts;\n    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt\n#else\n    // here if not ATmega8 or ATmega128\n    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts;\n    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER1OUTCOMPAREA_INT, Timer1Service);\n#endif\n  }\n#endif\n\n#if defined (_useTimer3)\n  if(timer == _timer3) {\n    TCCR3A = 0;             // normal counting mode\n    TCCR3B = _BV(CS31);     // set prescaler of 8\n    TCNT3 = 0;              // clear the timer count\n#if defined(__AVR_ATmega128__)\n    TIFR |= _BV(OCF3A);     // clear any pending interrupts;\n\tETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt\n#else\n    TIFR3 = _BV(OCF3A);     // clear any pending interrupts;\n    TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt\n#endif\n#if defined(WIRING)\n    timerAttach(TIMER3OUTCOMPAREA_INT, Timer3Service);  // for Wiring platform only\n#endif\n  }\n#endif\n\n#if defined (_useTimer4)\n  if(timer == _timer4) {\n    TCCR4A = 0;             // normal counting mode\n    TCCR4B = _BV(CS41);     // set prescaler of 8\n    TCNT4 = 0;              // clear the timer count\n    TIFR4 = _BV(OCF4A);     // clear any pending interrupts;\n    TIMSK4 =  _BV(OCIE4A) ; // enable the output compare interrupt\n  }\n#endif\n\n#if defined (_useTimer5)\n  if(timer == _timer5) {\n    TCCR5A = 0;             // normal counting mode\n    TCCR5B = _BV(CS51);     // set prescaler of 8\n    TCNT5 = 0;              // clear the timer count\n    TIFR5 = _BV(OCF5A);     // clear any pending interrupts;\n    TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt\n  }\n#endif\n}\n\nstatic void finISR(timer16_Sequence_t timer)\n{\n    //disable use of the given timer\n#if defined WIRING   // Wiring\n  if(timer == _timer1) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK1 \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #else\n    TIMSK \u0026=  ~_BV(OCIE1A) ;  // disable timer 1 output compare interrupt\n    #endif\n    timerDetach(TIMER1OUTCOMPAREA_INT);\n  }\n  else if(timer == _timer3) {\n    #if defined(__AVR_ATmega1281__)||defined(__AVR_ATmega2561__)\n    TIMSK3 \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #else\n    ETIMSK \u0026= ~_BV(OCIE3A);    // disable the timer3 output compare A interrupt\n    #endif\n    timerDetach(TIMER3OUTCOMPAREA_INT);\n  }\n#else\n  //For arduino - in future: call here to a currently undefined function to reset the timer\n  (void) timer;  // squash \"unused parameter 'timer' [-Wunused-parameter]\" warning\n#endif\n}\n\nstatic boolean isTimerActive(timer16_Sequence_t timer)\n{\n  // returns true if any servo is active on this timer\n  for(uint8_t channel=0; channel \u003c SERVOS_PER_TIMER; channel++) {\n    if(SERVO(timer,channel).Pin.isActive == true)\n      return true;\n  }\n  return false;\n}\n\n\n/****************** end of static functions ******************************/\n\nServo::Servo()\n{\n  if( ServoCount \u003c MAX_SERVOS) {\n    this-\u003eservoIndex = ServoCount++;                    // assign a servo index to this instance\n\tservos[this-\u003eservoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009\n  }\n  else\n    this-\u003eservoIndex = INVALID_SERVO ;  // too many servos\n}\n\nuint8_t Servo::attach(int pin)\n{\n  return this-\u003eattach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);\n}\n\nuint8_t Servo::attach(int pin, int min, int max)\n{\n  if(this-\u003eservoIndex \u003c MAX_SERVOS ) {\n    pinMode( pin, OUTPUT) ;                                   // set servo pin to output\n    servos[this-\u003eservoIndex].Pin.nbr = pin;\n    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 \u003c 128\n    this-\u003emin  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS\n    this-\u003emax  = (MAX_PULSE_WIDTH - max)/4;\n    // initialize the timer if it has not already been initialized\n    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n    if(isTimerActive(timer) == false)\n      initISR(timer);\n    servos[this-\u003eservoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive\n  }\n  return this-\u003eservoIndex ;\n}\n\nvoid Servo::detach()\n{\n  servos[this-\u003eservoIndex].Pin.isActive = false;\n  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);\n  if(isTimerActive(timer) == false) {\n    finISR(timer);\n  }\n}\n\nvoid Servo::write(int value)\n{\n  if(value \u003c MIN_PULSE_WIDTH)\n  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)\n    if(value \u003c 0) value = 0;\n    if(value \u003e 180) value = 180;\n    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());\n  }\n  this-\u003ewriteMicroseconds(value);\n}\n\nvoid Servo::writeMicroseconds(int value)\n{\n  // calculate and store the values for the given channel\n  byte channel = this-\u003eservoIndex;\n  if( (channel \u003c MAX_SERVOS) )   // ensure channel is valid\n  {\n    if( value \u003c SERVO_MIN() )          // ensure pulse width is valid\n      value = SERVO_MIN();\n    else if( value \u003e SERVO_MAX() )\n      value = SERVO_MAX();\n\n    value = value - TRIM_DURATION;\n    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009\n\n    uint8_t oldSREG = SREG;\n    cli();\n    servos[channel].ticks = value;\n    SREG = oldSREG;\n  }\n}\n\nint Servo::read() // return the value as degrees\n{\n  return  map( this-\u003ereadMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);\n}\n\nint Servo::readMicroseconds()\n{\n  unsigned int pulsewidth;\n  if( this-\u003eservoIndex != INVALID_SERVO )\n    pulsewidth = ticksToUs(servos[this-\u003eservoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009\n  else\n    pulsewidth  = 0;\n\n  return pulsewidth;\n}\n\nbool Servo::attached()\n{\n  return servos[this-\u003eservoIndex].Pin.isActive ;\n}\n\n#endif // ARDUINO_ARCH_AVR\n\n"}},"jsonrpc":"2.0"}Content-Length: 167

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}},"jsonrpc":"2.0"}
<<<
Content-Length: 177

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Applications/Arduino.app/Contents/Java/libraries/Servo/src/avr/Servo.cpp"}}
>>>
Content-Length: 262

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":55,"character":10}},"id":163,"jsonrpc":"2.0"}
<<<
Content-Length: 230

{"id":163,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":103},"start":{"character":5,"line":103}},"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}]}
>>>
Content-Length: 9311

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin \u003e= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin \u003e= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin \u003e= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin \u003e= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) \u0026\u0026 defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB \u0026 ~(1 \u003c\u003c MUX5)) | (((pin \u003e\u003e 3) \u0026 0x01) \u003c\u003c MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference \u003c\u003c 4) | (pin \u0026 0x07);\n#else\n\tADMUX = (analog_reference \u003c\u003c 6) | (pin \u0026 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) \u0026\u0026 defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high \u003c\u003c 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) \u0026\u0026 defined(COM00) \u0026\u0026 !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) \u0026\u0026 defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) \u0026\u0026 defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) \u0026\u0026 defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) \u0026\u0026 defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) \u0026\u0026 defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) \u0026\u0026 defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) \u0026\u0026 defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) \u0026\u0026 defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val \u003c 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}},"jsonrpc":"2.0"}
<<<
Content-Length: 200

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}
>>>
Content-Length: 261

{"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":51,"character":7}},"id":164,"jsonrpc":"2.0"}
<<<
Content-Length: 251

{"id":164,"jsonrpc":"2.0","result":[{"range":{"end":{"character":16,"line":13},"start":{"character":6,"line":13}},"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"}]}
>>>
Content-Length: 256

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server140038214/sketch/DistanceSensor.ino.cpp"},"position":{"line":83,"character":6}},"id":165,"jsonrpc":"2.0"}
<<<
Content-Length: 260

{"id":165,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `echoTime`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In getDistance\nfloat echoTime\n```"},"range":{"end":{"character":10,"line":83},"start":{"character":2,"line":83}}}}
>>>
Content-Length: 60

{"method":"shutdown","params":null,"id":166,"jsonrpc":"2.0"}
<<<
Content-Length: 40

{"id":166,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 47

{"method":"exit","params":null,"jsonrpc":"2.0"}<<< Read Error: EOF
