






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":86681,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1928

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":1,"text":"/*\n  SparkFun Inventorâ€™s Kit\n  Circuit 2B-ButtonTrumpet\n\n  Use 3 buttons plugged to play musical notes on a buzzer.\n\n  This sketch was written by SparkFun Electronics, with lots of help from the Arduino community.\n  This code is completely free for any use.\n\n  View circuit diagram and instructions at: https://learn.sparkfun.com/tutorials/sparkfun-inventors-kit-experiment-guide---v41\n  Download drawings and code at: https://github.com/sparkfun/SIK-Guide-Code\n*/\n\n//set the pins for the button and buzzer\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\n\nint buzzerPin = 10;\n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n\n  //set the buzzer pin as an output\n  pinMode(buzzerPin, OUTPUT);\n  Serial.begin(9600)\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {      //if the first key is pressed\n    Serial.println(\"This\")\n    tone(buzzerPin, 262);                     //play the frequency for c\n  }\n  else if (digitalRead(secondKeyPin) == LOW) { //if the second key is pressed\n    Serial.println(\"This\")\n    tone(buzzerPin, 330);                     //play the frequency for e\n  }\n  else if (digitalRead(thirdKeyPin) == LOW) { //if the third key is pressed\n    Serial.println(\"This\")\n    tone(buzzerPin, 392);                     //play the frequency for g\n  }\n  else {\n    noTone(buzzerPin);                        //if no key is pressed turn the buzzer off\n  }\n}\n\n/*\n  note  frequency\n  c     262 Hz\n  d     294 Hz\n  e     330 Hz\n  f     349 Hz\n  g     392 Hz\n  a     440 Hz\n  b     494 Hz\n  C     523 Hz\n*/\n"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 972

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":0},"end":{"line":30,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":40,"character":4},"end":{"line":40,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":44,"character":4},"end":{"line":44,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 58

{"jsonrpc":"2.0","id":1,"method":"shutdown","params":null}
>>>
Content-Length: 38

{"id":1,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":45152,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1929

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":4,"text":"/*\n  SparkFun Inventorâ€™s Kit\n  Circuit 2B-ButtonTrumpet\n\n  Use 3 buttons plugged to play musical notes on a buzzer.\n\n  This sketch was written by SparkFun Electronics, with lots of help from the Arduino community.\n  This code is completely free for any use.\n\n  View circuit diagram and instructions at: https://learn.sparkfun.com/tutorials/sparkfun-inventors-kit-experiment-guide---v41\n  Download drawings and code at: https://github.com/sparkfun/SIK-Guide-Code\n*/\n\n//set the pins for the button and buzzer\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4\nth\nint buzzerPin = 10;\n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n\n  //set the buzzer pin as an output\n  pinMode(buzzerPin, OUTPUT);\n  Serial.begin(9600)\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {      //if the first key is pressed\n    Serial.println(\"This\")\n    tone(buzzerPin, 262);                     //play the frequency for c\n  }\n  else if (digitalRead(secondKeyPin) == LOW) { //if the second key is pressed\n    Serial.println(\"This\")\n    tone(buzzerPin, 330);                     //play the frequency for e\n  }\n  else if (digitalRead(thirdKeyPin) == LOW) { //if the third key is pressed\n    Serial.println(\"This\")\n    tone(buzzerPin, 392);                     //play the frequency for g\n  }\n  else {\n    noTone(buzzerPin);                        //if no key is pressed turn the buzzer off\n  }\n}\n\n/*\n  note  frequency\n  c     262 Hz\n  d     294 Hz\n  e     330 Hz\n  f     349 Hz\n  g     392 Hz\n  a     440 Hz\n  b     494 Hz\n  C     523 Hz\n*/\n"}}}Content-Length: 279

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":16,"character":19},"end":{"line":16,"character":19}},"context":{"diagnostics":[]}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":4}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":5},"contentChanges":[{"range":{"start":{"line":16,"character":19},"end":{"line":16,"character":19}},"rangeLength":0,"text":";"}]}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":1}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 2149

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":2}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"},{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":0},"end":{"line":30,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":36,"character":9},"end":{"line":36,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":4},"end":{"line":40,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":40,"character":9},"end":{"line":40,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":44,"character":4},"end":{"line":44,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":44,"character":9},"end":{"line":44,"character":18}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":47,"character":11},"end":{"line":47,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}Content-Length: 279

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":16,"character":20},"end":{"line":16,"character":20}},"context":{"diagnostics":[]}}}Content-Length: 216

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":17,"character":2}}}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}Content-Length: 1141

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":2}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'th'"},{"range":{"start":{"line":30,"character":0},"end":{"line":30,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":40,"character":4},"end":{"line":40,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":44,"character":4},"end":{"line":44,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 123

{"id":3,"result":[{"range":{"start":{"line":18,"character":4},"end":{"line":18,"character":13}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":5}}}
>>>
Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 445

{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":17,"character":2},"end":{"line":17,"character":2}},"context":{"diagnostics":[{"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":2}},"message":"Unknown type name 'th'","severity":1,"code":"unknown_typename","source":"clang"}]}}}
>>>
Content-Length: 36

{"id":4,"result":[],"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":6},"contentChanges":[{"range":{"start":{"line":17,"character":1},"end":{"line":17,"character":2}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1140

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 't'"},{"range":{"start":{"line":30,"character":0},"end":{"line":30,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":40,"character":4},"end":{"line":40,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":44,"character":4},"end":{"line":44,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 444

{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":17,"character":1},"end":{"line":17,"character":1}},"context":{"diagnostics":[{"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":1}},"message":"Unknown type name 't'","severity":1,"code":"unknown_typename","source":"clang"}]}}}
>>>
Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":6}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":7},"contentChanges":[{"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":1}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 972

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":0},"end":{"line":30,"character":1}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":40,"character":4},"end":{"line":40,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":44,"character":4},"end":{"line":44,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":7}}}Content-Length: 217

{"jsonrpc":"2.0","id":6,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":40}}}
>>>
Content-Length: 36

{"id":6,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":1,"character":0},"end":{"line":13,"character":40}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":7,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":13,"character":40}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":8},"contentChanges":[{"range":{"start":{"line":0,"character":0},"end":{"line":13,"character":40}},"rangeLength":506,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":8}}}Content-Length: 205

{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":21,"character":46}}}
>>>
Content-Length: 38

{"id":9,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":21,"character":46},"end":{"line":22,"character":26}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":10,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":11,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":21,"character":75}}}
>>>
Content-Length: 37

{"id":11,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":21,"character":75},"end":{"line":21,"character":75}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":12,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":0},"end":{"line":21,"character":75}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":13,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":21,"character":46}}}
>>>
Content-Length: 39

{"id":14,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":21,"character":46},"end":{"line":21,"character":48}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":15,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":9},"contentChanges":[{"range":{"start":{"line":21,"character":46},"end":{"line":21,"character":48}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 749

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":21,"character":49},"end":{"line":21,"character":52}},"severity":1,"code":"expected_lparen_after","source":"clang","message":"Expected '(' after 'if'"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":21,"character":47}}}
>>>
Content-Length: 39

{"id":16,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":21,"character":46},"end":{"line":21,"character":46}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":17,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":18,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":21,"character":48}}}
>>>
Content-Length: 37

{"id":18,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":9}}}Content-Length: 454

{"jsonrpc":"2.0","id":19,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":21,"character":0},"end":{"line":22,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":21,"character":49},"end":{"line":21,"character":52}},"message":"Expected '(' after 'if'","severity":1,"code":"expected_lparen_after","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":19,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":21,"character":47}}}
>>>
Content-Length: 39

{"id":20,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":21,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":21,"character":47},"end":{"line":21,"character":47}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":21,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":22,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":21,"character":46}}}
>>>
Content-Length: 39

{"id":22,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":23,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":21,"character":46}}}
>>>
Content-Length: 37

{"id":23,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 456

{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":21,"character":47},"end":{"line":21,"character":73}},"context":{"diagnostics":[{"range":{"start":{"line":21,"character":49},"end":{"line":21,"character":52}},"message":"Expected '(' after 'if'","severity":1,"code":"expected_lparen_after","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":24,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":10},"contentChanges":[{"range":{"start":{"line":21,"character":47},"end":{"line":21,"character":73}},"rangeLength":26,"text":""}]}}
>>>
Content-Length: 950

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":21,"character":46},"end":{"line":21,"character":47}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'i'"},{"range":{"start":{"line":22,"character":10},"end":{"line":22,"character":11}},"severity":1,"code":"expected_semi_declaration","source":"clang","message":"Expected ';' at end of declaration (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":11},"contentChanges":[{"range":{"start":{"line":21,"character":46},"end":{"line":21,"character":47}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":11}}}Content-Length: 280

{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":23,"character":46},"end":{"line":23,"character":72}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":25,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":12},"contentChanges":[{"range":{"start":{"line":23,"character":46},"end":{"line":23,"character":72}},"rangeLength":26,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":12}}}Content-Length: 206

{"jsonrpc":"2.0","id":26,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":49}}}
>>>
Content-Length: 39

{"id":26,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":27,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":48}}}
>>>
Content-Length: 39

{"id":27,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":28,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":47}}}
>>>
Content-Length: 39

{"id":28,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":29,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":25,"character":47},"end":{"line":25,"character":77}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":29,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":13},"contentChanges":[{"range":{"start":{"line":25,"character":47},"end":{"line":25,"character":77}},"rangeLength":30,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":13}}}Content-Length: 280

{"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":16,"character":20},"end":{"line":16,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":30,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":14},"contentChanges":[{"range":{"start":{"line":16,"character":20},"end":{"line":16,"character":20}},"rangeLength":0,"text":";"}]}}Content-Length: 280

{"jsonrpc":"2.0","id":31,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":16,"character":21},"end":{"line":16,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 112

{"id":31,"error":{"code":-32602,"message":"onCodeAction called for non-added file","data":null},"jsonrpc":"2.0"}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":45152,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1324

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":14,"text":"\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\n\nint buzzerPin = 10;\n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n\n  //set the buzzer pin as an output\n  pinMode(buzzerPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {      \n    Serial.println(\"This\")\n    tone(buzzerPin, 262);                     \n  }\n  else if (digitalRead(secondKeyPin) == LOW) { \n    Serial.println(\"This\")\n    tone(buzzerPin, 330);                     //play the frequency for e\n  }\n  else if (digitalRead(thirdKeyPin) == LOW) { //if the third key is pressed\n    Serial.println(\"This\")\n    tone(buzzerPin, 392);                     //play the frequency for g\n  }\n  else {\n    noTone(buzzerPin);                        //if no key is pressed turn the buzzer off\n  }\n}\n\n/*\n  note  frequency\n  c     262 Hz\n  d     294 Hz\n  e     330 Hz\n  f     349 Hz\n  g     392 Hz\n  a     440 Hz\n  b     494 Hz\n  C     523 Hz\n*/\n"}}}Content-Length: 279

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":16,"character":21},"end":{"line":16,"character":21}},"context":{"diagnostics":[]}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":14}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":14}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}Content-Length: 210

{"jsonrpc":"2.0","id":2,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":41}}}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 220

{"id":2,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":40,"character":8},"end":{"line":40,"character":11}}}],"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":16,"character":21},"end":{"line":16,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":3,"result":[],"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":46},"end":{"line":27,"character":72}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":4,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":15},"contentChanges":[{"range":{"start":{"line":27,"character":46},"end":{"line":27,"character":72}},"rangeLength":26,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":15}}}Content-Length: 205

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":43}}}
>>>
Content-Length: 38

{"id":5,"result":null,"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":46}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 38

{"id":6,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":6}}Content-Length: 478

{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":46},"end":{"line":31,"character":72}},"context":{"diagnostics":[{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"message":"Expected ';' after expression (fix available)","severity":1,"code":"expected_semi_after_expr","source":"clang"}]}}}
>>>
Content-Length: 188

{"id":7,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":16},"contentChanges":[{"range":{"start":{"line":29,"character":46},"end":{"line":31,"character":72}},"rangeLength":129,"text":""}]}}
>>>
Content-Length: 572

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":16}}}Content-Length: 435

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":17},"contentChanges":[{"range":{"start":{"line":29,"character":46},"end":{"line":29,"character":46}},"rangeLength":0,"text":"//if the third key is pressed\n    Serial.println(\"This\")\n    tone(buzzerPin, 392);                     //play the frequency for g"}]}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":8,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":57}}}
>>>
Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 478

{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":46},"end":{"line":31,"character":72}},"context":{"diagnostics":[{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"message":"Expected ';' after expression (fix available)","severity":1,"code":"expected_semi_after_expr","source":"clang"}]}}}
>>>
Content-Length: 188

{"id":9,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":17}}}Content-Length: 206

{"jsonrpc":"2.0","id":10,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":52}}}
>>>
Content-Length: 39

{"id":10,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":3},"end":{"line":28,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":11,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":45}}}
>>>
Content-Length: 39

{"id":12,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":13,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":48}}}
>>>
Content-Length: 37

{"id":13,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":48},"end":{"line":30,"character":26}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":14,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":75}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":15,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":18},"contentChanges":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":75}},"rangeLength":27,"text":"="}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":19},"contentChanges":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":49}},"rangeLength":0,"text":"="}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":50},"end":{"line":29,"character":50}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":16,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":19}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":20},"contentChanges":[{"range":{"start":{"line":29,"character":50},"end":{"line":29,"character":50}},"rangeLength":0,"text":"="}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":51},"end":{"line":29,"character":51}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":17,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":21},"contentChanges":[{"range":{"start":{"line":29,"character":51},"end":{"line":29,"character":51}},"rangeLength":0,"text":"="}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":52},"end":{"line":29,"character":52}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":18,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":21}}}Content-Length: 206

{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":46}}}
>>>
Content-Length: 39

{"id":19,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":22},"contentChanges":[{"range":{"start":{"line":29,"character":51},"end":{"line":29,"character":52}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":47}}}
>>>
Content-Length: 39

{"id":20,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":23},"contentChanges":[{"range":{"start":{"line":29,"character":50},"end":{"line":29,"character":51}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":24},"contentChanges":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":50}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":21,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":46}}}
>>>
Content-Length: 39

{"id":21,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":25},"contentChanges":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":49}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":26},"contentChanges":[{"range":{"start":{"line":29,"character":47},"end":{"line":29,"character":48}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 743

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":29,"character":46},"end":{"line":29,"character":47}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":22,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":46}}}
>>>
Content-Length: 39

{"id":22,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":27},"contentChanges":[{"range":{"start":{"line":29,"character":46},"end":{"line":29,"character":47}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":23,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":46}}}
>>>
Content-Length: 39

{"id":23,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":27}}}Content-Length: 280

{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":47},"end":{"line":31,"character":72}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":24,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":28},"contentChanges":[{"range":{"start":{"line":31,"character":47},"end":{"line":31,"character":72}},"rangeLength":25,"text":""}]}}
>>>
Content-Length: 1112

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":46},"end":{"line":31,"character":47}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":3}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":29},"contentChanges":[{"range":{"start":{"line":31,"character":46},"end":{"line":31,"character":47}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":29}}}Content-Length: 206

{"jsonrpc":"2.0","id":25,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":44}}}
>>>
Content-Length: 39

{"id":25,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":26,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":45}}}
>>>
Content-Length: 39

{"id":26,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":46},"end":{"line":34,"character":88}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":27,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":30},"contentChanges":[{"range":{"start":{"line":34,"character":46},"end":{"line":34,"character":88}},"rangeLength":42,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":31},"contentChanges":[{"range":{"start":{"line":34,"character":45},"end":{"line":34,"character":46}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32},"contentChanges":[{"range":{"start":{"line":34,"character":44},"end":{"line":34,"character":45}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 772

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 217

{"jsonrpc":"2.0","id":28,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"options":{"tabSize":2,"insertSpaces":true}}}
>>>
Content-Length: 1383

{"id":28,"result":[{"range":{"start":{"line":21,"character":40},"end":{"line":22,"character":4}},"newText":"\n    "},{"range":{"start":{"line":22,"character":26},"end":{"line":23,"character":4}},"newText":"\n      "},{"range":{"start":{"line":23,"character":25},"end":{"line":24,"character":2}},"newText":"\n  "},{"range":{"start":{"line":24,"character":3},"end":{"line":25,"character":2}},"newText":" "},{"range":{"start":{"line":25,"character":46},"end":{"line":26,"character":4}},"newText":"\n    "},{"range":{"start":{"line":26,"character":26},"end":{"line":27,"character":4}},"newText":"\n      "},{"range":{"start":{"line":27,"character":25},"end":{"line":28,"character":2}},"newText":"\n  "},{"range":{"start":{"line":28,"character":3},"end":{"line":29,"character":2}},"newText":" "},{"range":{"start":{"line":29,"character":45},"end":{"line":30,"character":4}},"newText":"\n    "},{"range":{"start":{"line":30,"character":26},"end":{"line":31,"character":4}},"newText":"\n      "},{"range":{"start":{"line":31,"character":25},"end":{"line":32,"character":2}},"newText":"\n  "},{"range":{"start":{"line":32,"character":3},"end":{"line":33,"character":2}},"newText":" "},{"range":{"start":{"line":34,"character":22},"end":{"line":35,"character":2}},"newText":"\n  "},{"range":{"start":{"line":48,"character":2},"end":{"line":50,"character":0}},"newText":"\n"}],"jsonrpc":"2.0"}
<<<
Content-Length: 1572

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":33},"contentChanges":[{"range":{"start":{"line":34,"character":22},"end":{"line":34,"character":44}},"rangeLength":22,"text":""},{"range":{"start":{"line":32,"character":3},"end":{"line":33,"character":1}},"rangeLength":2,"text":""},{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":46}},"rangeLength":21,"text":""},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":4}},"rangeLength":0,"text":"  "},{"range":{"start":{"line":29,"character":45},"end":{"line":29,"character":46}},"rangeLength":1,"text":""},{"range":{"start":{"line":28,"character":3},"end":{"line":29,"character":1}},"rangeLength":2,"text":""},{"range":{"start":{"line":27,"character":25},"end":{"line":27,"character":46}},"rangeLength":21,"text":""},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":4}},"rangeLength":0,"text":"  "},{"range":{"start":{"line":25,"character":46},"end":{"line":25,"character":47}},"rangeLength":1,"text":""},{"range":{"start":{"line":24,"character":3},"end":{"line":25,"character":1}},"rangeLength":2,"text":""},{"range":{"start":{"line":23,"character":25},"end":{"line":23,"character":46}},"rangeLength":21,"text":""},{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":4}},"rangeLength":0,"text":"  "},{"range":{"start":{"line":21,"character":40},"end":{"line":21,"character":46}},"rangeLength":6,"text":""}]}}
>>>
Content-Length: 775

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":23,"character":6},"end":{"line":23,"character":10}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":26,"character":6},"end":{"line":26,"character":10}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":29,"character":6},"end":{"line":29,"character":10}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":29,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":22},"end":{"line":31,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":29,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":33}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":33}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":33}}}Content-Length: 211

{"jsonrpc":"2.0","id":30,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":23,"character":18}}}
>>>
Content-Length: 198

{"id":30,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":5,"character":4},"end":{"line":5,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":31,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":9}}}
>>>
Content-Length: 267

{"id":31,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":32,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":24,"character":8}}}
>>>
Content-Length: 39

{"id":32,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 478

{"jsonrpc":"2.0","id":33,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":23,"character":9},"end":{"line":23,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":23,"character":6},"end":{"line":23,"character":10}},"message":"Expected ';' after expression (fix available)","severity":1,"code":"expected_semi_after_expr","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":33,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":34,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":23,"character":6}}}
>>>
Content-Length: 445

{"id":34,"result":{"contents":{"kind":"markdown","value":"### function `tone`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t _pin`\n- `unsigned int frequency`\n- `unsigned long duration = 0`\n\nfrequency (in hertz) and duration (in milliseconds).  \n\n---\n```cpp\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0)\n```"},"range":{"start":{"line":30,"character":6},"end":{"line":30,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":35,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":23,"character":8}}}
>>>
Content-Length: 445

{"id":35,"result":{"contents":{"kind":"markdown","value":"### function `tone`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t _pin`\n- `unsigned int frequency`\n- `unsigned long duration = 0`\n\nfrequency (in hertz) and duration (in milliseconds).  \n\n---\n```cpp\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0)\n```"},"range":{"start":{"line":30,"character":6},"end":{"line":30,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 499

{"jsonrpc":"2.0","id":36,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":23,"character":6},"end":{"line":23,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":23,"character":6},"end":{"line":23,"character":10}},"message":"Expected ';' after expression (fix available)","severity":1,"code":"expected_semi_after_expr","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 189

{"id":36,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":37,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":22,"character":26},"end":{"line":22,"character":26}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":37,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":25}}}
>>>
Content-Length: 314

{"id":38,"result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\nâ†’ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t println(const char[])\n```"},"range":{"start":{"line":32,"character":25},"end":{"line":32,"character":26}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":39,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":26}}}
>>>
Content-Length: 314

{"id":39,"result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\nâ†’ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t println(const char[])\n```"},"range":{"start":{"line":32,"character":25},"end":{"line":32,"character":26}}},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":34},"contentChanges":[{"range":{"start":{"line":22,"character":26},"end":{"line":22,"character":26}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 574

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":26,"character":6},"end":{"line":26,"character":10}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":29,"character":6},"end":{"line":29,"character":10}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":35},"contentChanges":[{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":26}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 373

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":6},"end":{"line":29,"character":10}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":40,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":25,"character":27},"end":{"line":25,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":40,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":35}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":36},"contentChanges":[{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":26}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":41,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":27},"end":{"line":28,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":41,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":36}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":36}}}Content-Length: 211

{"jsonrpc":"2.0","id":42,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":24,"character":29}}}
>>>
Content-Length: 198

{"id":42,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":2,"character":4},"end":{"line":2,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":36}}}Content-Length: 211

{"jsonrpc":"2.0","id":43,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":23,"character":25}}}
>>>
Content-Length: 221

{"id":43,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":242,"character":5},"end":{"line":242,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":44,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":23,"character":22}}}
>>>
Content-Length: 39

{"id":44,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":45,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":16}}}
>>>
Content-Length: 198

{"id":45,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":5,"character":4},"end":{"line":5,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":36}}}Content-Length: 280

{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":27},"end":{"line":29,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":46,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":36}}}Content-Length: 278

{"jsonrpc":"2.0","id":47,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":3},"end":{"line":32,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":47,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":48,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":11}}}
>>>
Content-Length: 303

{"id":48,"result":{"contents":{"kind":"markdown","value":"### variable `buzzerPin`  \n\n---\nType: `int`  \nValue = `10`  \nPassed as \\_pin (converted to uint8_t)  \n\n---\n```cpp\nint buzzerPin = 10\n```"},"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":49,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":11}}}
>>>
Content-Length: 314

{"id":49,"result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\nâ†’ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t println(const char[])\n```"},"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":50,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":12}}}
>>>
Content-Length: 39

{"id":50,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":51,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":13}}}
>>>
Content-Length: 286

{"id":51,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":34,"character":13},"end":{"line":34,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":52,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":47},"end":{"line":27,"character":47}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":52,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":53,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":53,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":54,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":47},"end":{"line":27,"character":47}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":54,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":55,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":6}}}
>>>
Content-Length: 39

{"id":55,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":56,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":5}}}
>>>
Content-Length: 39

{"id":56,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":57,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":6}}}
>>>
Content-Length: 39

{"id":57,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":58,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":5}}}
>>>
Content-Length: 39

{"id":58,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":59,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":4}}}
>>>
Content-Length: 39

{"id":59,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":60,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":4}}}
>>>
Content-Length: 37

{"id":60,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":61,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":4},"end":{"line":29,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":61,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":62,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":4},"end":{"line":30,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":62,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":63,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":6}}}
>>>
Content-Length: 37

{"id":63,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":64,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":4}}}
>>>
Content-Length: 37

{"id":64,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":65,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":4}}}
>>>
Content-Length: 39

{"id":65,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":66,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":4}}}
>>>
Content-Length: 37

{"id":66,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":67,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":4},"end":{"line":30,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":67,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":68,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":4}}}
>>>
Content-Length: 37

{"id":68,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":69,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":2}}}
>>>
Content-Length: 39

{"id":69,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":70,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":70,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":71,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":17}}}
>>>
Content-Length: 286

{"id":71,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":34,"character":13},"end":{"line":34,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":37},"contentChanges":[{"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":3}},"rangeLength":0,"text":"\n  "}]}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":3},"end":{"line":31,"character":7}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":72,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":17}}}
>>>
Content-Length: 303

{"id":72,"result":{"contents":{"kind":"markdown","value":"### variable `buzzerPin`  \n\n---\nType: `int`  \nValue = `10`  \nPassed as \\_pin (converted to uint8_t)  \n\n---\n```cpp\nint buzzerPin = 10\n```"},"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":37}}}Content-Length: 206

{"jsonrpc":"2.0","id":73,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":17}}}
>>>
Content-Length: 303

{"id":73,"result":{"contents":{"kind":"markdown","value":"### variable `buzzerPin`  \n\n---\nType: `int`  \nValue = `10`  \nPassed as \\_pin (converted to uint8_t)  \n\n---\n```cpp\nint buzzerPin = 10\n```"},"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":74,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":74,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":75,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":17}}}
>>>
Content-Length: 303

{"id":75,"result":{"contents":{"kind":"markdown","value":"### variable `buzzerPin`  \n\n---\nType: `int`  \nValue = `10`  \nPassed as \\_pin (converted to uint8_t)  \n\n---\n```cpp\nint buzzerPin = 10\n```"},"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":76,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":76,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":77,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":18}}}
>>>
Content-Length: 198

{"id":77,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":5,"character":4},"end":{"line":5,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":78,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":17}}}
>>>
Content-Length: 303

{"id":78,"result":{"contents":{"kind":"markdown","value":"### variable `buzzerPin`  \n\n---\nType: `int`  \nValue = `10`  \nPassed as \\_pin (converted to uint8_t)  \n\n---\n```cpp\nint buzzerPin = 10\n```"},"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":38},"contentChanges":[{"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":3}},"rangeLength":0,"text":" "}]}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":3},"end":{"line":31,"character":7}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 409

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":39},"contentChanges":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":4}},"rangeLength":0,"text":"else if (digitalRead(thirdKeyPin) == LOW) {\n    Serial.println(\"This\");\n      tone(buzzerPin, 392);\n  } "}]}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":3},"end":{"line":34,"character":7}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":39}}}Content-Length: 211

{"jsonrpc":"2.0","id":79,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":14}}}
>>>
Content-Length: 198

{"id":79,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":5,"character":4},"end":{"line":5,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":39}}}Content-Length: 210

{"jsonrpc":"2.0","id":80,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":6}}}
>>>
Content-Length: 37

{"id":80,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":81,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":1}}}
>>>
Content-Length: 39

{"id":81,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":82,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":3}}}
>>>
Content-Length: 37

{"id":82,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 502

{"jsonrpc":"2.0","id":83,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":3},"end":{"line":34,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":34,"character":3},"end":{"line":34,"character":7}},"message":"Different indentation for 'if' and corresponding 'else'","severity":2,"code":"readability-misleading-indentation","source":"clang-tidy"}]}}}
>>>
Content-Length: 37

{"id":83,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":40},"contentChanges":[{"range":{"start":{"line":34,"character":2},"end":{"line":34,"character":3}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":84,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":2},"end":{"line":34,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":84,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":40}}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":41},"contentChanges":[{"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":2}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":4}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 502

{"jsonrpc":"2.0","id":85,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":4}},"message":"Different indentation for 'if' and corresponding 'else'","severity":2,"code":"readability-misleading-indentation","source":"clang-tidy"}]}}}
>>>
Content-Length: 37

{"id":85,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":41}}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":42},"contentChanges":[{"range":{"start":{"line":33,"character":4},"end":{"line":34,"character":0}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":86,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":33,"character":4},"end":{"line":33,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":86,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":42}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":42}}}Content-Length: 205

{"jsonrpc":"2.0","id":87,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":7}}}
>>>
Content-Length: 39

{"id":87,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":88,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":15}}}
>>>
Content-Length: 286

{"id":88,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":37,"character":13},"end":{"line":37,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":89,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":33}}}
>>>
Content-Length: 302

{"id":89,"result":{"contents":{"kind":"markdown","value":"### variable `thirdKeyPin`  \n\n---\nType: `int`  \nValue = `4`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint thirdKeyPin = 4\n```"},"range":{"start":{"line":37,"character":25},"end":{"line":37,"character":36}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":90,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":34}}}
>>>
Content-Length: 389

{"id":90,"result":[{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}},"kind":1},{"range":{"start":{"line":12,"character":10},"end":{"line":12,"character":21}},"kind":2},{"range":{"start":{"line":27,"character":25},"end":{"line":27,"character":36}},"kind":2},{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":36}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":91,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":36}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":91,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":43},"contentChanges":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":36}},"rangeLength":11,"text":"f"}]}}
>>>
Content-Length: 355

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":26}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'f'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":44},"contentChanges":[{"range":{"start":{"line":30,"character":26},"end":{"line":30,"character":26}},"rangeLength":0,"text":"o"}]}}
>>>
Content-Length: 356

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fo'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":45},"contentChanges":[{"range":{"start":{"line":30,"character":27},"end":{"line":30,"character":27}},"rangeLength":0,"text":"u"}]}}
>>>
Content-Length: 357

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":28}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fou'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 464

{"jsonrpc":"2.0","id":92,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":28},"end":{"line":30,"character":28}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":28}},"message":"Use of undeclared identifier 'fou'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":92,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":46},"contentChanges":[{"range":{"start":{"line":30,"character":28},"end":{"line":30,"character":28}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 358

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":29}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'four'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":47},"contentChanges":[{"range":{"start":{"line":30,"character":29},"end":{"line":30,"character":29}},"rangeLength":0,"text":"t"}]}}
>>>
Content-Length: 359

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":30}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourt'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":48},"contentChanges":[{"range":{"start":{"line":30,"character":30},"end":{"line":30,"character":30}},"rangeLength":0,"text":"h"}]}}
>>>
Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":31}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourth'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 467

{"jsonrpc":"2.0","id":93,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":31},"end":{"line":30,"character":31}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":31}},"message":"Use of undeclared identifier 'fourth'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":93,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":48}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":49},"contentChanges":[{"range":{"start":{"line":30,"character":31},"end":{"line":30,"character":31}},"rangeLength":0,"text":"T"}]}}
>>>
Content-Length: 361

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":32}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourthT'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 468

{"jsonrpc":"2.0","id":94,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":32},"end":{"line":30,"character":32}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":32}},"message":"Use of undeclared identifier 'fourthT'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":94,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":49}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":50},"contentChanges":[{"range":{"start":{"line":30,"character":31},"end":{"line":30,"character":32}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":31}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourth'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 467

{"jsonrpc":"2.0","id":95,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":31},"end":{"line":30,"character":31}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":31}},"message":"Use of undeclared identifier 'fourth'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":95,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51},"contentChanges":[{"range":{"start":{"line":30,"character":31},"end":{"line":30,"character":31}},"rangeLength":0,"text":"K"}]}}
>>>
Content-Length: 361

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":32}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourthK'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":52},"contentChanges":[{"range":{"start":{"line":30,"character":32},"end":{"line":30,"character":32}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":33}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourthKe'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":53},"contentChanges":[{"range":{"start":{"line":30,"character":33},"end":{"line":30,"character":33}},"rangeLength":0,"text":"y"}]}}
>>>
Content-Length: 363

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":34}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourthKey'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 470

{"jsonrpc":"2.0","id":96,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":34},"end":{"line":30,"character":34}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":34}},"message":"Use of undeclared identifier 'fourthKey'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":96,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":54},"contentChanges":[{"range":{"start":{"line":30,"character":34},"end":{"line":30,"character":34}},"rangeLength":0,"text":"P"}]}}
>>>
Content-Length: 364

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":35}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourthKeyP'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":55},"contentChanges":[{"range":{"start":{"line":30,"character":35},"end":{"line":30,"character":35}},"rangeLength":0,"text":"i"}]}}
>>>
Content-Length: 365

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":36}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourthKeyPi'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":56},"contentChanges":[{"range":{"start":{"line":30,"character":36},"end":{"line":30,"character":36}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 727

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":37}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'fourthKeyPin'; did you mean 'firstKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:4:5: note: 'firstKeyPin' declared here"},{"range":{"start":{"line":1,"character":4},"end":{"line":1,"character":15}},"severity":3,"message":"'firstKeyPin' declared here\n\nDigitalTrumpet.ino.cpp:38:26: error: use of undeclared identifier 'fourthKeyPin'; did you mean 'firstKeyPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 591

{"jsonrpc":"2.0","id":97,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":37},"end":{"line":30,"character":37}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":37}},"message":"Use of undeclared identifier 'fourthKeyPin'; did you mean 'firstKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:4:5: note: 'firstKeyPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":97,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":56}}}Content-Length: 280

{"jsonrpc":"2.0","id":98,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":27},"end":{"line":31,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":98,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":99,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":23,"character":15}}}
>>>
Content-Length: 198

{"id":99,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":5,"character":4},"end":{"line":5,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":100,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":22,"character":14}}}
>>>
Content-Length: 225

{"id":100,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","range":{"start":{"line":137,"character":14},"end":{"line":137,"character":21}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5951

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","languageId":"cpp","version":1,"text":"/*\n Print.cpp - Base class that provides print() and println()\n Copyright (c) 2008 David A. Mellis.  All right reserved.\n \n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n \n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n \n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n \n Modified 23 November 2006 by David A. Mellis\n Modified 03 August 2015 by Chuck Todd\n */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include \"Arduino.h\"\n\n#include \"Print.h\"\n\n// Public Methods //////////////////////////////////////////////////////////////\n\n/* default implementation: may be overridden */\nsize_t Print::write(const uint8_t *buffer, size_t size)\n{\n  size_t n = 0;\n  while (size--) {\n    if (write(*buffer++)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const __FlashStringHelper *ifsh)\n{\n  PGM_P p = reinterpret_cast<PGM_P>(ifsh);\n  size_t n = 0;\n  while (1) {\n    unsigned char c = pgm_read_byte(p++);\n    if (c == 0) break;\n    if (write(c)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const String &s)\n{\n  return write(s.c_str(), s.length());\n}\n\nsize_t Print::print(const char str[])\n{\n  return write(str);\n}\n\nsize_t Print::print(char c)\n{\n  return write(c);\n}\n\nsize_t Print::print(unsigned char b, int base)\n{\n  return print((unsigned long) b, base);\n}\n\nsize_t Print::print(int n, int base)\n{\n  return print((long) n, base);\n}\n\nsize_t Print::print(unsigned int n, int base)\n{\n  return print((unsigned long) n, base);\n}\n\nsize_t Print::print(long n, int base)\n{\n  if (base == 0) {\n    return write(n);\n  } else if (base == 10) {\n    if (n < 0) {\n      int t = print('-');\n      n = -n;\n      return printNumber(n, 10) + t;\n    }\n    return printNumber(n, 10);\n  } else {\n    return printNumber(n, base);\n  }\n}\n\nsize_t Print::print(unsigned long n, int base)\n{\n  if (base == 0) return write(n);\n  else return printNumber(n, base);\n}\n\nsize_t Print::print(double n, int digits)\n{\n  return printFloat(n, digits);\n}\n\nsize_t Print::println(const __FlashStringHelper *ifsh)\n{\n  size_t n = print(ifsh);\n  n += println();\n  return n;\n}\n\nsize_t Print::print(const Printable& x)\n{\n  return x.printTo(*this);\n}\n\nsize_t Print::println(void)\n{\n  return write(\"\\r\\n\");\n}\n\nsize_t Print::println(const String &s)\n{\n  size_t n = print(s);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const char c[])\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(char c)\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned char b, int base)\n{\n  size_t n = print(b, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(double num, int digits)\n{\n  size_t n = print(num, digits);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const Printable& x)\n{\n  size_t n = print(x);\n  n += println();\n  return n;\n}\n\n// Private Methods /////////////////////////////////////////////////////////////\n\nsize_t Print::printNumber(unsigned long n, uint8_t base)\n{\n  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.\n  char *str = &buf[sizeof(buf) - 1];\n\n  *str = '\\0';\n\n  // prevent crash if called with base == 1\n  if (base < 2) base = 10;\n\n  do {\n    char c = n % base;\n    n /= base;\n\n    *--str = c < 10 ? c + '0' : c + 'A' - 10;\n  } while(n);\n\n  return write(str);\n}\n\nsize_t Print::printFloat(double number, uint8_t digits) \n{ \n  size_t n = 0;\n  \n  if (isnan(number)) return print(\"nan\");\n  if (isinf(number)) return print(\"inf\");\n  if (number > 4294967040.0) return print (\"ovf\");  // constant determined empirically\n  if (number <-4294967040.0) return print (\"ovf\");  // constant determined empirically\n  \n  // Handle negative numbers\n  if (number < 0.0)\n  {\n     n += print('-');\n     number = -number;\n  }\n\n  // Round correctly so that print(1.999, 2) prints as \"2.00\"\n  double rounding = 0.5;\n  for (uint8_t i=0; i<digits; ++i)\n    rounding /= 10.0;\n  \n  number += rounding;\n\n  // Extract the integer part of the number and print it\n  unsigned long int_part = (unsigned long)number;\n  double remainder = number - (double)int_part;\n  n += print(int_part);\n\n  // Print the decimal point, but only if there are digits beyond\n  if (digits > 0) {\n    n += print('.'); \n  }\n\n  // Extract digits from the remainder one at a time\n  while (digits-- > 0)\n  {\n    remainder *= 10.0;\n    unsigned int toPrint = (unsigned int)(remainder);\n    n += print(toPrint);\n    remainder -= toPrint; \n  } \n  \n  return n;\n}\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":101,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":22,"character":14}}}
>>>
Content-Length: 315

{"id":101,"result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\nâ†’ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t println(const char[])\n```"},"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 832

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":62},"contentChanges":[{"range":{"start":{"line":30,"character":36},"end":{"line":30,"character":37}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":35},"end":{"line":30,"character":36}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":34},"end":{"line":30,"character":35}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":33},"end":{"line":30,"character":34}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":32},"end":{"line":30,"character":33}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":31},"end":{"line":30,"character":32}},"rangeLength":1,"text":""}]}}Content-Length: 212

{"jsonrpc":"2.0","id":102,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":22,"character":20}}}
>>>
Content-Length: 38

{"id":102,"result":[],"jsonrpc":"2.0"}Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":31}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourth'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":103,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":23,"character":24}}}
>>>
Content-Length: 38

{"id":103,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 468

{"jsonrpc":"2.0","id":104,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":31},"end":{"line":30,"character":31}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":31}},"message":"Use of undeclared identifier 'fourth'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":104,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":105,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":24,"character":27}}}
>>>
Content-Length: 199

{"id":105,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":2,"character":4},"end":{"line":2,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":62}}}Content-Length: 212

{"jsonrpc":"2.0","id":106,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":28}}}
>>>
Content-Length: 38

{"id":106,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":107,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":14}}}
>>>
Content-Length: 199

{"id":107,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":5,"character":4},"end":{"line":5,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":108,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":11}}}
>>>
Content-Length: 304

{"id":108,"result":{"contents":{"kind":"markdown","value":"### variable `buzzerPin`  \n\n---\nType: `int`  \nValue = `10`  \nPassed as \\_pin (converted to uint8_t)  \n\n---\n```cpp\nint buzzerPin = 10\n```"},"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":63},"contentChanges":[{"range":{"start":{"line":30,"character":31},"end":{"line":30,"character":31}},"rangeLength":0,"text":"T"}]}}
>>>
Content-Length: 361

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":32}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourthT'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":109,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":12}}}
>>>
Content-Length: 199

{"id":109,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":5,"character":4},"end":{"line":5,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 949

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":70},"contentChanges":[{"range":{"start":{"line":30,"character":31},"end":{"line":30,"character":32}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":30},"end":{"line":30,"character":31}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":29},"end":{"line":30,"character":30}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":28},"end":{"line":30,"character":29}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":27},"end":{"line":30,"character":28}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":26},"end":{"line":30,"character":27}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":26}},"rangeLength":1,"text":"thirdKeyPin"}]}}Content-Length: 212

{"jsonrpc":"2.0","id":110,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":12}}}
>>>
Content-Length: 199

{"id":110,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":5,"character":4},"end":{"line":5,"character":13}}}],"jsonrpc":"2.0"}Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":71},"contentChanges":[{"range":{"start":{"line":33,"character":4},"end":{"line":33,"character":4}},"rangeLength":0,"text":"\n"}]}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":4}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":111,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":17}}}
>>>
Content-Length: 199

{"id":111,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":5,"character":4},"end":{"line":5,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 407

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":73},"contentChanges":[{"range":{"start":{"line":34,"character":0},"end":{"line":34,"character":0}},"rangeLength":0,"text":"  "},{"range":{"start":{"line":34,"character":2},"end":{"line":34,"character":2}},"rangeLength":0,"text":" "}]}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":3},"end":{"line":34,"character":7}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 503

{"jsonrpc":"2.0","id":112,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":3},"end":{"line":34,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":34,"character":3},"end":{"line":34,"character":7}},"message":"Different indentation for 'if' and corresponding 'else'","severity":2,"code":"readability-misleading-indentation","source":"clang-tidy"}]}}}
>>>
Content-Length: 38

{"id":112,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":74},"contentChanges":[{"range":{"start":{"line":30,"character":4},"end":{"line":33,"character":4}},"rangeLength":104,"text":""}]}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":3},"end":{"line":31,"character":7}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":75},"contentChanges":[{"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":4}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":3},"end":{"line":31,"character":7}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":113,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":113,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":75}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":75}}}Content-Length: 212

{"jsonrpc":"2.0","id":114,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":22,"character":10}}}
>>>
Content-Length: 225

{"id":114,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","range":{"start":{"line":137,"character":14},"end":{"line":137,"character":21}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5951

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","languageId":"cpp","version":1,"text":"/*\n Print.cpp - Base class that provides print() and println()\n Copyright (c) 2008 David A. Mellis.  All right reserved.\n \n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n \n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n \n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n \n Modified 23 November 2006 by David A. Mellis\n Modified 03 August 2015 by Chuck Todd\n */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include \"Arduino.h\"\n\n#include \"Print.h\"\n\n// Public Methods //////////////////////////////////////////////////////////////\n\n/* default implementation: may be overridden */\nsize_t Print::write(const uint8_t *buffer, size_t size)\n{\n  size_t n = 0;\n  while (size--) {\n    if (write(*buffer++)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const __FlashStringHelper *ifsh)\n{\n  PGM_P p = reinterpret_cast<PGM_P>(ifsh);\n  size_t n = 0;\n  while (1) {\n    unsigned char c = pgm_read_byte(p++);\n    if (c == 0) break;\n    if (write(c)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const String &s)\n{\n  return write(s.c_str(), s.length());\n}\n\nsize_t Print::print(const char str[])\n{\n  return write(str);\n}\n\nsize_t Print::print(char c)\n{\n  return write(c);\n}\n\nsize_t Print::print(unsigned char b, int base)\n{\n  return print((unsigned long) b, base);\n}\n\nsize_t Print::print(int n, int base)\n{\n  return print((long) n, base);\n}\n\nsize_t Print::print(unsigned int n, int base)\n{\n  return print((unsigned long) n, base);\n}\n\nsize_t Print::print(long n, int base)\n{\n  if (base == 0) {\n    return write(n);\n  } else if (base == 10) {\n    if (n < 0) {\n      int t = print('-');\n      n = -n;\n      return printNumber(n, 10) + t;\n    }\n    return printNumber(n, 10);\n  } else {\n    return printNumber(n, base);\n  }\n}\n\nsize_t Print::print(unsigned long n, int base)\n{\n  if (base == 0) return write(n);\n  else return printNumber(n, base);\n}\n\nsize_t Print::print(double n, int digits)\n{\n  return printFloat(n, digits);\n}\n\nsize_t Print::println(const __FlashStringHelper *ifsh)\n{\n  size_t n = print(ifsh);\n  n += println();\n  return n;\n}\n\nsize_t Print::print(const Printable& x)\n{\n  return x.printTo(*this);\n}\n\nsize_t Print::println(void)\n{\n  return write(\"\\r\\n\");\n}\n\nsize_t Print::println(const String &s)\n{\n  size_t n = print(s);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const char c[])\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(char c)\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned char b, int base)\n{\n  size_t n = print(b, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(double num, int digits)\n{\n  size_t n = print(num, digits);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const Printable& x)\n{\n  size_t n = print(x);\n  n += println();\n  return n;\n}\n\n// Private Methods /////////////////////////////////////////////////////////////\n\nsize_t Print::printNumber(unsigned long n, uint8_t base)\n{\n  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.\n  char *str = &buf[sizeof(buf) - 1];\n\n  *str = '\\0';\n\n  // prevent crash if called with base == 1\n  if (base < 2) base = 10;\n\n  do {\n    char c = n % base;\n    n /= base;\n\n    *--str = c < 10 ? c + '0' : c + 'A' - 10;\n  } while(n);\n\n  return write(str);\n}\n\nsize_t Print::printFloat(double number, uint8_t digits) \n{ \n  size_t n = 0;\n  \n  if (isnan(number)) return print(\"nan\");\n  if (isinf(number)) return print(\"inf\");\n  if (number > 4294967040.0) return print (\"ovf\");  // constant determined empirically\n  if (number <-4294967040.0) return print (\"ovf\");  // constant determined empirically\n  \n  // Handle negative numbers\n  if (number < 0.0)\n  {\n     n += print('-');\n     number = -number;\n  }\n\n  // Round correctly so that print(1.999, 2) prints as \"2.00\"\n  double rounding = 0.5;\n  for (uint8_t i=0; i<digits; ++i)\n    rounding /= 10.0;\n  \n  number += rounding;\n\n  // Extract the integer part of the number and print it\n  unsigned long int_part = (unsigned long)number;\n  double remainder = number - (double)int_part;\n  n += print(int_part);\n\n  // Print the decimal point, but only if there are digits beyond\n  if (digits > 0) {\n    n += print('.'); \n  }\n\n  // Extract digits from the remainder one at a time\n  while (digits-- > 0)\n  {\n    remainder *= 10.0;\n    unsigned int toPrint = (unsigned int)(remainder);\n    n += print(toPrint);\n    remainder -= toPrint; \n  } \n  \n  return n;\n}\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":115,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":20}}}
>>>
Content-Length: 222

{"id":115,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":242,"character":5},"end":{"line":242,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":116,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":38,"character":14}}}
>>>
Content-Length: 38

{"id":116,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":117,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":38,"character":14},"end":{"line":38,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":117,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":118,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":3}}}
>>>
Content-Length: 40

{"id":118,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":119,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":3}}}
>>>
Content-Length: 38

{"id":119,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 503

{"jsonrpc":"2.0","id":120,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":3},"end":{"line":31,"character":3}},"context":{"diagnostics":[{"range":{"start":{"line":31,"character":3},"end":{"line":31,"character":7}},"message":"Different indentation for 'if' and corresponding 'else'","severity":2,"code":"readability-misleading-indentation","source":"clang-tidy"}]}}}
>>>
Content-Length: 38

{"id":120,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":76},"contentChanges":[{"range":{"start":{"line":31,"character":2},"end":{"line":31,"character":3}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":77},"contentChanges":[{"range":{"start":{"line":31,"character":0},"end":{"line":31,"character":2}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":0},"end":{"line":31,"character":4}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":78},"contentChanges":[{"range":{"start":{"line":30,"character":3},"end":{"line":31,"character":0}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":121,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":121,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":78}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":78}}}Content-Length: 206

{"jsonrpc":"2.0","id":122,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":8}}}
>>>
Content-Length: 40

{"id":122,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":123,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":5}}}
>>>
Content-Length: 223

{"id":123,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":479,"character":5},"end":{"line":479,"character":11}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":124,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":7}}}
>>>
Content-Length: 233

{"id":124,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp","range":{"start":{"line":69,"character":17},"end":{"line":69,"character":23}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 2931

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp","languageId":"cpp","version":1,"text":"/*\n  HardwareSerial0.cpp - Hardware serial library for Wiring\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 23 November 2006 by David A. Mellis\n  Modified 28 September 2010 by Mark Sproul\n  Modified 14 August 2012 by Alarus\n  Modified 3 December 2013 by Matthijs Kooijman\n*/\n\n#include \"Arduino.h\"\n#include \"HardwareSerial.h\"\n#include \"HardwareSerial_private.h\"\n\n// Each HardwareSerial is defined in its own file, since the linker pulls\n// in the entire file when any element inside is used. --gc-sections can\n// additionally cause unused symbols to be dropped, but ISRs have the\n// \"used\" attribute so are never dropped and they keep the\n// HardwareSerial instance in as well. Putting each instance in its own\n// file prevents the linker from pulling in any unused instances in the\n// first place.\n\n#if defined(HAVE_HWSERIAL0)\n\n#if defined(USART_RX_vect)\n  ISR(USART_RX_vect)\n#elif defined(USART0_RX_vect)\n  ISR(USART0_RX_vect)\n#elif defined(USART_RXC_vect)\n  ISR(USART_RXC_vect) // ATmega8\n#else\n  #error \"Don't know what the Data Received vector is called for Serial\"\n#endif\n  {\n    Serial._rx_complete_irq();\n  }\n\n#if defined(UART0_UDRE_vect)\nISR(UART0_UDRE_vect)\n#elif defined(UART_UDRE_vect)\nISR(UART_UDRE_vect)\n#elif defined(USART0_UDRE_vect)\nISR(USART0_UDRE_vect)\n#elif defined(USART_UDRE_vect)\nISR(USART_UDRE_vect)\n#else\n  #error \"Don't know what the Data Register Empty vector is called for Serial\"\n#endif\n{\n  Serial._tx_udr_empty_irq();\n}\n\n#if defined(UBRRH) && defined(UBRRL)\n  HardwareSerial Serial(&UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR);\n#else\n  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);\n#endif\n\n// Function that can be weakly referenced by serialEventRun to prevent\n// pulling in this file if it's not otherwise used.\nbool Serial0_available() {\n  return Serial.available();\n}\n\n#endif // HAVE_HWSERIAL0\n"}}}Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp"}}}
>>>
Content-Length: 204

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79},"contentChanges":[{"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":3}},"rangeLength":0,"text":" "}]}}Content-Length: 279

{"jsonrpc":"2.0","id":125,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":125,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 219

{"jsonrpc":"2.0","id":126,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":44,"character":14}}}
>>>
Content-Length: 173

{"id":126,"error":{"code":0,"message":"Document is not available: file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":127,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":44,"character":14},"end":{"line":44,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":127,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":128,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":45,"character":2},"end":{"line":46,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":128,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":129,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":33,"character":1},"end":{"line":33,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":129,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 281

{"jsonrpc":"2.0","id":130,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":47},"end":{"line":27,"character":47}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":130,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":131,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":1}}}
>>>
Content-Length: 40

{"id":131,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":132,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":3}}}
>>>
Content-Length: 40

{"id":132,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":133,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":4},"end":{"line":30,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":133,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":134,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":4}}}
>>>
Content-Length: 38

{"id":134,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":135,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":4}}}
>>>
Content-Length: 38

{"id":135,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":136,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":3}}}
>>>
Content-Length: 40

{"id":136,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":137,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":137,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":138,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":24}}}
>>>
Content-Length: 40

{"id":138,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":80},"contentChanges":[{"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":3}},"rangeLength":0,"text":" "}]}}Content-Length: 408

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":81},"contentChanges":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":4}},"rangeLength":0,"text":"else if (digitalRead(thirdKeyPin) == LOW) {\n    Serial.println(\"This\");\n      tone(buzzerPin, 392);\n  }"}]}}Content-Length: 279

{"jsonrpc":"2.0","id":139,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":33,"character":3},"end":{"line":33,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":139,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":140,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":24}}}
>>>
Content-Length: 38

{"id":140,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":141,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":14}}}
>>>
Content-Length: 225

{"id":141,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","range":{"start":{"line":137,"character":14},"end":{"line":137,"character":21}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":81}}}Content-Length: 5951

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","languageId":"cpp","version":1,"text":"/*\n Print.cpp - Base class that provides print() and println()\n Copyright (c) 2008 David A. Mellis.  All right reserved.\n \n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n \n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n \n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n \n Modified 23 November 2006 by David A. Mellis\n Modified 03 August 2015 by Chuck Todd\n */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include \"Arduino.h\"\n\n#include \"Print.h\"\n\n// Public Methods //////////////////////////////////////////////////////////////\n\n/* default implementation: may be overridden */\nsize_t Print::write(const uint8_t *buffer, size_t size)\n{\n  size_t n = 0;\n  while (size--) {\n    if (write(*buffer++)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const __FlashStringHelper *ifsh)\n{\n  PGM_P p = reinterpret_cast<PGM_P>(ifsh);\n  size_t n = 0;\n  while (1) {\n    unsigned char c = pgm_read_byte(p++);\n    if (c == 0) break;\n    if (write(c)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const String &s)\n{\n  return write(s.c_str(), s.length());\n}\n\nsize_t Print::print(const char str[])\n{\n  return write(str);\n}\n\nsize_t Print::print(char c)\n{\n  return write(c);\n}\n\nsize_t Print::print(unsigned char b, int base)\n{\n  return print((unsigned long) b, base);\n}\n\nsize_t Print::print(int n, int base)\n{\n  return print((long) n, base);\n}\n\nsize_t Print::print(unsigned int n, int base)\n{\n  return print((unsigned long) n, base);\n}\n\nsize_t Print::print(long n, int base)\n{\n  if (base == 0) {\n    return write(n);\n  } else if (base == 10) {\n    if (n < 0) {\n      int t = print('-');\n      n = -n;\n      return printNumber(n, 10) + t;\n    }\n    return printNumber(n, 10);\n  } else {\n    return printNumber(n, base);\n  }\n}\n\nsize_t Print::print(unsigned long n, int base)\n{\n  if (base == 0) return write(n);\n  else return printNumber(n, base);\n}\n\nsize_t Print::print(double n, int digits)\n{\n  return printFloat(n, digits);\n}\n\nsize_t Print::println(const __FlashStringHelper *ifsh)\n{\n  size_t n = print(ifsh);\n  n += println();\n  return n;\n}\n\nsize_t Print::print(const Printable& x)\n{\n  return x.printTo(*this);\n}\n\nsize_t Print::println(void)\n{\n  return write(\"\\r\\n\");\n}\n\nsize_t Print::println(const String &s)\n{\n  size_t n = print(s);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const char c[])\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(char c)\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned char b, int base)\n{\n  size_t n = print(b, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(double num, int digits)\n{\n  size_t n = print(num, digits);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const Printable& x)\n{\n  size_t n = print(x);\n  n += println();\n  return n;\n}\n\n// Private Methods /////////////////////////////////////////////////////////////\n\nsize_t Print::printNumber(unsigned long n, uint8_t base)\n{\n  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.\n  char *str = &buf[sizeof(buf) - 1];\n\n  *str = '\\0';\n\n  // prevent crash if called with base == 1\n  if (base < 2) base = 10;\n\n  do {\n    char c = n % base;\n    n /= base;\n\n    *--str = c < 10 ? c + '0' : c + 'A' - 10;\n  } while(n);\n\n  return write(str);\n}\n\nsize_t Print::printFloat(double number, uint8_t digits) \n{ \n  size_t n = 0;\n  \n  if (isnan(number)) return print(\"nan\");\n  if (isinf(number)) return print(\"inf\");\n  if (number > 4294967040.0) return print (\"ovf\");  // constant determined empirically\n  if (number <-4294967040.0) return print (\"ovf\");  // constant determined empirically\n  \n  // Handle negative numbers\n  if (number < 0.0)\n  {\n     n += print('-');\n     number = -number;\n  }\n\n  // Round correctly so that print(1.999, 2) prints as \"2.00\"\n  double rounding = 0.5;\n  for (uint8_t i=0; i<digits; ++i)\n    rounding /= 10.0;\n  \n  number += rounding;\n\n  // Extract the integer part of the number and print it\n  unsigned long int_part = (unsigned long)number;\n  double remainder = number - (double)int_part;\n  n += print(int_part);\n\n  // Print the decimal point, but only if there are digits beyond\n  if (digits > 0) {\n    n += print('.'); \n  }\n\n  // Extract digits from the remainder one at a time\n  while (digits-- > 0)\n  {\n    remainder *= 10.0;\n    unsigned int toPrint = (unsigned int)(remainder);\n    n += print(toPrint);\n    remainder -= toPrint; \n  } \n  \n  return n;\n}\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":81}}}Content-Length: 206

{"jsonrpc":"2.0","id":142,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":9}}}
>>>
Content-Length: 40

{"id":142,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":143,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":33,"character":10},"end":{"line":33,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":143,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":144,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":29}}}
>>>
Content-Length: 390

{"id":144,"result":[{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}},"kind":1},{"range":{"start":{"line":12,"character":10},"end":{"line":12,"character":21}},"kind":2},{"range":{"start":{"line":27,"character":25},"end":{"line":27,"character":36}},"kind":2},{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":36}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":145,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":36}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":145,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":146,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":34}}}
>>>
Content-Length: 303

{"id":146,"result":{"contents":{"kind":"markdown","value":"### variable `thirdKeyPin`  \n\n---\nType: `int`  \nValue = `4`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint thirdKeyPin = 4\n```"},"range":{"start":{"line":37,"character":25},"end":{"line":37,"character":36}}},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":147,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":33,"character":10},"end":{"line":33,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":147,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":148,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":18}}}
>>>
Content-Length: 315

{"id":148,"result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\nâ†’ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t println(const char[])\n```"},"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":18}}},"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":149,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":22}}}
>>>
Content-Length: 40

{"id":149,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":150,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":23}}}
>>>
Content-Length: 40

{"id":150,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":151,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":23}}}
>>>
Content-Length: 38

{"id":151,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":152,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":22},"end":{"line":32,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 399

{"id":152,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":32,"character":22},"end":{"line":32,"character":25}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":153,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":39}}}
>>>
Content-Length: 40

{"id":153,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":154,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":44}}}
>>>
Content-Length: 211

{"id":154,"result":{"contents":{"kind":"markdown","value":"### macro `LOW`  \n\n---\n```cpp\n#define LOW 0x0\n```"},"range":{"start":{"line":34,"character":41},"end":{"line":34,"character":44}}},"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":155,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":14}}}
>>>
Content-Length: 287

{"id":155,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":37,"character":13},"end":{"line":37,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":156,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":25}}}
>>>
Content-Length: 389

{"id":156,"result":[{"range":{"start":{"line":23,"character":6},"end":{"line":23,"character":10}},"kind":1},{"range":{"start":{"line":26,"character":6},"end":{"line":26,"character":10}},"kind":1},{"range":{"start":{"line":29,"character":6},"end":{"line":29,"character":10}},"kind":1},{"range":{"start":{"line":32,"character":6},"end":{"line":32,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":157,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":24}}}
>>>
Content-Length: 38

{"id":157,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":158,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":22},"end":{"line":32,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 399

{"id":158,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":32,"character":22},"end":{"line":32,"character":25}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":82},"contentChanges":[{"range":{"start":{"line":32,"character":22},"end":{"line":32,"character":25}},"rangeLength":3,"text":"460"}]}}Content-Length: 281

{"jsonrpc":"2.0","id":159,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":25},"end":{"line":32,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":159,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":82}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":82}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":82}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":82}}}Content-Length: 60

{"jsonrpc":"2.0","id":160,"method":"shutdown","params":null}
>>>
Content-Length: 40

{"id":160,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":62572,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1214

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":1,"text":"\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\n\nint buzzerPin = 10;\n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n\n  //set the buzzer pin as an output\n  pinMode(buzzerPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {\n    Serial.println(\"This\");\n      tone(buzzerPin, 262);\n  } else if (digitalRead(secondKeyPin) == LOW) {\n    Serial.println(\"This\");\n      tone(buzzerPin, 330);\n  } else if (digitalRead(thirdKeyPin) == LOW) {\n    Serial.println(\"This\");\n      tone(buzzerPin, 392);\n  } else if (digitalRead(thirdKeyPin) == LOW) {\n    Serial.println(\"This\");\n      tone(buzzerPin, 460);\n  } else {\n    noTone(buzzerPin);\n  }\n}\n\n/*\n  note  frequency\n  c     262 Hz\n  d     294 Hz\n  e     330 Hz\n  f     349 Hz\n  g     392 Hz\n  a     440 Hz\n  b     494 Hz\n  C     523 Hz\n*/\n"}}}Content-Length: 279

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":25},"end":{"line":32,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 204

{"jsonrpc":"2.0","id":2,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":3,"character":19}}}
>>>
Content-Length: 38

{"id":2,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":3,"character":20},"end":{"line":3,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":3,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":3,"character":19}}}
>>>
Content-Length: 38

{"id":4,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":2,"character":0},"end":{"line":3,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":6,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":3,"character":20},"end":{"line":3,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":7,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":3,"character":20}}}
>>>
Content-Length: 38

{"id":8,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":2},"contentChanges":[{"range":{"start":{"line":3,"character":20},"end":{"line":3,"character":20}},"rangeLength":0,"text":"\n"}]}}Content-Length: 317

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":3},"contentChanges":[{"range":{"start":{"line":4,"character":0},"end":{"line":4,"character":0}},"rangeLength":0,"text":"int thirdKeyPin = 4;"}]}}
>>>
Content-Length: 606

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":15}},"severity":1,"code":"redefinition","source":"clang","message":"Redefinition of 'thirdKeyPin'\n\nDigitalTrumpet.ino.cpp:6:5: note: previous definition is here"},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}},"severity":3,"message":"Previous definition is here\n\nDigitalTrumpet.ino.cpp:7:5: error: redefinition of 'thirdKeyPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 209

{"jsonrpc":"2.0","id":9,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":3,"character":19}}}
>>>
Content-Length: 36

{"id":9,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":20},"end":{"line":4,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":10,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":3}}}Content-Length: 205

{"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":4,"character":17}}}
>>>
Content-Length: 39

{"id":11,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":4,"character":17}}}
>>>
Content-Length: 39

{"id":12,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":13,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":4,"character":11}}}
>>>
Content-Length: 475

{"id":13,"result":[{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}},"kind":1},{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":15}},"kind":1},{"range":{"start":{"line":13,"character":10},"end":{"line":13,"character":21}},"kind":2},{"range":{"start":{"line":28,"character":25},"end":{"line":28,"character":36}},"kind":2},{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":36}},"kind":2}],"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 513

{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":11},"end":{"line":4,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":15}},"message":"Redefinition of 'thirdKeyPin'\n\nDigitalTrumpet.ino.cpp:6:5: note: previous definition is here","severity":1,"code":"redefinition","source":"clang"}]}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 37

{"id":14,"result":[],"jsonrpc":"2.0"}Content-Length: 606

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":15}},"severity":1,"code":"redefinition","source":"clang","message":"Redefinition of 'thirdKeyPin'\n\nDigitalTrumpet.ino.cpp:6:5: note: previous definition is here"},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}},"severity":3,"message":"Previous definition is here\n\nDigitalTrumpet.ino.cpp:7:5: error: redefinition of 'thirdKeyPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 512

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":15}},"message":"Redefinition of 'thirdKeyPin'\n\nDigitalTrumpet.ino.cpp:6:5: note: previous definition is here","severity":1,"code":"redefinition","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":15,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":4,"character":14}}}
>>>
Content-Length: 248

{"id":16,"result":{"contents":{"kind":"markdown","value":"### variable `thirdKeyPin`  \n\n---\nType: `int`  \n\n---\n```cpp\npublic: int thirdKeyPin\n```"},"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":15}}},"jsonrpc":"2.0"}
<<<
Content-Length: 532

{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":15}},"message":"Redefinition of 'thirdKeyPin'\n\nDigitalTrumpet.ino.cpp:6:5: note: previous definition is here","severity":1,"code":"redefinition","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 37

{"id":17,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":4},"contentChanges":[{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":15}},"rangeLength":11,"text":"f"}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":17}}Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":5},"contentChanges":[{"range":{"start":{"line":4,"character":5},"end":{"line":4,"character":5}},"rangeLength":0,"text":"o"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":6},"contentChanges":[{"range":{"start":{"line":4,"character":6},"end":{"line":4,"character":6}},"rangeLength":0,"text":"u"}]}}Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":7},"contentChanges":[{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":7}},"rangeLength":0,"text":"t"}]}}Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":8},"contentChanges":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"rangeLength":0,"text":"h"}]}}Content-Length: 276

{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":18,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":8}}}Content-Length: 297

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":9},"contentChanges":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":9}},"rangeLength":1,"text":""}]}}Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":10},"contentChanges":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"rangeLength":0,"text":"r"}]}}Content-Length: 276

{"jsonrpc":"2.0","id":19,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":19,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":10}}}Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":11},"contentChanges":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":9}},"rangeLength":1,"text":""}]}}Content-Length: 276

{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":20,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":12},"contentChanges":[{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":8}},"rangeLength":1,"text":""}]}}Content-Length: 276

{"jsonrpc":"2.0","id":21,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":21,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":13},"contentChanges":[{"range":{"start":{"line":4,"character":7},"end":{"line":4,"character":7}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":14},"contentChanges":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"rangeLength":0,"text":"h"}]}}Content-Length: 276

{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":22,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":14}}}Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":15},"contentChanges":[{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":9}},"rangeLength":0,"text":"t"}]}}Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":16},"contentChanges":[{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":10}},"rangeLength":1,"text":""}]}}Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":17},"contentChanges":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":9}},"rangeLength":1,"text":""}]}}Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":18},"contentChanges":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"rangeLength":0,"text":"t"}]}}Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":19},"contentChanges":[{"range":{"start":{"line":4,"character":9},"end":{"line":4,"character":9}},"rangeLength":0,"text":"h"}]}}Content-Length: 278

{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":10},"end":{"line":4,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":23,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":19}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":20},"contentChanges":[{"range":{"start":{"line":4,"character":10},"end":{"line":4,"character":10}},"rangeLength":0,"text":"K"}]}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":21},"contentChanges":[{"range":{"start":{"line":4,"character":11},"end":{"line":4,"character":11}},"rangeLength":0,"text":"e"}]}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":22},"contentChanges":[{"range":{"start":{"line":4,"character":12},"end":{"line":4,"character":12}},"rangeLength":0,"text":"y"}]}}Content-Length: 278

{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":13},"end":{"line":4,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":24,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":22}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":23},"contentChanges":[{"range":{"start":{"line":4,"character":13},"end":{"line":4,"character":13}},"rangeLength":0,"text":"O"}]}}Content-Length: 278

{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":25,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":24},"contentChanges":[{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":14}},"rangeLength":0,"text":"u"}]}}Content-Length: 278

{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":26,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":25},"contentChanges":[{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":15}},"rangeLength":1,"text":""}]}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":26},"contentChanges":[{"range":{"start":{"line":4,"character":13},"end":{"line":4,"character":14}},"rangeLength":1,"text":""}]}}Content-Length: 278

{"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":13},"end":{"line":4,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":27,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":26}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":27},"contentChanges":[{"range":{"start":{"line":4,"character":13},"end":{"line":4,"character":13}},"rangeLength":0,"text":"P"}]}}Content-Length: 278

{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":28,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":28},"contentChanges":[{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":14}},"rangeLength":0,"text":"i"}]}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":29},"contentChanges":[{"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":15}},"rangeLength":0,"text":"n"}]}}Content-Length: 278

{"jsonrpc":"2.0","id":29,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":16},"end":{"line":4,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":29,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":29}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":29}}}Content-Length: 217

{"jsonrpc":"2.0","id":30,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":4,"character":20}}}
>>>
Content-Length: 37

{"id":30,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":31,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":20},"end":{"line":4,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":31,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":30},"contentChanges":[{"range":{"start":{"line":4,"character":19},"end":{"line":4,"character":20}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 341

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":4,"character":19},"end":{"line":4,"character":20}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":31},"contentChanges":[{"range":{"start":{"line":4,"character":19},"end":{"line":4,"character":19}},"rangeLength":0,"text":"5"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":20},"end":{"line":4,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":32,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":33,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":4,"character":14}}}
>>>
Content-Length: 198

{"id":33,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":31}}}Content-Length: 210

{"jsonrpc":"2.0","id":34,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":4,"character":15}}}
>>>
Content-Length: 198

{"id":34,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":31}}}Content-Length: 211

{"jsonrpc":"2.0","id":35,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":12,"character":36}}}
>>>
Content-Length: 221

{"id":35,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":44,"character":8},"end":{"line":44,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":36,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":4}}}
>>>
Content-Length: 39

{"id":36,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":37,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":3},"end":{"line":31,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":37,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":10}}}
>>>
Content-Length: 39

{"id":38,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":39,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":11}}}
>>>
Content-Length: 37

{"id":39,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":40,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":40,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":41,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":31}}}
>>>
Content-Length: 302

{"id":41,"result":{"contents":{"kind":"markdown","value":"### variable `thirdKeyPin`  \n\n---\nType: `int`  \nValue = `4`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint thirdKeyPin = 4\n```"},"range":{"start":{"line":38,"character":25},"end":{"line":38,"character":36}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":42,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":31}}}
>>>
Content-Length: 389

{"id":42,"result":[{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}},"kind":1},{"range":{"start":{"line":13,"character":10},"end":{"line":13,"character":21}},"kind":2},{"range":{"start":{"line":28,"character":25},"end":{"line":28,"character":36}},"kind":2},{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":36}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":36}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":43,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32},"contentChanges":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":36}},"rangeLength":11,"text":"f"}]}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":33},"contentChanges":[{"range":{"start":{"line":31,"character":26},"end":{"line":31,"character":26}},"rangeLength":0,"text":"o"}]}}
>>>
Content-Length: 356

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":27}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fo'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":34},"contentChanges":[{"range":{"start":{"line":31,"character":27},"end":{"line":31,"character":27}},"rangeLength":0,"text":"u"}]}}
>>>
Content-Length: 357

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":28}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fou'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 464

{"jsonrpc":"2.0","id":44,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":28},"end":{"line":31,"character":28}},"context":{"diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":28}},"message":"Use of undeclared identifier 'fou'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":44,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":35},"contentChanges":[{"range":{"start":{"line":31,"character":28},"end":{"line":31,"character":28}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 358

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":29}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'four'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":36},"contentChanges":[{"range":{"start":{"line":31,"character":29},"end":{"line":31,"character":29}},"rangeLength":0,"text":"h"}]}}
>>>
Content-Length: 359

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":30}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourh'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 466

{"jsonrpc":"2.0","id":45,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":30},"end":{"line":31,"character":30}},"context":{"diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":30}},"message":"Use of undeclared identifier 'fourh'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":45,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":36}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":37},"contentChanges":[{"range":{"start":{"line":31,"character":29},"end":{"line":31,"character":30}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 358

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":29}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'four'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":38},"contentChanges":[{"range":{"start":{"line":31,"character":29},"end":{"line":31,"character":29}},"rangeLength":0,"text":"t"}]}}
>>>
Content-Length: 359

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":30}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourt'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":39},"contentChanges":[{"range":{"start":{"line":31,"character":30},"end":{"line":31,"character":30}},"rangeLength":0,"text":"h"}]}}
>>>
Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":31}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourth'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 467

{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":31},"end":{"line":31,"character":31}},"context":{"diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":31}},"message":"Use of undeclared identifier 'fourth'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":46,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":39}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":40},"contentChanges":[{"range":{"start":{"line":31,"character":31},"end":{"line":31,"character":31}},"rangeLength":0,"text":"K"}]}}
>>>
Content-Length: 361

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":32}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourthK'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":41},"contentChanges":[{"range":{"start":{"line":31,"character":32},"end":{"line":31,"character":32}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":33}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourthKe'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":42},"contentChanges":[{"range":{"start":{"line":31,"character":33},"end":{"line":31,"character":33}},"rangeLength":0,"text":"y"}]}}
>>>
Content-Length: 725

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":34}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'fourthKey'; did you mean 'fourthKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:7:5: note: 'fourthKeyPin' declared here"},{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}},"severity":3,"message":"'fourthKeyPin' declared here\n\nDigitalTrumpet.ino.cpp:39:26: error: use of undeclared identifier 'fourthKey'; did you mean 'fourthKeyPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 590

{"jsonrpc":"2.0","id":47,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":34},"end":{"line":31,"character":34}},"context":{"diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":34}},"message":"Use of undeclared identifier 'fourthKey'; did you mean 'fourthKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:7:5: note: 'fourthKeyPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":47,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":42}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":43},"contentChanges":[{"range":{"start":{"line":31,"character":34},"end":{"line":31,"character":34}},"rangeLength":0,"text":"P"}]}}
>>>
Content-Length: 727

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":35}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'fourthKeyP'; did you mean 'fourthKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:7:5: note: 'fourthKeyPin' declared here"},{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}},"severity":3,"message":"'fourthKeyPin' declared here\n\nDigitalTrumpet.ino.cpp:39:26: error: use of undeclared identifier 'fourthKeyP'; did you mean 'fourthKeyPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":44},"contentChanges":[{"range":{"start":{"line":31,"character":35},"end":{"line":31,"character":35}},"rangeLength":0,"text":"i"}]}}
>>>
Content-Length: 729

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":36}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'fourthKeyPi'; did you mean 'fourthKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:7:5: note: 'fourthKeyPin' declared here"},{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}},"severity":3,"message":"'fourthKeyPin' declared here\n\nDigitalTrumpet.ino.cpp:39:26: error: use of undeclared identifier 'fourthKeyPi'; did you mean 'fourthKeyPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":45},"contentChanges":[{"range":{"start":{"line":31,"character":36},"end":{"line":31,"character":36}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":45}}}Content-Length: 280

{"jsonrpc":"2.0","id":48,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":37},"end":{"line":31,"character":37}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":48,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":49,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":20}}}
>>>
Content-Length: 39

{"id":49,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":50,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":21}}}
>>>
Content-Length: 39

{"id":50,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":27},"end":{"line":32,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":51,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":52,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":0},"end":{"line":32,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":52,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":53,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":27},"end":{"line":33,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":53,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":54,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":0},"end":{"line":32,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":54,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":55,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":24}}}
>>>
Content-Length: 37

{"id":55,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":56,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":20},"end":{"line":32,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 398

{"id":56,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":32,"character":20},"end":{"line":32,"character":24}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":57,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":23}}}
>>>
Content-Length: 39

{"id":57,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":58,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":22}}}
>>>
Content-Length: 286

{"id":58,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":38,"character":13},"end":{"line":38,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":46},"contentChanges":[{"range":{"start":{"line":32,"character":20},"end":{"line":32,"character":24}},"rangeLength":4,"text":"4"}]}}Content-Length: 206

{"jsonrpc":"2.0","id":59,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":22}}}
>>>
Content-Length: 39

{"id":59,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":60,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":21},"end":{"line":32,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":60,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":61,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":22}}}
>>>
Content-Length: 37

{"id":61,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":46}}}Content-Length: 280

{"jsonrpc":"2.0","id":62,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":20},"end":{"line":29,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 398

{"id":62,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":29,"character":20},"end":{"line":29,"character":24}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":63,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":22}}}
>>>
Content-Length: 39

{"id":63,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":47},"contentChanges":[{"range":{"start":{"line":29,"character":20},"end":{"line":29,"character":24}},"rangeLength":4,"text":"3"}]}}Content-Length: 280

{"jsonrpc":"2.0","id":64,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":21},"end":{"line":29,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":64,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":47}}}Content-Length: 206

{"jsonrpc":"2.0","id":65,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":22}}}
>>>
Content-Length: 39

{"id":65,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":66,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":23}}}
>>>
Content-Length: 37

{"id":66,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":67,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":26,"character":23},"end":{"line":26,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":67,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":48},"contentChanges":[{"range":{"start":{"line":26,"character":23},"end":{"line":26,"character":23}},"rangeLength":0,"text":"2"}]}}Content-Length: 206

{"jsonrpc":"2.0","id":68,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":23}}}
>>>
Content-Length: 286

{"id":68,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":32,"character":13},"end":{"line":32,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":69,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":26,"character":24},"end":{"line":26,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":69,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":70,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":22}}}
>>>
Content-Length: 39

{"id":70,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":48}}}Content-Length: 211

{"jsonrpc":"2.0","id":71,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":23}}}
>>>
Content-Length: 37

{"id":71,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":72,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":22}}}
>>>
Content-Length: 39

{"id":72,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":49},"contentChanges":[{"range":{"start":{"line":26,"character":23},"end":{"line":26,"character":24}},"rangeLength":1,"text":""}]}}Content-Length: 280

{"jsonrpc":"2.0","id":73,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":26,"character":23},"end":{"line":26,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":73,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":74,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":24}}}
>>>
Content-Length: 37

{"id":74,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":49}}}Content-Length: 280

{"jsonrpc":"2.0","id":75,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":26,"character":20},"end":{"line":26,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 398

{"id":75,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":26,"character":20},"end":{"line":26,"character":24}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":50},"contentChanges":[{"range":{"start":{"line":26,"character":20},"end":{"line":26,"character":24}},"rangeLength":4,"text":"2"}]}}Content-Length: 206

{"jsonrpc":"2.0","id":76,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":24,"character":22}}}
>>>
Content-Length: 39

{"id":76,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":77,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":26,"character":21},"end":{"line":26,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":77,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":78,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":24,"character":23}}}
>>>
Content-Length: 37

{"id":78,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":50}}}Content-Length: 280

{"jsonrpc":"2.0","id":79,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":24,"character":23},"end":{"line":24,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":79,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":80,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":23,"character":22}}}
>>>
Content-Length: 39

{"id":80,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":81,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":23,"character":23}}}
>>>
Content-Length: 37

{"id":81,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51},"contentChanges":[{"range":{"start":{"line":23,"character":20},"end":{"line":23,"character":24}},"rangeLength":4,"text":"1"}]}}Content-Length: 280

{"jsonrpc":"2.0","id":82,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":23,"character":21},"end":{"line":23,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":82,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":83,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":23,"character":23}}}
>>>
Content-Length: 314

{"id":83,"result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\nâ†’ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t println(const char[])\n```"},"range":{"start":{"line":30,"character":23},"end":{"line":30,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 278

{"jsonrpc":"2.0","id":84,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":36,"character":3},"end":{"line":36,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":84,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 211

{"jsonrpc":"2.0","id":85,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":25}}}
>>>
Content-Length: 221

{"id":85,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":242,"character":5},"end":{"line":242,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":86,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":24}}}
>>>
Content-Length: 39

{"id":86,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":87,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":17}}}
>>>
Content-Length: 198

{"id":87,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":6,"character":4},"end":{"line":6,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":88,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":25}}}
>>>
Content-Length: 221

{"id":88,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":242,"character":5},"end":{"line":242,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":89,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":24}}}
>>>
Content-Length: 37

{"id":89,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":90,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":24}}}
>>>
Content-Length: 39

{"id":90,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":91,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":22}}}
>>>
Content-Length: 39

{"id":91,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":92,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":23}}}
>>>
Content-Length: 39

{"id":92,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":93,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":35,"character":22},"end":{"line":35,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":93,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51}}}Content-Length: 206

{"jsonrpc":"2.0","id":94,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":43,"character":13}}}
>>>
Content-Length: 39

{"id":94,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":95,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":48,"character":13}}}
>>>
Content-Length: 39

{"id":95,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":96,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":48,"character":11}}}
>>>
Content-Length: 39

{"id":96,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":97,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":47,"character":12}}}
>>>
Content-Length: 39

{"id":97,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":98,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":47,"character":13}}}
>>>
Content-Length: 39

{"id":98,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":99,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":24,"character":11}}}
>>>
Content-Length: 303

{"id":99,"result":{"contents":{"kind":"markdown","value":"### variable `buzzerPin`  \n\n---\nType: `int`  \nValue = `10`  \nPassed as \\_pin (converted to uint8_t)  \n\n---\n```cpp\nint buzzerPin = 10\n```"},"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":100,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":13,"character":4},"end":{"line":13,"character":37}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":100,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":101,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":37}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":101,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":102,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":21}}}
>>>
Content-Length: 229

{"id":102,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","range":{"start":{"line":28,"character":5},"end":{"line":28,"character":12}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5578

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out &= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) && defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) && defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out &= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) & bit) return HIGH;\n\treturn LOW;\n}\n"}}}Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}}
>>>
Content-Length: 201

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":103,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":31}}}
>>>
Content-Length: 222

{"id":103,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":44,"character":8},"end":{"line":44,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":104,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":13,"character":37},"end":{"line":13,"character":37}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":104,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":105,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":13,"character":36},"end":{"line":13,"character":36}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":105,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":106,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":13,"character":37},"end":{"line":13,"character":37}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":106,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 306

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":52},"contentChanges":[{"range":{"start":{"line":13,"character":37},"end":{"line":13,"character":37}},"rangeLength":0,"text":"\n  "}]}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":52}}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":53},"contentChanges":[{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":2}},"rangeLength":2,"text":""}]}}Content-Length: 335

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":54},"contentChanges":[{"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":0}},"rangeLength":0,"text":"pinMode(thirdKeyPin, INPUT_PULLUP);"}]}}Content-Length: 281

{"jsonrpc":"2.0","id":107,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":14,"character":35},"end":{"line":14,"character":35}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":107,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":54}}}Content-Length: 212

{"jsonrpc":"2.0","id":108,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":33}}}
>>>
Content-Length: 222

{"id":108,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":44,"character":8},"end":{"line":44,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":54}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":54}}}Content-Length: 219

{"jsonrpc":"2.0","id":109,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":16}}}
>>>
Content-Length: 389

{"id":109,"result":[{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}},"kind":1},{"range":{"start":{"line":13,"character":10},"end":{"line":13,"character":21}},"kind":2},{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":19}},"kind":2},{"range":{"start":{"line":29,"character":25},"end":{"line":29,"character":36}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":110,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":19}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":110,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":111,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":14}}}
>>>
Content-Length: 303

{"id":111,"result":{"contents":{"kind":"markdown","value":"### variable `thirdKeyPin`  \n\n---\nType: `int`  \nValue = `4`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint thirdKeyPin = 4\n```"},"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":21}}},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":55},"contentChanges":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":19}},"rangeLength":11,"text":"f"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":9}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'f'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 459

{"jsonrpc":"2.0","id":112,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":14,"character":9},"end":{"line":14,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":9}},"message":"Use of undeclared identifier 'f'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":112,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":55}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":56},"contentChanges":[{"range":{"start":{"line":14,"character":9},"end":{"line":14,"character":9}},"rangeLength":0,"text":"o"}]}}
>>>
Content-Length: 355

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":10}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fo'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":57},"contentChanges":[{"range":{"start":{"line":14,"character":10},"end":{"line":14,"character":10}},"rangeLength":0,"text":"u"}]}}
>>>
Content-Length: 571

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":11}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'fou'; did you mean 'for'? (fix available)"},{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":11}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 679

{"jsonrpc":"2.0","id":113,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":14,"character":11},"end":{"line":14,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":11}},"message":"Use of undeclared identifier 'fou'; did you mean 'for'? (fix available)","severity":1,"code":"undeclared_var_use_suggest","source":"clang"},{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":11}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 190

{"id":113,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":57}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":58},"contentChanges":[{"range":{"start":{"line":14,"character":11},"end":{"line":14,"character":11}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 572

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":12}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'four'; did you mean 'for'? (fix available)"},{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":12}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":59},"contentChanges":[{"range":{"start":{"line":14,"character":12},"end":{"line":14,"character":12}},"rangeLength":0,"text":"t"}]}}
>>>
Content-Length: 358

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourt'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":60},"contentChanges":[{"range":{"start":{"line":14,"character":13},"end":{"line":14,"character":13}},"rangeLength":0,"text":"h"}]}}
>>>
Content-Length: 359

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourth'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 467

{"jsonrpc":"2.0","id":114,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":14,"character":14},"end":{"line":14,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":14}},"message":"Use of undeclared identifier 'fourth'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":114,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":60}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":61},"contentChanges":[{"range":{"start":{"line":14,"character":14},"end":{"line":14,"character":14}},"rangeLength":0,"text":"K"}]}}
>>>
Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourthK'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":62},"contentChanges":[{"range":{"start":{"line":14,"character":15},"end":{"line":14,"character":15}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 361

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'fourthKe'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":63},"contentChanges":[{"range":{"start":{"line":14,"character":16},"end":{"line":14,"character":16}},"rangeLength":0,"text":"y"}]}}
>>>
Content-Length: 723

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'fourthKey'; did you mean 'fourthKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:7:5: note: 'fourthKeyPin' declared here"},{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}},"severity":3,"message":"'fourthKeyPin' declared here\n\nDigitalTrumpet.ino.cpp:22:9: error: use of undeclared identifier 'fourthKey'; did you mean 'fourthKeyPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 590

{"jsonrpc":"2.0","id":115,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":14,"character":17},"end":{"line":14,"character":17}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":17}},"message":"Use of undeclared identifier 'fourthKey'; did you mean 'fourthKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:7:5: note: 'fourthKeyPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 190

{"id":115,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":64},"contentChanges":[{"range":{"start":{"line":14,"character":17},"end":{"line":14,"character":17}},"rangeLength":0,"text":"P"}]}}
>>>
Content-Length: 725

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'fourthKeyP'; did you mean 'fourthKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:7:5: note: 'fourthKeyPin' declared here"},{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}},"severity":3,"message":"'fourthKeyPin' declared here\n\nDigitalTrumpet.ino.cpp:22:9: error: use of undeclared identifier 'fourthKeyP'; did you mean 'fourthKeyPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 591

{"jsonrpc":"2.0","id":116,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":14,"character":18},"end":{"line":14,"character":18}},"context":{"diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":18}},"message":"Use of undeclared identifier 'fourthKeyP'; did you mean 'fourthKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:7:5: note: 'fourthKeyPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 190

{"id":116,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":65},"contentChanges":[{"range":{"start":{"line":14,"character":18},"end":{"line":14,"character":18}},"rangeLength":0,"text":"i"}]}}
>>>
Content-Length: 727

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":19}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'fourthKeyPi'; did you mean 'fourthKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:7:5: note: 'fourthKeyPin' declared here"},{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}},"severity":3,"message":"'fourthKeyPin' declared here\n\nDigitalTrumpet.ino.cpp:22:9: error: use of undeclared identifier 'fourthKeyPi'; did you mean 'fourthKeyPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":66},"contentChanges":[{"range":{"start":{"line":14,"character":19},"end":{"line":14,"character":19}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":117,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":14,"character":20},"end":{"line":14,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":117,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":66}}}Content-Length: 341

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67},"contentChanges":[{"range":{"start":{"line":14,"character":0},"end":{"line":15,"character":0}},"rangeLength":37,"text":"pinMode(fourthKeyPin, INPUT_PULLUP);  \n"}]}}Content-Length: 212

{"jsonrpc":"2.0","id":118,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":15}}}
>>>
Content-Length: 199

{"id":118,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":119,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":15}}}
>>>
Content-Length: 303

{"id":119,"result":{"contents":{"kind":"markdown","value":"### variable `thirdKeyPin`  \n\n---\nType: `int`  \nValue = `4`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint thirdKeyPin = 4\n```"},"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":21}}},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":120,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":17,"character":15}}}
>>>
Content-Length: 199

{"id":120,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":6,"character":4},"end":{"line":6,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":121,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":17,"character":15}}}
>>>
Content-Length: 301

{"id":121,"result":{"contents":{"kind":"markdown","value":"### variable `buzzerPin`  \n\n---\nType: `int`  \nValue = `10`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint buzzerPin = 10\n```"},"range":{"start":{"line":24,"character":10},"end":{"line":24,"character":19}}},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":122,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":16,"character":17}}}
>>>
Content-Length: 38

{"id":122,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":123,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":14}}}
>>>
Content-Length: 199

{"id":123,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":124,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":13}}}
>>>
Content-Length: 304

{"id":124,"result":{"contents":{"kind":"markdown","value":"### variable `fourthKeyPin`  \n\n---\nType: `int`  \nValue = `5`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint fourthKeyPin = 5\n```"},"range":{"start":{"line":21,"character":8},"end":{"line":21,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":125,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":14}}}
>>>
Content-Length: 304

{"id":125,"result":{"contents":{"kind":"markdown","value":"### variable `fourthKeyPin`  \n\n---\nType: `int`  \nValue = `5`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint fourthKeyPin = 5\n```"},"range":{"start":{"line":21,"character":8},"end":{"line":21,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":126,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":15}}}
>>>
Content-Length: 300

{"id":126,"result":[{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}},"kind":1},{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":20}},"kind":2},{"range":{"start":{"line":32,"character":25},"end":{"line":32,"character":37}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":127,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":15}}}
>>>
Content-Length: 199

{"id":127,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":128,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":14}}}
>>>
Content-Length: 304

{"id":128,"result":{"contents":{"kind":"markdown","value":"### variable `fourthKeyPin`  \n\n---\nType: `int`  \nValue = `5`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint fourthKeyPin = 5\n```"},"range":{"start":{"line":21,"character":8},"end":{"line":21,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":129,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":129,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":130,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":14}}}
>>>
Content-Length: 304

{"id":130,"result":{"contents":{"kind":"markdown","value":"### variable `fourthKeyPin`  \n\n---\nType: `int`  \nValue = `5`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint fourthKeyPin = 5\n```"},"range":{"start":{"line":21,"character":8},"end":{"line":21,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":131,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":36,"character":22},"end":{"line":36,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":131,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 212

{"jsonrpc":"2.0","id":132,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":19}}}
>>>
Content-Length: 199

{"id":132,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":6,"character":4},"end":{"line":6,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 207

{"jsonrpc":"2.0","id":133,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":16}}}
>>>
Content-Length: 304

{"id":133,"result":{"contents":{"kind":"markdown","value":"### variable `buzzerPin`  \n\n---\nType: `int`  \nValue = `10`  \nPassed as \\_pin (converted to uint8_t)  \n\n---\n```cpp\nint buzzerPin = 10\n```"},"range":{"start":{"line":43,"character":11},"end":{"line":43,"character":20}}},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 279

{"jsonrpc":"2.0","id":134,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":40,"character":2},"end":{"line":40,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":134,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":135,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":15}}}
>>>
Content-Length: 199

{"id":135,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":6,"character":4},"end":{"line":6,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":136,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":9}}}
>>>
Content-Length: 223

{"id":136,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":479,"character":5},"end":{"line":479,"character":11}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":137,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":8}}}
>>>
Content-Length: 223

{"id":137,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":479,"character":5},"end":{"line":479,"character":11}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":138,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":8}}}
>>>
Content-Length: 125

{"id":138,"result":[{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":139,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":8}}}
>>>
Content-Length: 223

{"id":139,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":479,"character":5},"end":{"line":479,"character":11}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 279

{"jsonrpc":"2.0","id":140,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":36,"character":8},"end":{"line":36,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":140,"result":[],"jsonrpc":"2.0"}Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":141,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"},"position":{"line":501,"character":8}}}
>>>
Content-Length: 38

{"id":141,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":142,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"},"position":{"line":501,"character":7}}}
>>>
Content-Length: 40

{"id":142,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":143,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"},"position":{"line":493,"character":15}}}
>>>
Content-Length: 224

{"id":143,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":479,"character":20},"end":{"line":479,"character":24}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 228

{"jsonrpc":"2.0","id":144,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"},"position":{"line":493,"character":15}}}
>>>
Content-Length: 268

{"id":144,"result":{"contents":{"kind":"markdown","value":"### param `_pin`  \n\n---\nType: `uint8_t`  \nPassed as pin  \n\n---\n```cpp\n// In noTone\nuint8_t _pin\n```"},"range":{"start":{"line":493,"character":15},"end":{"line":493,"character":19}}},"jsonrpc":"2.0"}
<<<
Content-Length: 233

{"jsonrpc":"2.0","id":145,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"},"position":{"line":491,"character":17}}}
>>>
Content-Length: 223

{"id":145,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":481,"character":9},"end":{"line":481,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}Content-Length: 212

{"jsonrpc":"2.0","id":146,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":24,"character":18}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 225

{"id":146,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","range":{"start":{"line":137,"character":14},"end":{"line":137,"character":21}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5951

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","languageId":"cpp","version":1,"text":"/*\n Print.cpp - Base class that provides print() and println()\n Copyright (c) 2008 David A. Mellis.  All right reserved.\n \n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n \n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n \n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n \n Modified 23 November 2006 by David A. Mellis\n Modified 03 August 2015 by Chuck Todd\n */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include \"Arduino.h\"\n\n#include \"Print.h\"\n\n// Public Methods //////////////////////////////////////////////////////////////\n\n/* default implementation: may be overridden */\nsize_t Print::write(const uint8_t *buffer, size_t size)\n{\n  size_t n = 0;\n  while (size--) {\n    if (write(*buffer++)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const __FlashStringHelper *ifsh)\n{\n  PGM_P p = reinterpret_cast<PGM_P>(ifsh);\n  size_t n = 0;\n  while (1) {\n    unsigned char c = pgm_read_byte(p++);\n    if (c == 0) break;\n    if (write(c)) n++;\n    else break;\n  }\n  return n;\n}\n\nsize_t Print::print(const String &s)\n{\n  return write(s.c_str(), s.length());\n}\n\nsize_t Print::print(const char str[])\n{\n  return write(str);\n}\n\nsize_t Print::print(char c)\n{\n  return write(c);\n}\n\nsize_t Print::print(unsigned char b, int base)\n{\n  return print((unsigned long) b, base);\n}\n\nsize_t Print::print(int n, int base)\n{\n  return print((long) n, base);\n}\n\nsize_t Print::print(unsigned int n, int base)\n{\n  return print((unsigned long) n, base);\n}\n\nsize_t Print::print(long n, int base)\n{\n  if (base == 0) {\n    return write(n);\n  } else if (base == 10) {\n    if (n < 0) {\n      int t = print('-');\n      n = -n;\n      return printNumber(n, 10) + t;\n    }\n    return printNumber(n, 10);\n  } else {\n    return printNumber(n, base);\n  }\n}\n\nsize_t Print::print(unsigned long n, int base)\n{\n  if (base == 0) return write(n);\n  else return printNumber(n, base);\n}\n\nsize_t Print::print(double n, int digits)\n{\n  return printFloat(n, digits);\n}\n\nsize_t Print::println(const __FlashStringHelper *ifsh)\n{\n  size_t n = print(ifsh);\n  n += println();\n  return n;\n}\n\nsize_t Print::print(const Printable& x)\n{\n  return x.printTo(*this);\n}\n\nsize_t Print::println(void)\n{\n  return write(\"\\r\\n\");\n}\n\nsize_t Print::println(const String &s)\n{\n  size_t n = print(s);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const char c[])\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(char c)\n{\n  size_t n = print(c);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned char b, int base)\n{\n  size_t n = print(b, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned int num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(unsigned long num, int base)\n{\n  size_t n = print(num, base);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(double num, int digits)\n{\n  size_t n = print(num, digits);\n  n += println();\n  return n;\n}\n\nsize_t Print::println(const Printable& x)\n{\n  size_t n = print(x);\n  n += println();\n  return n;\n}\n\n// Private Methods /////////////////////////////////////////////////////////////\n\nsize_t Print::printNumber(unsigned long n, uint8_t base)\n{\n  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.\n  char *str = &buf[sizeof(buf) - 1];\n\n  *str = '\\0';\n\n  // prevent crash if called with base == 1\n  if (base < 2) base = 10;\n\n  do {\n    char c = n % base;\n    n /= base;\n\n    *--str = c < 10 ? c + '0' : c + 'A' - 10;\n  } while(n);\n\n  return write(str);\n}\n\nsize_t Print::printFloat(double number, uint8_t digits) \n{ \n  size_t n = 0;\n  \n  if (isnan(number)) return print(\"nan\");\n  if (isinf(number)) return print(\"inf\");\n  if (number > 4294967040.0) return print (\"ovf\");  // constant determined empirically\n  if (number <-4294967040.0) return print (\"ovf\");  // constant determined empirically\n  \n  // Handle negative numbers\n  if (number < 0.0)\n  {\n     n += print('-');\n     number = -number;\n  }\n\n  // Round correctly so that print(1.999, 2) prints as \"2.00\"\n  double rounding = 0.5;\n  for (uint8_t i=0; i<digits; ++i)\n    rounding /= 10.0;\n  \n  number += rounding;\n\n  // Extract the integer part of the number and print it\n  unsigned long int_part = (unsigned long)number;\n  double remainder = number - (double)int_part;\n  n += print(int_part);\n\n  // Print the decimal point, but only if there are digits beyond\n  if (digits > 0) {\n    n += print('.'); \n  }\n\n  // Extract digits from the remainder one at a time\n  while (digits-- > 0)\n  {\n    remainder *= 10.0;\n    unsigned int toPrint = (unsigned int)(remainder);\n    n += print(toPrint);\n    remainder -= toPrint; \n  } \n  \n  return n;\n}\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Print.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":147,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":25}}}
>>>
Content-Length: 222

{"id":147,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":242,"character":5},"end":{"line":242,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":148,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":24,"character":24},"end":{"line":24,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":148,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 212

{"jsonrpc":"2.0","id":149,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":21}}}
>>>
Content-Length: 38

{"id":149,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 211

{"jsonrpc":"2.0","id":150,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":9}}}
>>>
Content-Length: 222

{"id":150,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":242,"character":5},"end":{"line":242,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":151,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":8}}}
>>>
Content-Length: 389

{"id":151,"result":[{"range":{"start":{"line":25,"character":6},"end":{"line":25,"character":10}},"kind":1},{"range":{"start":{"line":28,"character":6},"end":{"line":28,"character":10}},"kind":1},{"range":{"start":{"line":31,"character":6},"end":{"line":31,"character":10}},"kind":1},{"range":{"start":{"line":34,"character":6},"end":{"line":34,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":152,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":8}}}
>>>
Content-Length: 222

{"id":152,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":242,"character":5},"end":{"line":242,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":153,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":8},"end":{"line":31,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":153,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":154,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":8}}}
>>>
Content-Length: 222

{"id":154,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":242,"character":5},"end":{"line":242,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 232

{"jsonrpc":"2.0","id":155,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"},"position":{"line":259,"character":8}}}
>>>
Content-Length: 224

{"id":155,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":246,"character":11},"end":{"line":246,"character":14}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 227

{"jsonrpc":"2.0","id":156,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"},"position":{"line":259,"character":8}}}
>>>
Content-Length: 269

{"id":156,"result":{"contents":{"kind":"markdown","value":"### variable `ocr`  \n\n---\nType: `uint32_t`  \nValue = `0`  \n\n---\n```cpp\n// In tone\nuint32_t ocr = 0\n```"},"range":{"start":{"line":259,"character":6},"end":{"line":259,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":157,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":27},"end":{"line":34,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":157,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 207

{"jsonrpc":"2.0","id":158,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":16,"character":23}}}
>>>
Content-Length: 40

{"id":158,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67}}}Content-Length: 207

{"jsonrpc":"2.0","id":159,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":22}}}
>>>
Content-Length: 315

{"id":159,"result":{"contents":{"kind":"markdown","value":"### instance-method `println`  \n\n---\nâ†’ `size_t`  \nParameters:  \n- `const char *`\n\n---\n```cpp\n// In Print\npublic: size_t println(const char[])\n```"},"range":{"start":{"line":40,"character":22},"end":{"line":40,"character":23}}},"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":160,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":23}}}
>>>
Content-Length: 38

{"id":160,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":161,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":22},"end":{"line":34,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 399

{"id":161,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":34,"character":22},"end":{"line":34,"character":25}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":162,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":23}}}
>>>
Content-Length: 40

{"id":162,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":163,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":17}}}
>>>
Content-Length: 287

{"id":163,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":36,"character":13},"end":{"line":36,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":68},"contentChanges":[{"range":{"start":{"line":34,"character":22},"end":{"line":34,"character":25}},"rangeLength":3,"text":"4"}]}}Content-Length: 281

{"jsonrpc":"2.0","id":164,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":23},"end":{"line":34,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":164,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":69},"contentChanges":[{"range":{"start":{"line":34,"character":23},"end":{"line":34,"character":23}},"rangeLength":0,"text":"0"}]}}Content-Length: 281

{"jsonrpc":"2.0","id":165,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":24},"end":{"line":34,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":165,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":69}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":70},"contentChanges":[{"range":{"start":{"line":34,"character":23},"end":{"line":34,"character":24}},"rangeLength":1,"text":""}]}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":71},"contentChanges":[{"range":{"start":{"line":34,"character":23},"end":{"line":34,"character":23}},"rangeLength":0,"text":"6"}]}}Content-Length: 281

{"jsonrpc":"2.0","id":166,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":24},"end":{"line":34,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":166,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":71}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":72},"contentChanges":[{"range":{"start":{"line":34,"character":23},"end":{"line":34,"character":24}},"rangeLength":1,"text":""}]}}Content-Length: 281

{"jsonrpc":"2.0","id":167,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":23},"end":{"line":34,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":167,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":73},"contentChanges":[{"range":{"start":{"line":34,"character":23},"end":{"line":34,"character":23}},"rangeLength":0,"text":"0"}]}}Content-Length: 281

{"jsonrpc":"2.0","id":168,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":24},"end":{"line":34,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":168,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":73}}}Content-Length: 411

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":75},"contentChanges":[{"range":{"start":{"line":34,"character":23},"end":{"line":34,"character":24}},"rangeLength":1,"text":""},{"range":{"start":{"line":34,"character":22},"end":{"line":34,"character":23}},"rangeLength":1,"text":"460"}]}}Content-Length: 281

{"jsonrpc":"2.0","id":169,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":22},"end":{"line":34,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 399

{"id":169,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":34,"character":22},"end":{"line":34,"character":25}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":75}}}Content-Length: 219

{"jsonrpc":"2.0","id":170,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":22}}}
>>>
Content-Length: 38

{"id":170,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":171,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":22},"end":{"line":34,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":171,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":172,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":25},"end":{"line":34,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":172,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":76},"contentChanges":[{"range":{"start":{"line":34,"character":24},"end":{"line":34,"character":25}},"rangeLength":1,"text":""}]}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":77},"contentChanges":[{"range":{"start":{"line":34,"character":23},"end":{"line":34,"character":24}},"rangeLength":1,"text":""}]}}Content-Length: 281

{"jsonrpc":"2.0","id":173,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":23},"end":{"line":34,"character":23}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":173,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":78},"contentChanges":[{"range":{"start":{"line":34,"character":23},"end":{"line":34,"character":23}},"rangeLength":0,"text":"5"}]}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79},"contentChanges":[{"range":{"start":{"line":34,"character":24},"end":{"line":34,"character":24}},"rangeLength":0,"text":"8"}]}}Content-Length: 281

{"jsonrpc":"2.0","id":174,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":25},"end":{"line":34,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":174,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":175,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":16}}}
>>>
Content-Length: 231

{"id":175,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","range":{"start":{"line":164,"character":4},"end":{"line":164,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5578

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out &= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) && defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) && defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out &= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) & bit) return HIGH;\n\treturn LOW;\n}\n"}}}Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}}
>>>
Content-Length: 201

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 212

{"jsonrpc":"2.0","id":176,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":23,"character":25}}}
>>>
Content-Length: 199

{"id":176,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":1,"character":4},"end":{"line":1,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 212

{"jsonrpc":"2.0","id":177,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":30}}}
>>>
Content-Length: 199

{"id":177,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":2,"character":4},"end":{"line":2,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 212

{"jsonrpc":"2.0","id":178,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":21}}}
>>>
Content-Length: 231

{"id":178,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","range":{"start":{"line":164,"character":4},"end":{"line":164,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 5578

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out &= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) && defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) && defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out &= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) & bit) return HIGH;\n\treturn LOW;\n}\n"}}}Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}}
>>>
Content-Length: 201

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":179,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":20}}}
>>>
Content-Length: 38

{"id":179,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 212

{"jsonrpc":"2.0","id":180,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":26}}}
>>>
Content-Length: 199

{"id":180,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 212

{"jsonrpc":"2.0","id":181,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":25}}}
>>>
Content-Length: 222

{"id":181,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":242,"character":5},"end":{"line":242,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 207

{"jsonrpc":"2.0","id":182,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":23}}}
>>>
Content-Length: 40

{"id":182,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 212

{"jsonrpc":"2.0","id":183,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":22}}}
>>>
Content-Length: 231

{"id":183,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","range":{"start":{"line":164,"character":4},"end":{"line":164,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5578

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out &= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) && defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) && defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out &= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) & bit) return HIGH;\n\treturn LOW;\n}\n"}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}}
>>>
Content-Length: 201

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 207

{"jsonrpc":"2.0","id":184,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":21}}}
>>>
Content-Length: 287

{"id":184,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":33,"character":13},"end":{"line":33,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 212

{"jsonrpc":"2.0","id":185,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":25}}}
>>>
Content-Length: 199

{"id":185,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":2,"character":4},"end":{"line":2,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 212

{"jsonrpc":"2.0","id":186,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":25}}}
>>>
Content-Length: 222

{"id":186,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":242,"character":5},"end":{"line":242,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 207

{"jsonrpc":"2.0","id":187,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":25}}}
>>>
Content-Length: 447

{"id":187,"result":{"contents":{"kind":"markdown","value":"### function `tone`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t _pin`\n- `unsigned int frequency`\n- `unsigned long duration = 0`\n\nfrequency (in hertz) and duration (in milliseconds).  \n\n---\n```cpp\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0)\n```"},"range":{"start":{"line":32,"character":25},"end":{"line":32,"character":26}}},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 207

{"jsonrpc":"2.0","id":188,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":24}}}
>>>
Content-Length: 40

{"id":188,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 212

{"jsonrpc":"2.0","id":189,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":24}}}
>>>
Content-Length: 231

{"id":189,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","range":{"start":{"line":164,"character":4},"end":{"line":164,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5578

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out &= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) && defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) && defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out &= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) & bit) return HIGH;\n\treturn LOW;\n}\n"}}}Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}}
>>>
Content-Length: 201

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 212

{"jsonrpc":"2.0","id":190,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":25}}}
>>>
Content-Length: 222

{"id":190,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","range":{"start":{"line":242,"character":5},"end":{"line":242,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 15868

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","languageId":"cpp","version":1,"text":"/* Tone.cpp\n\n  A Tone Generator Library\n\n  Written by Brett Hagman\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nVersion Modified By Date     Comments\n------- ----------- -------- --------\n0001    B Hagman    09/08/02 Initial coding\n0002    B Hagman    09/08/18 Multiple pins\n0003    B Hagman    09/08/18 Moved initialization from constructor to begin()\n0004    B Hagman    09/09/26 Fixed problems with ATmega8\n0005    B Hagman    09/11/23 Scanned prescalars for best fit on 8 bit timers\n                    09/11/25 Changed pin toggle method to XOR\n                    09/11/25 Fixed timer0 from being excluded\n0006    D Mellis    09/12/29 Replaced objects with functions\n0007    M Sproul    10/08/29 Changed #ifdefs from cpu to register\n0008    S Kanemoto  12/06/22 Fixed for Leonardo by @maris_HY\n0009    J Reucker   15/04/10 Issue #292 Fixed problems with ATmega8 (thanks to Pete62)\n0010    jipp        15/04/13 added additional define check #2923\n*************************************************/\n\n#include <avr/interrupt.h>\n#include <avr/pgmspace.h>\n#include \"Arduino.h\"\n#include \"pins_arduino.h\"\n\n#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega128__)\n#define TCCR2A TCCR2\n#define TCCR2B TCCR2\n#define COM2A1 COM21\n#define COM2A0 COM20\n#define OCR2A OCR2\n#define TIMSK2 TIMSK\n#define OCIE2A OCIE2\n#define TIMER2_COMPA_vect TIMER2_COMP_vect\n#define TIMSK1 TIMSK\n#endif\n\n// timerx_toggle_count:\n//  > 0 - duration specified\n//  = 0 - stopped\n//  < 0 - infinitely (until stop() method called, or new play() called)\n\n#if !defined(__AVR_ATmega8__)\nvolatile long timer0_toggle_count;\nvolatile uint8_t *timer0_pin_port;\nvolatile uint8_t timer0_pin_mask;\n#endif\n\nvolatile long timer1_toggle_count;\nvolatile uint8_t *timer1_pin_port;\nvolatile uint8_t timer1_pin_mask;\nvolatile long timer2_toggle_count;\nvolatile uint8_t *timer2_pin_port;\nvolatile uint8_t timer2_pin_mask;\n\n#if defined(TIMSK3)\nvolatile long timer3_toggle_count;\nvolatile uint8_t *timer3_pin_port;\nvolatile uint8_t timer3_pin_mask;\n#endif\n\n#if defined(TIMSK4)\nvolatile long timer4_toggle_count;\nvolatile uint8_t *timer4_pin_port;\nvolatile uint8_t timer4_pin_mask;\n#endif\n\n#if defined(TIMSK5)\nvolatile long timer5_toggle_count;\nvolatile uint8_t *timer5_pin_port;\nvolatile uint8_t timer5_pin_mask;\n#endif\n\n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 3, 4, 5, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255, 255, 255, 255 */ };\n\n#elif defined(__AVR_ATmega8__)\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n\n#elif defined(__AVR_ATmega32U4__)\n \n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER3\n \nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 /*, 1 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255 */ };\n \n#else\n\n#define AVAILABLE_TONE_PINS 1\n#define USE_TIMER2\n\n// Leave timer 0 to last.\nconst uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 /*, 1, 0 */ };\nstatic uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 /*, 255, 255 */ };\n\n#endif\n\n\n\nstatic int8_t toneBegin(uint8_t _pin)\n{\n  int8_t _timer = -1;\n\n  // if we're already using the pin, the timer should be configured.  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      return pgm_read_byte(tone_pin_to_timer_PGM + i);\n    }\n  }\n  \n  // search for an unused timer.\n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == 255) {\n      tone_pins[i] = _pin;\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      break;\n    }\n  }\n  \n  if (_timer != -1)\n  {\n    // Set timer specific stuff\n    // All timers in CTC mode\n    // 8 bit timers will require changing prescalar values,\n    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar\n    switch (_timer)\n    {\n      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)\n      case 0:\n        // 8 bit timer\n        TCCR0A = 0;\n        TCCR0B = 0;\n        bitWrite(TCCR0A, WGM01, 1);\n        bitWrite(TCCR0B, CS00, 1);\n        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer0_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)\n      case 1:\n        // 16 bit timer\n        TCCR1A = 0;\n        TCCR1B = 0;\n        bitWrite(TCCR1B, WGM12, 1);\n        bitWrite(TCCR1B, CS10, 1);\n        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer1_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR2A) && defined(TCCR2B)\n      case 2:\n        // 8 bit timer\n        TCCR2A = 0;\n        TCCR2B = 0;\n        bitWrite(TCCR2A, WGM21, 1);\n        bitWrite(TCCR2B, CS20, 1);\n        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer2_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)\n      case 3:\n        // 16 bit timer\n        TCCR3A = 0;\n        TCCR3B = 0;\n        bitWrite(TCCR3B, WGM32, 1);\n        bitWrite(TCCR3B, CS30, 1);\n        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer3_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)\n      case 4:\n        // 16 bit timer\n        TCCR4A = 0;\n        TCCR4B = 0;\n        #if defined(WGM42)\n          bitWrite(TCCR4B, WGM42, 1);\n        #elif defined(CS43)\n          // TODO this may not be correct\n          // atmega32u4\n          bitWrite(TCCR4B, CS43, 1);\n        #endif\n        bitWrite(TCCR4B, CS40, 1);\n        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer4_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n\n      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)\n      case 5:\n        // 16 bit timer\n        TCCR5A = 0;\n        TCCR5B = 0;\n        bitWrite(TCCR5B, WGM52, 1);\n        bitWrite(TCCR5B, CS50, 1);\n        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));\n        timer5_pin_mask = digitalPinToBitMask(_pin);\n        break;\n      #endif\n    }\n  }\n\n  return _timer;\n}\n\n\n\n// frequency (in hertz) and duration (in milliseconds).\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration)\n{\n  uint8_t prescalarbits = 0b001;\n  long toggle_count = 0;\n  uint32_t ocr = 0;\n  int8_t _timer;\n\n  _timer = toneBegin(_pin);\n\n  if (_timer >= 0)\n  {\n    // Set the pinMode as OUTPUT\n    pinMode(_pin, OUTPUT);\n    \n    // if we are using an 8 bit timer, scan through prescalars to find the best fit\n    if (_timer == 0 || _timer == 2)\n    {\n      ocr = F_CPU / frequency / 2 - 1;\n      prescalarbits = 0b001;  // ck/1: same for both timers\n      if (ocr > 255)\n      {\n        ocr = F_CPU / frequency / 2 / 8 - 1;\n        prescalarbits = 0b010;  // ck/8: same for both timers\n\n        if (_timer == 2 && ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 32 - 1;\n          prescalarbits = 0b011;\n        }\n\n        if (ocr > 255)\n        {\n          ocr = F_CPU / frequency / 2 / 64 - 1;\n          prescalarbits = _timer == 0 ? 0b011 : 0b100;\n\n          if (_timer == 2 && ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 128 - 1;\n            prescalarbits = 0b101;\n          }\n\n          if (ocr > 255)\n          {\n            ocr = F_CPU / frequency / 2 / 256 - 1;\n            prescalarbits = _timer == 0 ? 0b100 : 0b110;\n            if (ocr > 255)\n            {\n              // can't do any better than /1024\n              ocr = F_CPU / frequency / 2 / 1024 - 1;\n              prescalarbits = _timer == 0 ? 0b101 : 0b111;\n            }\n          }\n        }\n      }\n\n#if defined(TCCR0B)\n      if (_timer == 0)\n      {\n        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;\n      }\n      else\n#endif\n#if defined(TCCR2B)\n      {\n        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;\n      }\n#else\n      {\n        // dummy place holder to make the above ifdefs work\n      }\n#endif\n    }\n    else\n    {\n      // two choices for the 16 bit timers: ck/1 or ck/64\n      ocr = F_CPU / frequency / 2 - 1;\n\n      prescalarbits = 0b001;\n      if (ocr > 0xffff)\n      {\n        ocr = F_CPU / frequency / 2 / 64 - 1;\n        prescalarbits = 0b011;\n      }\n\n      if (_timer == 1)\n      {\n#if defined(TCCR1B)\n        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;\n#endif\n      }\n#if defined(TCCR3B)\n      else if (_timer == 3)\n        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR4B)\n      else if (_timer == 4)\n        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;\n#endif\n#if defined(TCCR5B)\n      else if (_timer == 5)\n        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;\n#endif\n\n    }\n    \n\n    // Calculate the toggle count\n    if (duration > 0)\n    {\n      toggle_count = 2 * frequency * duration / 1000;\n    }\n    else\n    {\n      toggle_count = -1;\n    }\n\n    // Set the OCR for the given timer,\n    // set the toggle count,\n    // then turn on the interrupts\n    switch (_timer)\n    {\n\n#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)\n      case 0:\n        OCR0A = ocr;\n        timer0_toggle_count = toggle_count;\n        bitWrite(TIMSK0, OCIE0A, 1);\n        break;\n#endif\n\n      case 1:\n#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK1, OCIE1A, 1);\n#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)\n        // this combination is for at least the ATmega32\n        OCR1A = ocr;\n        timer1_toggle_count = toggle_count;\n        bitWrite(TIMSK, OCIE1A, 1);\n#endif\n        break;\n\n#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)\n      case 2:\n        OCR2A = ocr;\n        timer2_toggle_count = toggle_count;\n        bitWrite(TIMSK2, OCIE2A, 1);\n        break;\n#endif\n\n#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)\n      case 3:\n        OCR3A = ocr;\n        timer3_toggle_count = toggle_count;\n        bitWrite(TIMSK3, OCIE3A, 1);\n        break;\n#endif\n\n#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)\n      case 4:\n        OCR4A = ocr;\n        timer4_toggle_count = toggle_count;\n        bitWrite(TIMSK4, OCIE4A, 1);\n        break;\n#endif\n\n#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)\n      case 5:\n        OCR5A = ocr;\n        timer5_toggle_count = toggle_count;\n        bitWrite(TIMSK5, OCIE5A, 1);\n        break;\n#endif\n\n    }\n  }\n}\n\n\n// XXX: this function only works properly for timer 2 (the only one we use\n// currently).  for the others, it should end the tone, but won't restore\n// proper PWM functionality for the timer.\nvoid disableTimer(uint8_t _timer)\n{\n  switch (_timer)\n  {\n    case 0:\n      #if defined(TIMSK0)\n        TIMSK0 = 0;\n      #elif defined(TIMSK)\n        TIMSK = 0; // atmega32\n      #endif\n      break;\n\n#if defined(TIMSK1) && defined(OCIE1A)\n    case 1:\n      bitWrite(TIMSK1, OCIE1A, 0);\n      break;\n#endif\n\n    case 2:\n      #if defined(TIMSK2) && defined(OCIE2A)\n        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt\n      #endif\n      #if defined(TCCR2A) && defined(WGM20)\n        TCCR2A = (1 << WGM20);\n      #endif\n      #if defined(TCCR2B) && defined(CS22)\n        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);\n      #endif\n      #if defined(OCR2A)\n        OCR2A = 0;\n      #endif\n      break;\n\n#if defined(TIMSK3) && defined(OCIE3A)\n    case 3:\n      bitWrite(TIMSK3, OCIE3A, 0);\n      break;\n#endif\n\n#if defined(TIMSK4) && defined(OCIE4A)\n    case 4:\n      bitWrite(TIMSK4, OCIE4A, 0);\n      break;\n#endif\n\n#if defined(TIMSK5) && defined(OCIE5A)\n    case 5:\n      bitWrite(TIMSK5, OCIE5A, 0);\n      break;\n#endif\n  }\n}\n\n\nvoid noTone(uint8_t _pin)\n{\n  int8_t _timer = -1;\n  \n  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {\n    if (tone_pins[i] == _pin) {\n      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);\n      tone_pins[i] = 255;\n      break;\n    }\n  }\n  \n  disableTimer(_timer);\n\n  digitalWrite(_pin, 0);\n}\n\n#ifdef USE_TIMER0\nISR(TIMER0_COMPA_vect)\n{\n  if (timer0_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer0_pin_port ^= timer0_pin_mask;\n\n    if (timer0_toggle_count > 0)\n      timer0_toggle_count--;\n  }\n  else\n  {\n    disableTimer(0);\n    *timer0_pin_port &= ~(timer0_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER1\nISR(TIMER1_COMPA_vect)\n{\n  if (timer1_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer1_pin_port ^= timer1_pin_mask;\n\n    if (timer1_toggle_count > 0)\n      timer1_toggle_count--;\n  }\n  else\n  {\n    disableTimer(1);\n    *timer1_pin_port &= ~(timer1_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER2\nISR(TIMER2_COMPA_vect)\n{\n\n  if (timer2_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer2_pin_port ^= timer2_pin_mask;\n\n    if (timer2_toggle_count > 0)\n      timer2_toggle_count--;\n  }\n  else\n  {\n    // need to call noTone() so that the tone_pins[] entry is reset, so the\n    // timer gets initialized next time we call tone().\n    // XXX: this assumes timer 2 is always the first one used.\n    noTone(tone_pins[0]);\n//    disableTimer(2);\n//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER3\nISR(TIMER3_COMPA_vect)\n{\n  if (timer3_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer3_pin_port ^= timer3_pin_mask;\n\n    if (timer3_toggle_count > 0)\n      timer3_toggle_count--;\n  }\n  else\n  {\n    disableTimer(3);\n    *timer3_pin_port &= ~(timer3_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER4\nISR(TIMER4_COMPA_vect)\n{\n  if (timer4_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer4_pin_port ^= timer4_pin_mask;\n\n    if (timer4_toggle_count > 0)\n      timer4_toggle_count--;\n  }\n  else\n  {\n    disableTimer(4);\n    *timer4_pin_port &= ~(timer4_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n\n\n#ifdef USE_TIMER5\nISR(TIMER5_COMPA_vect)\n{\n  if (timer5_toggle_count != 0)\n  {\n    // toggle the pin\n    *timer5_pin_port ^= timer5_pin_mask;\n\n    if (timer5_toggle_count > 0)\n      timer5_toggle_count--;\n  }\n  else\n  {\n    disableTimer(5);\n    *timer5_pin_port &= ~(timer5_pin_mask);  // keep pin low after stop\n  }\n}\n#endif\n"}}}Content-Length: 183

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp"}}}
>>>
Content-Length: 193

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Tone.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 207

{"jsonrpc":"2.0","id":191,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":25}}}
>>>
Content-Length: 447

{"id":191,"result":{"contents":{"kind":"markdown","value":"### function `tone`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t _pin`\n- `unsigned int frequency`\n- `unsigned long duration = 0`\n\nfrequency (in hertz) and duration (in milliseconds).  \n\n---\n```cpp\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0)\n```"},"range":{"start":{"line":35,"character":25},"end":{"line":35,"character":26}}},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 207

{"jsonrpc":"2.0","id":192,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":25}}}
>>>
Content-Length: 447

{"id":192,"result":{"contents":{"kind":"markdown","value":"### function `tone`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t _pin`\n- `unsigned int frequency`\n- `unsigned long duration = 0`\n\nfrequency (in hertz) and duration (in milliseconds).  \n\n---\n```cpp\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0)\n```"},"range":{"start":{"line":35,"character":25},"end":{"line":35,"character":26}}},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 211

{"jsonrpc":"2.0","id":193,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":7}}}
>>>
Content-Length: 233

{"id":193,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp","range":{"start":{"line":69,"character":17},"end":{"line":69,"character":23}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 2931

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp","languageId":"cpp","version":1,"text":"/*\n  HardwareSerial0.cpp - Hardware serial library for Wiring\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 23 November 2006 by David A. Mellis\n  Modified 28 September 2010 by Mark Sproul\n  Modified 14 August 2012 by Alarus\n  Modified 3 December 2013 by Matthijs Kooijman\n*/\n\n#include \"Arduino.h\"\n#include \"HardwareSerial.h\"\n#include \"HardwareSerial_private.h\"\n\n// Each HardwareSerial is defined in its own file, since the linker pulls\n// in the entire file when any element inside is used. --gc-sections can\n// additionally cause unused symbols to be dropped, but ISRs have the\n// \"used\" attribute so are never dropped and they keep the\n// HardwareSerial instance in as well. Putting each instance in its own\n// file prevents the linker from pulling in any unused instances in the\n// first place.\n\n#if defined(HAVE_HWSERIAL0)\n\n#if defined(USART_RX_vect)\n  ISR(USART_RX_vect)\n#elif defined(USART0_RX_vect)\n  ISR(USART0_RX_vect)\n#elif defined(USART_RXC_vect)\n  ISR(USART_RXC_vect) // ATmega8\n#else\n  #error \"Don't know what the Data Received vector is called for Serial\"\n#endif\n  {\n    Serial._rx_complete_irq();\n  }\n\n#if defined(UART0_UDRE_vect)\nISR(UART0_UDRE_vect)\n#elif defined(UART_UDRE_vect)\nISR(UART_UDRE_vect)\n#elif defined(USART0_UDRE_vect)\nISR(USART0_UDRE_vect)\n#elif defined(USART_UDRE_vect)\nISR(USART_UDRE_vect)\n#else\n  #error \"Don't know what the Data Register Empty vector is called for Serial\"\n#endif\n{\n  Serial._tx_udr_empty_irq();\n}\n\n#if defined(UBRRH) && defined(UBRRL)\n  HardwareSerial Serial(&UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR);\n#else\n  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);\n#endif\n\n// Function that can be weakly referenced by serialEventRun to prevent\n// pulling in this file if it's not otherwise used.\nbool Serial0_available() {\n  return Serial.available();\n}\n\n#endif // HAVE_HWSERIAL0\n"}}}Content-Length: 194

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp"}}}
>>>
Content-Length: 204

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/HardwareSerial0.cpp","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 281

{"jsonrpc":"2.0","id":194,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":36,"character":22},"end":{"line":36,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":194,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":195,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":15}}}
>>>
Content-Length: 392

{"id":195,"result":[{"range":{"start":{"line":23,"character":6},"end":{"line":23,"character":17}},"kind":1},{"range":{"start":{"line":26,"character":13},"end":{"line":26,"character":24}},"kind":1},{"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":24}},"kind":1},{"range":{"start":{"line":32,"character":13},"end":{"line":32,"character":24}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":196,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":15},"end":{"line":32,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":196,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":197,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":38,"character":1},"end":{"line":38,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":197,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 281

{"jsonrpc":"2.0","id":198,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":24,"character":24},"end":{"line":24,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":198,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":199,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":23,"character":40},"end":{"line":23,"character":40}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":199,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":200,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":23,"character":40},"end":{"line":25,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":200,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":201,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":24,"character":24},"end":{"line":24,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":201,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":202,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":26,"character":12}}}
>>>
Content-Length: 40

{"id":202,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 60

{"jsonrpc":"2.0","id":203,"method":"shutdown","params":null}
>>>
Content-Length: 40

{"id":203,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":80372,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1266

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":1,"text":"\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\nint fourthKeyPin = 5;\n\nint buzzerPin = 10;\n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\npinMode(fourthKeyPin, INPUT_PULLUP);  \n\n  //set the buzzer pin as an output\n  pinMode(buzzerPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {\n    Serial.println(\"1\");\n      tone(buzzerPin, 262);\n  } else if (digitalRead(secondKeyPin) == LOW) {\n    Serial.println(\"2\");\n      tone(buzzerPin, 330);\n  } else if (digitalRead(thirdKeyPin) == LOW) {\n    Serial.println(\"3\");\n      tone(buzzerPin, 392);\n  } else if (digitalRead(fourthKeyPin) == LOW) {\n    Serial.println(\"4\");\n      tone(buzzerPin, 458);\n  } else {\n    noTone(buzzerPin);\n  }\n}\n\n/*\n  note  frequency\n  c     262 Hz\n  d     294 Hz\n  e     330 Hz\n  f     349 Hz\n  g     392 Hz\n  a     440 Hz\n  b     494 Hz\n  C     523 Hz\n*/\n"}}}Content-Length: 279

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":23,"character":39},"end":{"line":23,"character":39}},"context":{"diagnostics":[]}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 210

{"jsonrpc":"2.0","id":2,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":23}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 205

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":22}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}Content-Length: 38

{"id":3,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/26","percentage":3.8461538461538463,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/26","percentage":7.6923076923076925,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/26","percentage":11.538461538461538,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/26","percentage":11.538461538461538,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/26","percentage":15.384615384615385,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/26","percentage":19.23076923076923,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/26","percentage":19.23076923076923,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/26","percentage":23.076923076923077,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/26","percentage":26.923076923076923,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/26","percentage":26.923076923076923,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/26","percentage":30.76923076923077,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/26","percentage":30.76923076923077,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/26","percentage":34.61538461538461,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/26","percentage":34.61538461538461,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/26","percentage":38.46153846153846,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/26","percentage":38.46153846153846,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/26","percentage":42.30769230769231,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/26","percentage":42.30769230769231,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/26","percentage":46.15384615384615,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/26","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/26","percentage":53.84615384615385,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/26","percentage":53.84615384615385,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/26","percentage":57.69230769230769,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/26","percentage":57.69230769230769,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/26","percentage":61.53846153846154,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/26","percentage":65.38461538461539,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/26","percentage":65.38461538461539,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/26","percentage":69.23076923076923,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/26","percentage":69.23076923076923,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/26","percentage":73.07692307692308,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/26","percentage":76.92307692307692,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/26","percentage":80.76923076923077,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/26","percentage":84.61538461538461,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/26","percentage":88.46153846153847,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/26","percentage":92.3076923076923,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/26","percentage":96.15384615384616,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":4,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":17,"character":27}}}
>>>
Content-Length: 220

{"id":4,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":43,"character":8},"end":{"line":43,"character":14}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":5,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":34}}}
>>>
Content-Length: 220

{"id":5,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":44,"character":8},"end":{"line":44,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":6,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":12,"character":35}}}
>>>
Content-Length: 220

{"id":6,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":44,"character":8},"end":{"line":44,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 277

{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":19},"end":{"line":6,"character":19}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":7,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":8,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":10,"character":33}}}
>>>
Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":10,"character":33},"end":{"line":10,"character":33}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":9,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":10,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":16,"character":35}}}
>>>
Content-Length: 37

{"id":10,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":16,"character":35},"end":{"line":16,"character":35}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":11,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 211

{"jsonrpc":"2.0","id":12,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":20}}}
>>>
Content-Length: 37

{"id":12,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":13,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":19}}}
>>>
Content-Length: 198

{"id":13,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":6,"character":4},"end":{"line":6,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 211

{"jsonrpc":"2.0","id":14,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":13}}}
>>>
Content-Length: 198

{"id":14,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":6,"character":4},"end":{"line":6,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":15,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":14}}}
>>>
Content-Length: 656

{"id":15,"result":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":13}},"kind":1},{"range":{"start":{"line":17,"character":10},"end":{"line":17,"character":19}},"kind":2},{"range":{"start":{"line":25,"character":11},"end":{"line":25,"character":20}},"kind":2},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"kind":2},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"kind":2},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"kind":2},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":16,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":14}}}
>>>
Content-Length: 198

{"id":16,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":6,"character":4},"end":{"line":6,"character":13}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":17,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"jsonrpc":"2.0","id":18,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":6,"character":6}}}
>>>
Content-Length: 656

{"id":18,"result":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":13}},"kind":1},{"range":{"start":{"line":17,"character":10},"end":{"line":17,"character":19}},"kind":2},{"range":{"start":{"line":25,"character":11},"end":{"line":25,"character":20}},"kind":2},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"kind":2},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"kind":2},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"kind":2},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":19,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":19,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":6,"character":5}}}
>>>
Content-Length: 257

{"id":20,"result":{"contents":{"kind":"markdown","value":"### variable `buzzerPin`  \n\n---\nType: `int`  \nValue = `10`  \n\n---\n```cpp\nint buzzerPin = 10\n```"},"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":2},"contentChanges":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":13}},"rangeLength":9,"text":"r"}]}}Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":3},"contentChanges":[{"range":{"start":{"line":6,"character":5},"end":{"line":6,"character":5}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":17,"character":10},"end":{"line":17,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":25,"character":11},"end":{"line":25,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":4},"contentChanges":[{"range":{"start":{"line":6,"character":6},"end":{"line":6,"character":6}},"rangeLength":0,"text":"d"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":17,"character":10},"end":{"line":17,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":25,"character":11},"end":{"line":25,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"jsonrpc":"2.0","id":21,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":7},"end":{"line":6,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":21,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":4}}}Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":5},"contentChanges":[{"range":{"start":{"line":6,"character":7},"end":{"line":6,"character":7}},"rangeLength":0,"text":"P"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":17,"character":10},"end":{"line":17,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":25,"character":11},"end":{"line":25,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":6},"contentChanges":[{"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":8}},"rangeLength":0,"text":"i"}]}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":7},"contentChanges":[{"range":{"start":{"line":6,"character":9},"end":{"line":6,"character":9}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":17,"character":10},"end":{"line":17,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":25,"character":11},"end":{"line":25,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":10},"end":{"line":6,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":22,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":7}}}Content-Length: 278

{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":16},"end":{"line":6,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":23,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":24,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":6,"character":15}}}
>>>
Content-Length: 37

{"id":24,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":15},"end":{"line":6,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":25,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":8},"contentChanges":[{"range":{"start":{"line":6,"character":14},"end":{"line":6,"character":15}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/2","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/2","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 142

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/2","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":17,"character":10},"end":{"line":17,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":25,"character":11},"end":{"line":25,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":9},"contentChanges":[{"range":{"start":{"line":6,"character":14},"end":{"line":6,"character":14}},"rangeLength":0,"text":"9"}]}}
>>>
Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":17,"character":10},"end":{"line":17,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":25,"character":11},"end":{"line":25,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":16},"end":{"line":6,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":26,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":9}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":10},"contentChanges":[{"range":{"start":{"line":6,"character":16},"end":{"line":6,"character":16}},"rangeLength":0,"text":"\n"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":10}}}Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":11},"contentChanges":[{"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":0}},"rangeLength":0,"text":"b"}]}}
>>>
Content-Length: 1484

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'b'"},{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":12},"contentChanges":[{"range":{"start":{"line":7,"character":1},"end":{"line":7,"character":1}},"rangeLength":0,"text":"l"}]}}
>>>
Content-Length: 1485

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":2}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'bl'"},{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":13},"contentChanges":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":2}},"rangeLength":0,"text":"u"}]}}
>>>
Content-Length: 1486

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":3}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'blu'"},{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":14},"contentChanges":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":3}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1485

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":2}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'bl'"},{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":15},"contentChanges":[{"range":{"start":{"line":7,"character":1},"end":{"line":7,"character":2}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1484

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'b'"},{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":16},"contentChanges":[{"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":1}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":17},"contentChanges":[{"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":0}},"rangeLength":0,"text":"i"}]}}
>>>
Content-Length: 1484

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'i'"},{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":18},"contentChanges":[{"range":{"start":{"line":7,"character":1},"end":{"line":7,"character":1}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 1485

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":2}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'in'"},{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":19},"contentChanges":[{"range":{"start":{"line":7,"character":2},"end":{"line":7,"character":2}},"rangeLength":0,"text":"t"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":20},"contentChanges":[{"range":{"start":{"line":7,"character":3},"end":{"line":7,"character":3}},"rangeLength":0,"text":" "}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":21},"contentChanges":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":4}},"rangeLength":0,"text":"b"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":22},"contentChanges":[{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":5}},"rangeLength":0,"text":"l"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":23},"contentChanges":[{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":6}},"rangeLength":0,"text":"u"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":24},"contentChanges":[{"range":{"start":{"line":7,"character":7},"end":{"line":7,"character":7}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":25},"contentChanges":[{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"rangeLength":0,"text":"P"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":26},"contentChanges":[{"range":{"start":{"line":7,"character":9},"end":{"line":7,"character":9}},"rangeLength":0,"text":"i"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":27},"contentChanges":[{"range":{"start":{"line":7,"character":10},"end":{"line":7,"character":10}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":7,"character":11},"end":{"line":7,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":27,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":27}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":28},"contentChanges":[{"range":{"start":{"line":7,"character":11},"end":{"line":7,"character":11}},"rangeLength":0,"text":" "}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":28}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":29},"contentChanges":[{"range":{"start":{"line":7,"character":12},"end":{"line":7,"character":12}},"rangeLength":0,"text":"="}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":30},"contentChanges":[{"range":{"start":{"line":7,"character":13},"end":{"line":7,"character":13}},"rangeLength":0,"text":" "}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":28,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":6,"character":14}}}
>>>
Content-Length: 37

{"id":28,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":30}}}Content-Length: 278

{"jsonrpc":"2.0","id":29,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":14},"end":{"line":6,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":29,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":31},"contentChanges":[{"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":14}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":3,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 37

{"id":30,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":31}}}
>>>
Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":31,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":7,"character":13},"end":{"line":7,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":31,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32},"contentChanges":[{"range":{"start":{"line":7,"character":13},"end":{"line":7,"character":13}},"rangeLength":0,"text":" "}]}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":33},"contentChanges":[{"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":14}},"rangeLength":0,"text":"  "}]}}
>>>
Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":32,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":12,"character":15}}}
>>>
Content-Length: 39

{"id":32,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":33}}}Content-Length: 206

{"jsonrpc":"2.0","id":33,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":15,"character":12}}}
>>>
Content-Length: 39

{"id":33,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":34,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":15,"character":1}}}
>>>
Content-Length: 39

{"id":34,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":35,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":15,"character":0}}}
>>>
Content-Length: 39

{"id":35,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":36,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":15,"character":0}}}
>>>
Content-Length: 37

{"id":36,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":34},"contentChanges":[{"range":{"start":{"line":15,"character":0},"end":{"line":15,"character":0}},"rangeLength":0,"text":"  "}]}}
>>>
Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":37,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":37,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":5}}}
>>>
Content-Length: 39

{"id":38,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":39,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":15,"character":7}}}
>>>
Content-Length: 37

{"id":39,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":34}}}Content-Length: 211

{"jsonrpc":"2.0","id":40,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":11,"character":22}}}
>>>
Content-Length: 37

{"id":40,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":41,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":15,"character":26}}}
>>>
Content-Length: 228

{"id":41,"result":{"contents":{"kind":"markdown","value":"### macro `INPUT_PULLUP`  \n\n---\n```cpp\n#define INPUT_PULLUP 0x2\n```"},"range":{"start":{"line":17,"character":24},"end":{"line":17,"character":36}}},"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":42,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":7,"character":11}}}
>>>
Content-Length: 122

{"id":42,"result":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":11}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":43,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":44,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":15,"character":26}}}
>>>
Content-Length: 228

{"id":44,"result":{"contents":{"kind":"markdown","value":"### macro `INPUT_PULLUP`  \n\n---\n```cpp\n#define INPUT_PULLUP 0x2\n```"},"range":{"start":{"line":17,"character":24},"end":{"line":17,"character":36}}},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":35},"contentChanges":[{"range":{"start":{"line":7,"character":7},"end":{"line":7,"character":8}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":36},"contentChanges":[{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":7}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":37},"contentChanges":[{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":6}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"jsonrpc":"2.0","id":45,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":5}},"context":{"diagnostics":[]}}}Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":38},"contentChanges":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":5}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 37

{"id":45,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":45}}
>>>
Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":39},"contentChanges":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":4}},"rangeLength":0,"text":"g"}]}}
>>>
Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":40},"contentChanges":[{"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":5}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":46,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":41},"contentChanges":[{"range":{"start":{"line":7,"character":6},"end":{"line":7,"character":6}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":42},"contentChanges":[{"range":{"start":{"line":7,"character":7},"end":{"line":7,"character":7}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"jsonrpc":"2.0","id":47,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":47,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":42}}}Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":43},"contentChanges":[{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 612

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":5},"end":{"line":10,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":48,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":7,"character":10}}}
>>>
Content-Length: 122

{"id":48,"result":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":49,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":7,"character":11},"end":{"line":7,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":49,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":43}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":44},"contentChanges":[{"range":{"start":{"line":7,"character":15},"end":{"line":7,"character":15}},"rangeLength":0,"text":"1"}]}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":45},"contentChanges":[{"range":{"start":{"line":7,"character":16},"end":{"line":7,"character":16}},"rangeLength":0,"text":"0"}]}}
>>>
Content-Length: 1543

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":4}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"},{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}Content-Length: 1543

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":4}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"},{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":46},"contentChanges":[{"range":{"start":{"line":7,"character":17},"end":{"line":7,"character":17}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":18,"character":10},"end":{"line":18,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":47},"contentChanges":[{"range":{"start":{"line":7,"character":18},"end":{"line":7,"character":18}},"rangeLength":0,"text":"\n"}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":47}}}Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":48},"contentChanges":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":0}},"rangeLength":0,"text":"b"}]}}
>>>
Content-Length: 1484

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":1}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'b'"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":49},"contentChanges":[{"range":{"start":{"line":8,"character":1},"end":{"line":8,"character":1}},"rangeLength":0,"text":"l"}]}}
>>>
Content-Length: 1485

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":2}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'bl'"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":50},"contentChanges":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":2}},"rangeLength":0,"text":"u"}]}}
>>>
Content-Length: 1486

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":3}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'blu'"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51},"contentChanges":[{"range":{"start":{"line":8,"character":3},"end":{"line":8,"character":3}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 1487

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":4}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'blue'"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":52},"contentChanges":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":4}},"rangeLength":0,"text":"P"}]}}
>>>
Content-Length: 1488

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":5}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'blueP'"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":53},"contentChanges":[{"range":{"start":{"line":8,"character":5},"end":{"line":8,"character":5}},"rangeLength":0,"text":"i"}]}}
>>>
Content-Length: 1489

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":6}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'bluePi'"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":54},"contentChanges":[{"range":{"start":{"line":8,"character":6},"end":{"line":8,"character":6}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 1490

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":7}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'bluePin'"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":55},"contentChanges":[{"range":{"start":{"line":8,"character":7},"end":{"line":8,"character":7}},"rangeLength":0,"text":" "}]}}
>>>
Content-Length: 1490

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":7}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'bluePin'"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":56},"contentChanges":[{"range":{"start":{"line":8,"character":8},"end":{"line":8,"character":8}},"rangeLength":0,"text":"="}]}}
>>>
Content-Length: 813

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":7}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":40,"character":1},"end":{"line":40,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":57},"contentChanges":[{"range":{"start":{"line":8,"character":9},"end":{"line":8,"character":9}},"rangeLength":0,"text":" "}]}}
>>>
Content-Length: 813

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":7}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}},"severity":1,"code":"expected_lparen_after_type","source":"clang","message":"Expected '(' for function-style cast or type construction"},{"range":{"start":{"line":40,"character":1},"end":{"line":40,"character":1}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":58},"contentChanges":[{"range":{"start":{"line":8,"character":10},"end":{"line":8,"character":10}},"rangeLength":0,"text":"1"}]}}
>>>
Content-Length: 1744

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":7}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":4}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":59},"contentChanges":[{"range":{"start":{"line":8,"character":11},"end":{"line":8,"character":11}},"rangeLength":0,"text":"1"}]}}
>>>
Content-Length: 1744

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":7}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":4}},"severity":1,"code":"invalid_token_after_toplevel_declarator","source":"clang","message":"Expected ';' after top level declarator (fix available)"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":60},"contentChanges":[{"range":{"start":{"line":8,"character":12},"end":{"line":8,"character":12}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 1519

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":7}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":50,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":8,"character":13},"end":{"line":8,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":50,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":51,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":15,"character":26}}}
>>>
Content-Length: 221

{"id":51,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":44,"character":8},"end":{"line":44,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":60}}}Content-Length: 206

{"jsonrpc":"2.0","id":52,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":15,"character":26}}}
>>>
Content-Length: 228

{"id":52,"result":{"contents":{"kind":"markdown","value":"### macro `INPUT_PULLUP`  \n\n---\n```cpp\n#define INPUT_PULLUP 0x2\n```"},"range":{"start":{"line":17,"character":23},"end":{"line":17,"character":35}}},"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":53,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":20}}}
>>>
Content-Length: 198

{"id":53,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":2,"character":4},"end":{"line":2,"character":16}}}],"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":5,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"jsonrpc":"2.0","id":54,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":8,"character":0}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 121

{"id":54,"result":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":7}},"kind":1}],"jsonrpc":"2.0"}Content-Length: 1519

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":7}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":55,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":6,"character":10}}}
>>>
Content-Length: 249

{"id":55,"result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `int`  \nValue = `9`  \n\n---\n```cpp\nint redPin = 9\n```"},"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 476

{"jsonrpc":"2.0","id":56,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":0}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":7}},"message":"C++ requires a type specifier for all declarations","severity":1,"code":"missing_type_specifier","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":56,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":61},"contentChanges":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":0}},"rangeLength":0,"text":"i"}]}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":6,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":6,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 1519

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":8}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":62},"contentChanges":[{"range":{"start":{"line":8,"character":1},"end":{"line":8,"character":1}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 1519

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":9}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":63},"contentChanges":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":2}},"rangeLength":0,"text":"t"}]}}
>>>
Content-Length: 1520

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":10}},"severity":1,"code":"missing_type_specifier","source":"clang","message":"C++ requires a type specifier for all declarations"},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":64},"contentChanges":[{"range":{"start":{"line":8,"character":3},"end":{"line":8,"character":3}},"rangeLength":0,"text":" "}]}}
>>>
Content-Length: 1318

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"jsonrpc":"2.0","id":57,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":57,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":64}}}Content-Length: 210

{"jsonrpc":"2.0","id":58,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":6,"character":10}}}
>>>
Content-Length: 198

{"id":58,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":59,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":19,"character":15}}}
>>>
Content-Length: 37

{"id":59,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 470

{"jsonrpc":"2.0","id":60,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":15},"end":{"line":19,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"message":"Use of undeclared identifier 'buzzerPin'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":60,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":61,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":19,"character":14}}}
>>>
Content-Length: 39

{"id":61,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 490

{"jsonrpc":"2.0","id":62,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"message":"Use of undeclared identifier 'buzzerPin'","severity":1,"code":"undeclared_var_use","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 398

{"id":62,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 470

{"jsonrpc":"2.0","id":63,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"context":{"diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"message":"Use of undeclared identifier 'buzzerPin'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 398

{"id":63,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":65},"contentChanges":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":19}},"rangeLength":9,"text":"r"}]}}
>>>
Content-Length: 1310

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":11}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'r'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":66},"contentChanges":[{"range":{"start":{"line":19,"character":11},"end":{"line":19,"character":11}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 1311

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":12}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 're'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67},"contentChanges":[{"range":{"start":{"line":19,"character":12},"end":{"line":19,"character":12}},"rangeLength":0,"text":"d"}]}}
>>>
Content-Length: 1312

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'red'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 464

{"jsonrpc":"2.0","id":64,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":13},"end":{"line":19,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":13}},"message":"Use of undeclared identifier 'red'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":64,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":68},"contentChanges":[{"range":{"start":{"line":19,"character":13},"end":{"line":19,"character":13}},"rangeLength":0,"text":"P"}]}}
>>>
Content-Length: 1313

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'redP'"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":69},"contentChanges":[{"range":{"start":{"line":19,"character":14},"end":{"line":19,"character":14}},"rangeLength":0,"text":"i"}]}}
>>>
Content-Length: 1648

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":15}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'redPi'; did you mean 'redPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'redPin' declared here"},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"severity":3,"message":"'redPin' declared here\n\nDigitalTrumpet.ino.cpp:27:11: error: use of undeclared identifier 'redPi'; did you mean 'redPin'?"},{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 574

{"jsonrpc":"2.0","id":65,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":15},"end":{"line":19,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":15}},"message":"Use of undeclared identifier 'redPi'; did you mean 'redPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'redPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":65,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":69}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":70},"contentChanges":[{"range":{"start":{"line":19,"character":15},"end":{"line":19,"character":15}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 1127

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":33,"character":11},"end":{"line":33,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":66,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":16},"end":{"line":19,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":66,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":70}}}Content-Length: 280

{"jsonrpc":"2.0","id":67,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":17},"end":{"line":19,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":67,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":68,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":19,"character":1}}}
>>>
Content-Length: 39

{"id":68,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":69,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":19,"character":2}}}
>>>
Content-Length: 471

{"id":69,"result":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":9}},"kind":1},{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":9}},"kind":1},{"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":9}},"kind":1},{"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":9}},"kind":1},{"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":9}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":70,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":26}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":70,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":71,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":26},"end":{"line":19,"character":26}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":71,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 306

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":71},"contentChanges":[{"range":{"start":{"line":19,"character":26},"end":{"line":19,"character":26}},"rangeLength":0,"text":"\n  "}]}}
>>>
Content-Length: 1127

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":72},"contentChanges":[{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":2}},"rangeLength":0,"text":"pinMode(redPin, OUTPUT);"}]}}
>>>
Content-Length: 1127

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":72,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":25},"end":{"line":20,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":72,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":72}}}Content-Length: 218

{"jsonrpc":"2.0","id":73,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":20,"character":24}}}
>>>
Content-Length: 558

{"id":73,"result":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":9}},"kind":1},{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":9}},"kind":1},{"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":9}},"kind":1},{"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":9}},"kind":1},{"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":9}},"kind":1},{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":9}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":74,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":20,"character":16}}}
>>>
Content-Length: 558

{"id":74,"result":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":9}},"kind":1},{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":9}},"kind":1},{"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":9}},"kind":1},{"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":9}},"kind":1},{"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":9}},"kind":1},{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":9}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":75,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":15},"end":{"line":20,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":75,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":76,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":13},"end":{"line":20,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":76,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":73},"contentChanges":[{"range":{"start":{"line":20,"character":12},"end":{"line":20,"character":13}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1648

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":15}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'rePin'; did you mean 'redPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'redPin' declared here"},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"severity":3,"message":"'redPin' declared here\n\nDigitalTrumpet.ino.cpp:28:11: error: use of undeclared identifier 'rePin'; did you mean 'redPin'?"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":74},"contentChanges":[{"range":{"start":{"line":20,"character":11},"end":{"line":20,"character":12}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1313

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'rPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":75},"contentChanges":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":11}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1312

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Pin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":76},"contentChanges":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":10}},"rangeLength":0,"text":"b"}]}}
>>>
Content-Length: 1313

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'bPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":77},"contentChanges":[{"range":{"start":{"line":20,"character":11},"end":{"line":20,"character":11}},"rangeLength":0,"text":"l"}]}}
>>>
Content-Length: 1314

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'blPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":78},"contentChanges":[{"range":{"start":{"line":20,"character":12},"end":{"line":20,"character":12}},"rangeLength":0,"text":"u"}]}}
>>>
Content-Length: 1655

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'bluPin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:28:11: error: use of undeclared identifier 'bluPin'; did you mean 'bluePin'?"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79},"contentChanges":[{"range":{"start":{"line":20,"character":13},"end":{"line":20,"character":13}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 1127

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":77,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":14},"end":{"line":20,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":77,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 206

{"jsonrpc":"2.0","id":78,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":19,"character":13}}}
>>>
Content-Length: 292

{"id":78,"result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `int`  \nValue = `9`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint redPin = 9\n```"},"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":80},"contentChanges":[{"range":{"start":{"line":20,"character":13},"end":{"line":20,"character":14}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1655

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'bluPin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:28:11: error: use of undeclared identifier 'bluPin'; did you mean 'bluePin'?"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":81},"contentChanges":[{"range":{"start":{"line":20,"character":12},"end":{"line":20,"character":13}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1314

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'blPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":82},"contentChanges":[{"range":{"start":{"line":20,"character":11},"end":{"line":20,"character":12}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1313

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'bPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":83},"contentChanges":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":11}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1312

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Pin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 464

{"jsonrpc":"2.0","id":79,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":13}},"message":"Use of undeclared identifier 'Pin'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":79,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":80,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":19,"character":13}}}
>>>
Content-Length: 292

{"id":80,"result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `int`  \nValue = `9`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint redPin = 9\n```"},"range":{"start":{"line":26,"character":10},"end":{"line":26,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":83}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":84},"contentChanges":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":10}},"rangeLength":0,"text":"g"}]}}
>>>
Content-Length: 1313

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'gPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":85},"contentChanges":[{"range":{"start":{"line":20,"character":11},"end":{"line":20,"character":11}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 1314

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'grPin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":86},"contentChanges":[{"range":{"start":{"line":20,"character":12},"end":{"line":20,"character":12}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 1315

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":16}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'grePin'"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":87},"contentChanges":[{"range":{"start":{"line":20,"character":13},"end":{"line":20,"character":13}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 1661

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'greePin'; did you mean 'greenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'greenPin' declared here"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'greenPin' declared here\n\nDigitalTrumpet.ino.cpp:28:11: error: use of undeclared identifier 'greePin'; did you mean 'greenPin'?"},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":88},"contentChanges":[{"range":{"start":{"line":20,"character":14},"end":{"line":20,"character":14}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 1127

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":39,"character":11},"end":{"line":39,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":81,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":15},"end":{"line":20,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":81,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":88}}}Content-Length: 218

{"jsonrpc":"2.0","id":82,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":19,"character":15}}}
>>>
Content-Length: 211

{"id":82,"result":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"kind":1},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":83,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":15},"end":{"line":19,"character":15}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":83,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":84,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":16},"end":{"line":19,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":84,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":85,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":19,"character":18}}}
>>>
Content-Length: 37

{"id":85,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":86,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":26},"end":{"line":19,"character":26}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":86,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 306

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":89},"contentChanges":[{"range":{"start":{"line":19,"character":26},"end":{"line":19,"character":26}},"rangeLength":0,"text":"\n  "}]}}
>>>
Content-Length: 1127

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 324

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":90},"contentChanges":[{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":2}},"rangeLength":0,"text":"pinMode(redPin, OUTPUT);"}]}}
>>>
Content-Length: 1127

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":87,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":25},"end":{"line":20,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":87,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":90}}}Content-Length: 218

{"jsonrpc":"2.0","id":88,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":20,"character":24}}}
>>>
Content-Length: 645

{"id":88,"result":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":9}},"kind":1},{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":9}},"kind":1},{"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":9}},"kind":1},{"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":9}},"kind":1},{"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":9}},"kind":1},{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":9}},"kind":1},{"range":{"start":{"line":21,"character":2},"end":{"line":21,"character":9}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":89,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":20,"character":16}}}
>>>
Content-Length: 645

{"id":89,"result":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":9}},"kind":1},{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":9}},"kind":1},{"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":9}},"kind":1},{"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":9}},"kind":1},{"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":9}},"kind":1},{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":9}},"kind":1},{"range":{"start":{"line":21,"character":2},"end":{"line":21,"character":9}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":90,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":13},"end":{"line":20,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":90,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":91},"contentChanges":[{"range":{"start":{"line":20,"character":12},"end":{"line":20,"character":13}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1648

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":15}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'rePin'; did you mean 'redPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'redPin' declared here"},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"severity":3,"message":"'redPin' declared here\n\nDigitalTrumpet.ino.cpp:28:11: error: use of undeclared identifier 'rePin'; did you mean 'redPin'?"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":92},"contentChanges":[{"range":{"start":{"line":20,"character":11},"end":{"line":20,"character":12}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1313

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":14}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'rPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":93},"contentChanges":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":11}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1312

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":13}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'Pin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 464

{"jsonrpc":"2.0","id":91,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":13}},"message":"Use of undeclared identifier 'Pin'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":91,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":93}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":94},"contentChanges":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":10}},"rangeLength":0,"text":"b"}]}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":95},"contentChanges":[{"range":{"start":{"line":20,"character":11},"end":{"line":20,"character":11}},"rangeLength":0,"text":"l"}]}}
>>>
Content-Length: 1314

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":15}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'blPin'"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":96},"contentChanges":[{"range":{"start":{"line":20,"character":12},"end":{"line":20,"character":12}},"rangeLength":0,"text":"u"}]}}
>>>
Content-Length: 1655

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'bluPin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:28:11: error: use of undeclared identifier 'bluPin'; did you mean 'bluePin'?"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":97},"contentChanges":[{"range":{"start":{"line":20,"character":13},"end":{"line":20,"character":13}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 1127

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":98},"contentChanges":[{"range":{"start":{"line":20,"character":14},"end":{"line":20,"character":14}},"rangeLength":0,"text":"p"}]}}
>>>
Content-Length: 1659

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'bluepPin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:28:11: error: use of undeclared identifier 'bluepPin'; did you mean 'bluePin'?"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":99},"contentChanges":[{"range":{"start":{"line":20,"character":15},"end":{"line":20,"character":15}},"rangeLength":0,"text":"i"}]}}
>>>
Content-Length: 1661

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":19}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'bluepiPin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:28:11: error: use of undeclared identifier 'bluepiPin'; did you mean 'bluePin'?"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":100},"contentChanges":[{"range":{"start":{"line":20,"character":16},"end":{"line":20,"character":16}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 1663

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":20}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'bluepinPin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:28:11: error: use of undeclared identifier 'bluepinPin'; did you mean 'bluePin'?"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 582

{"jsonrpc":"2.0","id":92,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":17},"end":{"line":20,"character":17}},"context":{"diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":20}},"message":"Use of undeclared identifier 'bluepinPin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":92,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":100}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":101},"contentChanges":[{"range":{"start":{"line":20,"character":16},"end":{"line":20,"character":17}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1661

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":19}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'bluepiPin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:28:11: error: use of undeclared identifier 'bluepiPin'; did you mean 'bluePin'?"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":102},"contentChanges":[{"range":{"start":{"line":20,"character":15},"end":{"line":20,"character":16}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1659

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'bluepPin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:28:11: error: use of undeclared identifier 'bluepPin'; did you mean 'bluePin'?"},{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 580

{"jsonrpc":"2.0","id":93,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":15},"end":{"line":20,"character":15}},"context":{"diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":18}},"message":"Use of undeclared identifier 'bluepPin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":93,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":102}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":103},"contentChanges":[{"range":{"start":{"line":20,"character":14},"end":{"line":20,"character":15}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1127

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":94,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":14},"end":{"line":20,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":94,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":103}}}Content-Length: 205

{"jsonrpc":"2.0","id":95,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":7}}}
>>>
Content-Length: 387

{"id":95,"result":{"contents":{"kind":"markdown","value":"### function `tone`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t _pin`\n- `unsigned int frequency`\n- `unsigned long duration = 0`\n\n---\n```cpp\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0)\n```"},"range":{"start":{"line":36,"character":6},"end":{"line":36,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":96,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":6}}}
>>>
Content-Length: 387

{"id":96,"result":{"contents":{"kind":"markdown","value":"### function `tone`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t _pin`\n- `unsigned int frequency`\n- `unsigned long duration = 0`\n\n---\n```cpp\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0)\n```"},"range":{"start":{"line":36,"character":6},"end":{"line":36,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":97,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":6}}}
>>>
Content-Length: 37

{"id":97,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 469

{"jsonrpc":"2.0","id":98,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":6},"end":{"line":29,"character":27}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":11},"end":{"line":29,"character":20}},"message":"Use of undeclared identifier 'buzzerPin'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":98,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":104},"contentChanges":[{"range":{"start":{"line":29,"character":6},"end":{"line":29,"character":27}},"rangeLength":21,"text":""}]}}
>>>
Content-Length: 936

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":11},"end":{"line":32,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":104}}}Content-Length: 205

{"jsonrpc":"2.0","id":99,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":5}}}
>>>
Content-Length: 39

{"id":99,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":100,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":6}}}
>>>
Content-Length: 38

{"id":100,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":105},"contentChanges":[{"range":{"start":{"line":32,"character":6},"end":{"line":32,"character":27}},"rangeLength":21,"text":""}]}}
>>>
Content-Length: 745

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":105}}}Content-Length: 206

{"jsonrpc":"2.0","id":101,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":35,"character":6}}}
>>>
Content-Length: 388

{"id":101,"result":{"contents":{"kind":"markdown","value":"### function `tone`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t _pin`\n- `unsigned int frequency`\n- `unsigned long duration = 0`\n\n---\n```cpp\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0)\n```"},"range":{"start":{"line":42,"character":6},"end":{"line":42,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":102,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":35,"character":6}}}
>>>
Content-Length: 388

{"id":102,"result":{"contents":{"kind":"markdown","value":"### function `tone`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t _pin`\n- `unsigned int frequency`\n- `unsigned long duration = 0`\n\n---\n```cpp\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0)\n```"},"range":{"start":{"line":42,"character":6},"end":{"line":42,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":103,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":35,"character":6}}}
>>>
Content-Length: 38

{"id":103,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":106},"contentChanges":[{"range":{"start":{"line":35,"character":6},"end":{"line":35,"character":27}},"rangeLength":21,"text":""}]}}
>>>
Content-Length: 554

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":106}}}Content-Length: 206

{"jsonrpc":"2.0","id":104,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":38,"character":6}}}
>>>
Content-Length: 388

{"id":104,"result":{"contents":{"kind":"markdown","value":"### function `tone`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t _pin`\n- `unsigned int frequency`\n- `unsigned long duration = 0`\n\n---\n```cpp\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0)\n```"},"range":{"start":{"line":45,"character":6},"end":{"line":45,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":105,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":38,"character":7}}}
>>>
Content-Length: 38

{"id":105,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 470

{"jsonrpc":"2.0","id":106,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":38,"character":7},"end":{"line":38,"character":27}},"context":{"diagnostics":[{"range":{"start":{"line":38,"character":11},"end":{"line":38,"character":20}},"message":"Use of undeclared identifier 'buzzerPin'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":106,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":107},"contentChanges":[{"range":{"start":{"line":38,"character":7},"end":{"line":38,"character":27}},"rangeLength":20,"text":""}]}}
>>>
Content-Length: 544

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":38,"character":6},"end":{"line":38,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 't'"},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":108},"contentChanges":[{"range":{"start":{"line":38,"character":6},"end":{"line":38,"character":7}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 363

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":20}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'buzzerPin'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":107,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":40,"character":5}}}
>>>
Content-Length: 280

{"id":107,"result":{"contents":{"kind":"markdown","value":"### function `noTone`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t _pin`\n\n---\n```cpp\nvoid noTone(uint8_t _pin)\n```"},"range":{"start":{"line":47,"character":4},"end":{"line":47,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":108}}}Content-Length: 206

{"jsonrpc":"2.0","id":108,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":39,"character":9}}}
>>>
Content-Length: 40

{"id":108,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":109,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":40,"character":5}}}
>>>
Content-Length: 280

{"id":109,"result":{"contents":{"kind":"markdown","value":"### function `noTone`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t _pin`\n\n---\n```cpp\nvoid noTone(uint8_t _pin)\n```"},"range":{"start":{"line":47,"character":4},"end":{"line":47,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":110,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":40,"character":6}}}
>>>
Content-Length: 38

{"id":110,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":111,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":40,"character":6},"end":{"line":40,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":111,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":112,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":40,"character":2}}}
>>>
Content-Length: 40

{"id":112,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":113,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":40,"character":3}}}
>>>
Content-Length: 40

{"id":113,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":109},"contentChanges":[{"range":{"start":{"line":40,"character":5},"end":{"line":40,"character":22}},"rangeLength":17,"text":""}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":40,"character":4},"end":{"line":40,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'n'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 459

{"jsonrpc":"2.0","id":114,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":40,"character":5},"end":{"line":40,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":40,"character":4},"end":{"line":40,"character":5}},"message":"Use of undeclared identifier 'n'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":114,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":109}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":110},"contentChanges":[{"range":{"start":{"line":40,"character":4},"end":{"line":40,"character":5}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":110}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":110}}}Content-Length: 212

{"jsonrpc":"2.0","id":115,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":26}}}
>>>
Content-Length: 199

{"id":115,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":116,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":24},"end":{"line":35,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":116,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":117,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":117,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":111},"contentChanges":[{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":24}},"rangeLength":20,"text":""}]}}Content-Length: 207

{"jsonrpc":"2.0","id":118,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":22}}}
>>>
Content-Length: 287

{"id":118,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":37,"character":13},"end":{"line":37,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":111}}}Content-Length: 206

{"jsonrpc":"2.0","id":119,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":4}}}
>>>
Content-Length: 268

{"id":119,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"start":{"line":38,"character":4},"end":{"line":38,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":120,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":5}}}
>>>
Content-Length: 388

{"id":120,"result":[{"range":{"start":{"line":22,"character":2},"end":{"line":22,"character":8}},"kind":1},{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":10}},"kind":1},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":10}},"kind":1},{"range":{"start":{"line":37,"character":4},"end":{"line":37,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":121,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":121,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":122,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":122,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":123,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":4}}}
>>>
Content-Length: 268

{"id":123,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"start":{"line":38,"character":4},"end":{"line":38,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":124,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":5}}}
>>>
Content-Length: 388

{"id":124,"result":[{"range":{"start":{"line":22,"character":2},"end":{"line":22,"character":8}},"kind":1},{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":10}},"kind":1},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":10}},"kind":1},{"range":{"start":{"line":37,"character":4},"end":{"line":37,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":125,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":125,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":112},"contentChanges":[{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":24}},"rangeLength":20,"text":""}]}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":112}}}Content-Length: 280

{"jsonrpc":"2.0","id":126,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":126,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":113},"contentChanges":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":24}},"rangeLength":20,"text":""}]}}Content-Length: 206

{"jsonrpc":"2.0","id":127,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":39,"character":5}}}
>>>
Content-Length: 40

{"id":127,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":113}}}Content-Length: 206

{"jsonrpc":"2.0","id":128,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":37,"character":4}}}
>>>
Content-Length: 268

{"id":128,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class HardwareSerial`  \n\n---\n```cpp\nextern HardwareSerial Serial\n```"},"range":{"start":{"line":44,"character":4},"end":{"line":44,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":129,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":37,"character":5}}}
>>>
Content-Length: 212

{"id":129,"result":[{"range":{"start":{"line":22,"character":2},"end":{"line":22,"character":8}},"kind":1},{"range":{"start":{"line":37,"character":4},"end":{"line":37,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":130,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":37,"character":5},"end":{"line":37,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":130,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":114},"contentChanges":[{"range":{"start":{"line":37,"character":5},"end":{"line":37,"character":24}},"rangeLength":19,"text":""}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":37,"character":4},"end":{"line":37,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'S'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":115},"contentChanges":[{"range":{"start":{"line":37,"character":4},"end":{"line":37,"character":5}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":116},"contentChanges":[{"range":{"start":{"line":37,"character":2},"end":{"line":37,"character":4}},"rangeLength":2,"text":""}]}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":116}}}Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":117},"contentChanges":[{"range":{"start":{"line":37,"character":0},"end":{"line":37,"character":2}},"rangeLength":2,"text":"    "}]}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":117}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":117}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":117}}}Content-Length: 212

{"jsonrpc":"2.0","id":131,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":29}}}
>>>
Content-Length: 199

{"id":131,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":117}}}Content-Length: 206

{"jsonrpc":"2.0","id":132,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":3,"character":15}}}
>>>
Content-Length: 260

{"id":132,"result":{"contents":{"kind":"markdown","value":"### variable `thirdKeyPin`  \n\n---\nType: `int`  \nValue = `4`  \n\n---\n```cpp\nint thirdKeyPin = 4\n```"},"range":{"start":{"line":5,"character":4},"end":{"line":5,"character":15}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":133,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":3,"character":14}}}
>>>
Content-Length: 260

{"id":133,"result":{"contents":{"kind":"markdown","value":"### variable `thirdKeyPin`  \n\n---\nType: `int`  \nValue = `4`  \n\n---\n```cpp\nint thirdKeyPin = 4\n```"},"range":{"start":{"line":5,"character":4},"end":{"line":5,"character":15}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":134,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":6,"character":11}}}
>>>
Content-Length: 251

{"id":134,"result":{"contents":{"kind":"markdown","value":"### variable `redPin`  \n\n---\nType: `int`  \nValue = `9`  \n\n---\n```cpp\nint redPin = 9\n```"},"range":{"start":{"line":8,"character":11},"end":{"line":8,"character":12}}},"jsonrpc":"2.0"}
<<<
Content-Length: 60

{"jsonrpc":"2.0","id":135,"method":"shutdown","params":null}
>>>
Content-Length: 40

{"id":135,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":94088,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1172

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":1,"text":"\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\nint fourthKeyPin = 5;\n\nint redPin = 9;\nint greenPin = 10;\nint bluePin = 11;   \n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n  pinMode(fourthKeyPin, INPUT_PULLUP);  \n\n  //set the buzzer pin as an output\n  pinMode(redPin, OUTPUT);\n  pinMode(bluePin, OUTPUT);\n  pinMode(greenPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {\n    \n      \n  } else if (digitalRead(secondKeyPin) == LOW) {\n    \n      \n  } else if (digitalRead(thirdKeyPin) == LOW) {\n    \n      \n  } else if (digitalRead(fourthKeyPin) == LOW) {\n    \n      \n  } else {\n    \n  }\n}\n\n/*\n  note  frequency\n  c     262 Hz\n  d     294 Hz\n  e     330 Hz\n  f     349 Hz\n  g     392 Hz\n  a     440 Hz\n  b     494 Hz\n  C     523 Hz\n*/\n"}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":1,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":14}}}
>>>
Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 285

{"id":1,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":40,"character":13},"end":{"line":40,"character":24}}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":2,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":15}}}
>>>
Content-Length: 222

{"id":2,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":135,"character":4},"end":{"line":135,"character":15}}}],"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 205

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":14}}}
>>>
Content-Length: 285

{"id":3,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":40,"character":13},"end":{"line":40,"character":24}}},"jsonrpc":"2.0"}
<<<
Content-Length: 195

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","languageId":"cpp","version":1,"text":""}}}Content-Length: 1532

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2},"contentChanges":[{"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"rangeLength":0,"text":"void red() {\n\n  //set the LED pins to values that make red\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}\n\nvoid orange() {\n\n  //set the LED pins to values that make orange\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 50);\n  analogWrite(BluePin, 0);\n}\n\n\nvoid yellow() {\n\n  //set the LED pins to values that make yellow\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid green() {\n\n  //set the LED pins to values that make green\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid cyan() {\n\n  //set the LED pins to values that make cyan\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 100);\n}\nvoid blue() {\n\n  //set the LED pins to values that make blue\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid magenta() {\n\n  //set the LED pins to values that make magenta\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid turnOff() {\n\n  //set all three LED pins to 0 or OFF\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}"}]}}Content-Length: 202

{"jsonrpc":"2.0","id":4,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":10,"character":31}}}
>>>
Content-Length: 163

{"id":4,"error":{"code":0,"message":"Document is not available: file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":58,"character":1},"end":{"line":58,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 271

{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":20,"character":27},"end":{"line":20,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":6,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 269

{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":51,"character":1},"end":{"line":51,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":7,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 208

{"jsonrpc":"2.0","id":8,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":56,"character":7}}}
>>>
Content-Length: 163

{"id":8,"error":{"code":0,"message":"Document is not available: file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 269

{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":56,"character":7},"end":{"line":56,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":9,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":10,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":55,"character":13}}}
>>>
Content-Length: 164

{"id":10,"error":{"code":0,"message":"Document is not available: file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 203

{"jsonrpc":"2.0","id":11,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":50,"character":16}}}
>>>
Content-Length: 164

{"id":11,"error":{"code":0,"message":"Document is not available: file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 203

{"jsonrpc":"2.0","id":12,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":35,"character":14}}}
>>>
Content-Length: 164

{"id":12,"error":{"code":0,"message":"Document is not available: file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 203

{"jsonrpc":"2.0","id":13,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":20,"character":11}}}
>>>
Content-Length: 164

{"id":13,"error":{"code":0,"message":"Document is not available: file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"jsonrpc":"2.0","id":14,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":6,"character":8}}}
>>>
Content-Length: 211

{"id":14,"result":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"kind":1},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":15,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":10,"character":11}}}
>>>
Content-Length: 164

{"id":16,"error":{"code":0,"message":"Document is not available: file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":7,"character":4}}}
>>>
Content-Length: 255

{"id":17,"result":{"contents":{"kind":"markdown","value":"### variable `greenPin`  \n\n---\nType: `int`  \nValue = `10`  \n\n---\n```cpp\nint greenPin = 10\n```"},"range":{"start":{"line":9,"character":4},"end":{"line":9,"character":12}}},"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"jsonrpc":"2.0","id":18,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":7,"character":5}}}
>>>
Content-Length: 211

{"id":18,"result":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"kind":1},{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":18}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"jsonrpc":"2.0","id":19,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":19,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"jsonrpc":"2.0","id":20,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":6,"character":5}}}
>>>
Content-Length: 211

{"id":20,"result":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"kind":1},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"jsonrpc":"2.0","id":21,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":5},"end":{"line":6,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":21,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":2},"contentChanges":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":5}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 690

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'redPin'; did you mean 'edPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'edPin' declared here"},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":9}},"severity":3,"message":"'edPin' declared here\n\nDigitalTrumpet.ino.cpp:27:11: error: use of undeclared identifier 'redPin'; did you mean 'edPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 499

{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":4}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":9}},"message":"'edPin' declared here\n\nDigitalTrumpet.ino.cpp:27:11: error: use of undeclared identifier 'redPin'; did you mean 'edPin'?","severity":3}]}}}
>>>
Content-Length: 37

{"id":22,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":3},"contentChanges":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":4}},"rangeLength":0,"text":"R"}]}}
>>>
Content-Length: 695

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'redPin'; did you mean 'RedPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'RedPin' declared here"},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"severity":3,"message":"'RedPin' declared here\n\nDigitalTrumpet.ino.cpp:27:11: error: use of undeclared identifier 'redPin'; did you mean 'RedPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 502

{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":6,"character":5},"end":{"line":6,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"message":"'RedPin' declared here\n\nDigitalTrumpet.ino.cpp:27:11: error: use of undeclared identifier 'redPin'; did you mean 'RedPin'?","severity":3}]}}}
>>>
Content-Length: 37

{"id":23,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"jsonrpc":"2.0","id":24,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":7,"character":5}}}
>>>
Content-Length: 211

{"id":24,"result":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"kind":1},{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":18}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":3}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 276

{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 37

{"id":25,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":4},"contentChanges":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":5}},"rangeLength":1,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":25}}Content-Length: 276

{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 4411

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'redPin'; did you mean 'RedPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'RedPin' declared here"},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"severity":3,"message":"'RedPin' declared here\n\nDigitalTrumpet.ino.cpp:43:11: error: use of undeclared identifier 'redPin'; did you mean 'RedPin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'greenPin' declared here\n\nDigitalTrumpet.ino.cpp:85:15: error: use of undeclared identifier 'GreenPin'; did you mean 'greenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:86:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'greenPin' declared here\n\nDigitalTrumpet.ino.cpp:93:15: error: use of undeclared identifier 'GreenPin'; did you mean 'greenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:94:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'greenPin' declared here\n\nDigitalTrumpet.ino.cpp:102:15: error: use of undeclared identifier 'GreenPin'; did you mean 'greenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:103:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'greenPin' declared here\n\nDigitalTrumpet.ino.cpp:109:15: error: use of undeclared identifier 'GreenPin'; did you mean 'greenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:110:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'greenPin' declared here\n\nDigitalTrumpet.ino.cpp:116:15: error: use of undeclared identifier 'GreenPin'; did you mean 'greenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:117:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'greenPin' declared here\n\nDigitalTrumpet.ino.cpp:123:15: error: use of undeclared identifier 'GreenPin'; did you mean 'greenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:124:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'greenPin' declared here\n\nDigitalTrumpet.ino.cpp:130:15: error: use of undeclared identifier 'GreenPin'; did you mean 'greenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:131:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'greenPin' declared here\n\nDigitalTrumpet.ino.cpp:137:15: error: use of undeclared identifier 'GreenPin'; did you mean 'greenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:138:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"}]},"jsonrpc":"2.0"}Content-Length: 4984

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'greenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'greenPin' declared here"},{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":12,"character":14},"end":{"line":12,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'greenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'greenPin' declared here"},{"range":{"start":{"line":13,"character":14},"end":{"line":13,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":21,"character":14},"end":{"line":21,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'greenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'greenPin' declared here"},{"range":{"start":{"line":22,"character":14},"end":{"line":22,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":28,"character":14},"end":{"line":28,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'greenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'greenPin' declared here"},{"range":{"start":{"line":29,"character":14},"end":{"line":29,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":35,"character":14},"end":{"line":35,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'greenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'greenPin' declared here"},{"range":{"start":{"line":36,"character":14},"end":{"line":36,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":42,"character":14},"end":{"line":42,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'greenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'greenPin' declared here"},{"range":{"start":{"line":43,"character":14},"end":{"line":43,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":49,"character":14},"end":{"line":49,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'greenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'greenPin' declared here"},{"range":{"start":{"line":50,"character":14},"end":{"line":50,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":56,"character":14},"end":{"line":56,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'greenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'greenPin' declared here"},{"range":{"start":{"line":57,"character":14},"end":{"line":57,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"}]},"jsonrpc":"2.0"}Content-Length: 37

{"id":26,"result":[],"jsonrpc":"2.0"}Content-Length: 4968

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'reenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'reenPin' declared here"},{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":12,"character":14},"end":{"line":12,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'reenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'reenPin' declared here"},{"range":{"start":{"line":13,"character":14},"end":{"line":13,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":21,"character":14},"end":{"line":21,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'reenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'reenPin' declared here"},{"range":{"start":{"line":22,"character":14},"end":{"line":22,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":28,"character":14},"end":{"line":28,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'reenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'reenPin' declared here"},{"range":{"start":{"line":29,"character":14},"end":{"line":29,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":35,"character":14},"end":{"line":35,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'reenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'reenPin' declared here"},{"range":{"start":{"line":36,"character":14},"end":{"line":36,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":42,"character":14},"end":{"line":42,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'reenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'reenPin' declared here"},{"range":{"start":{"line":43,"character":14},"end":{"line":43,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":49,"character":14},"end":{"line":49,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'reenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'reenPin' declared here"},{"range":{"start":{"line":50,"character":14},"end":{"line":50,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":56,"character":14},"end":{"line":56,"character":22}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'GreenPin'; did you mean 'reenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'reenPin' declared here"},{"range":{"start":{"line":57,"character":14},"end":{"line":57,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"}]},"jsonrpc":"2.0"}Content-Length: 4927

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'redPin'; did you mean 'RedPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'RedPin' declared here"},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"severity":3,"message":"'RedPin' declared here\n\nDigitalTrumpet.ino.cpp:43:11: error: use of undeclared identifier 'redPin'; did you mean 'RedPin'?"},{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'greenPin'; did you mean 'reenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'reenPin' declared here"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":11}},"severity":3,"message":"'reenPin' declared here\n\nDigitalTrumpet.ino.cpp:45:11: error: use of undeclared identifier 'greenPin'; did you mean 'reenPin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":11}},"severity":3,"message":"'reenPin' declared here\n\nDigitalTrumpet.ino.cpp:85:15: error: use of undeclared identifier 'GreenPin'; did you mean 'reenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:86:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":11}},"severity":3,"message":"'reenPin' declared here\n\nDigitalTrumpet.ino.cpp:93:15: error: use of undeclared identifier 'GreenPin'; did you mean 'reenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:94:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":11}},"severity":3,"message":"'reenPin' declared here\n\nDigitalTrumpet.ino.cpp:102:15: error: use of undeclared identifier 'GreenPin'; did you mean 'reenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:103:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":11}},"severity":3,"message":"'reenPin' declared here\n\nDigitalTrumpet.ino.cpp:109:15: error: use of undeclared identifier 'GreenPin'; did you mean 'reenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:110:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":11}},"severity":3,"message":"'reenPin' declared here\n\nDigitalTrumpet.ino.cpp:116:15: error: use of undeclared identifier 'GreenPin'; did you mean 'reenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:117:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":11}},"severity":3,"message":"'reenPin' declared here\n\nDigitalTrumpet.ino.cpp:123:15: error: use of undeclared identifier 'GreenPin'; did you mean 'reenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:124:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":11}},"severity":3,"message":"'reenPin' declared here\n\nDigitalTrumpet.ino.cpp:130:15: error: use of undeclared identifier 'GreenPin'; did you mean 'reenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:131:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":11}},"severity":3,"message":"'reenPin' declared here\n\nDigitalTrumpet.ino.cpp:137:15: error: use of undeclared identifier 'GreenPin'; did you mean 'reenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:138:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":5},"contentChanges":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":4}},"rangeLength":0,"text":"G"}]}}
>>>
Content-Length: 3077

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'redPin'; did you mean 'RedPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'RedPin' declared here"},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"severity":3,"message":"'RedPin' declared here\n\nDigitalTrumpet.ino.cpp:43:11: error: use of undeclared identifier 'redPin'; did you mean 'RedPin'?"},{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'greenPin'; did you mean 'GreenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'GreenPin' declared here"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'GreenPin' declared here\n\nDigitalTrumpet.ino.cpp:45:11: error: use of undeclared identifier 'greenPin'; did you mean 'GreenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:86:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:94:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:103:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:110:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:117:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:124:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:131:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:138:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?"}]},"jsonrpc":"2.0"}Content-Length: 2562

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":13,"character":14},"end":{"line":13,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":22,"character":14},"end":{"line":22,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":29,"character":14},"end":{"line":29,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":36,"character":14},"end":{"line":36,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":43,"character":14},"end":{"line":43,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":50,"character":14},"end":{"line":50,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"},{"range":{"start":{"line":57,"character":14},"end":{"line":57,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'bluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'bluePin' declared here"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 508

{"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":7,"character":5},"end":{"line":7,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"message":"'GreenPin' declared here\n\nDigitalTrumpet.ino.cpp:45:11: error: use of undeclared identifier 'greenPin'; did you mean 'GreenPin'?","severity":3}]}}}Content-Length: 270


>>>
Content-Length: 37

{"id":27,"result":[],"jsonrpc":"2.0"}
<<<
{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":56,"character":7},"end":{"line":56,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":28,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"jsonrpc":"2.0","id":29,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":8,"character":5}}}
>>>
Content-Length: 921

{"id":29,"result":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"kind":1},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":17}},"kind":2},{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":21}},"kind":2},{"range":{"start":{"line":13,"character":14},"end":{"line":13,"character":21}},"kind":2},{"range":{"start":{"line":22,"character":14},"end":{"line":22,"character":21}},"kind":2},{"range":{"start":{"line":29,"character":14},"end":{"line":29,"character":21}},"kind":2},{"range":{"start":{"line":36,"character":14},"end":{"line":36,"character":21}},"kind":2},{"range":{"start":{"line":43,"character":14},"end":{"line":43,"character":21}},"kind":2},{"range":{"start":{"line":50,"character":14},"end":{"line":50,"character":21}},"kind":2},{"range":{"start":{"line":57,"character":14},"end":{"line":57,"character":21}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":5}}}Content-Length: 2121

{"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":8,"character":5},"end":{"line":8,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:86:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:94:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:103:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:110:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:117:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:124:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:131:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"message":"'bluePin' declared here\n\nDigitalTrumpet.ino.cpp:138:15: error: use of undeclared identifier 'BluePin'; did you mean 'bluePin'?","severity":3}]}}}
>>>
Content-Length: 37

{"id":30,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 297

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":6},"contentChanges":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":5}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 2546

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'luePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'luePin' declared here"},{"range":{"start":{"line":13,"character":14},"end":{"line":13,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'luePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'luePin' declared here"},{"range":{"start":{"line":22,"character":14},"end":{"line":22,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'luePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'luePin' declared here"},{"range":{"start":{"line":29,"character":14},"end":{"line":29,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'luePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'luePin' declared here"},{"range":{"start":{"line":36,"character":14},"end":{"line":36,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'luePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'luePin' declared here"},{"range":{"start":{"line":43,"character":14},"end":{"line":43,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'luePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'luePin' declared here"},{"range":{"start":{"line":50,"character":14},"end":{"line":50,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'luePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'luePin' declared here"},{"range":{"start":{"line":57,"character":14},"end":{"line":57,"character":21}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'BluePin'; did you mean 'luePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'luePin' declared here"}]},"jsonrpc":"2.0"}Content-Length: 3587

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'redPin'; did you mean 'RedPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'RedPin' declared here"},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"severity":3,"message":"'RedPin' declared here\n\nDigitalTrumpet.ino.cpp:43:11: error: use of undeclared identifier 'redPin'; did you mean 'RedPin'?"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'bluePin'; did you mean 'luePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'luePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"severity":3,"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:44:11: error: use of undeclared identifier 'bluePin'; did you mean 'luePin'?"},{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'greenPin'; did you mean 'GreenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'GreenPin' declared here"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'GreenPin' declared here\n\nDigitalTrumpet.ino.cpp:45:11: error: use of undeclared identifier 'greenPin'; did you mean 'GreenPin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"severity":3,"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:86:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"severity":3,"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:94:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"severity":3,"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:103:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"severity":3,"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:110:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"severity":3,"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:117:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"severity":3,"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:124:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"severity":3,"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:131:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"severity":3,"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:138:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 2333

{"jsonrpc":"2.0","id":31,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":4}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:44:11: error: use of undeclared identifier 'bluePin'; did you mean 'luePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:86:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:94:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:103:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:110:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:117:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:124:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:131:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?","severity":3},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":10}},"message":"'luePin' declared here\n\nDigitalTrumpet.ino.cpp:138:15: error: use of undeclared identifier 'BluePin'; did you mean 'luePin'?","severity":3}]}}}
>>>
Content-Length: 37

{"id":31,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 270

{"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":56,"character":7},"end":{"line":56,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":32,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":6}}}Content-Length: 298

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":7},"contentChanges":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":4}},"rangeLength":0,"text":"B"}]}}
>>>
Content-Length: 1761

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'redPin'; did you mean 'RedPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'RedPin' declared here"},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"severity":3,"message":"'RedPin' declared here\n\nDigitalTrumpet.ino.cpp:43:11: error: use of undeclared identifier 'redPin'; did you mean 'RedPin'?"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'bluePin'; did you mean 'BluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'BluePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'BluePin' declared here\n\nDigitalTrumpet.ino.cpp:44:11: error: use of undeclared identifier 'bluePin'; did you mean 'BluePin'?"},{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'greenPin'; did you mean 'GreenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'GreenPin' declared here"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'GreenPin' declared here\n\nDigitalTrumpet.ino.cpp:45:11: error: use of undeclared identifier 'greenPin'; did you mean 'GreenPin'?"}]},"jsonrpc":"2.0"}Content-Length: 165

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 505

{"jsonrpc":"2.0","id":33,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":8,"character":5},"end":{"line":8,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"message":"'BluePin' declared here\n\nDigitalTrumpet.ino.cpp:44:11: error: use of undeclared identifier 'bluePin'; did you mean 'BluePin'?","severity":3}]}}}
>>>
Content-Length: 37

{"id":33,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 270

{"jsonrpc":"2.0","id":34,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":56,"character":7},"end":{"line":56,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":34,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":7}}}Content-Length: 217

{"jsonrpc":"2.0","id":35,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":11,"character":5}}}
>>>
Content-Length: 212

{"id":35,"result":[{"range":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}},"kind":1},{"range":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":36,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":12,"character":5}}}
>>>
Content-Length: 37

{"id":36,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":37,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":5}}}
>>>
Content-Length: 645

{"id":37,"result":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":9}},"kind":1},{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":9}},"kind":1},{"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":9}},"kind":1},{"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":9}},"kind":1},{"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":9}},"kind":1},{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":9}},"kind":1},{"range":{"start":{"line":21,"character":2},"end":{"line":21,"character":9}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":38,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":5}}}
>>>
Content-Length: 645

{"id":38,"result":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":9}},"kind":1},{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":9}},"kind":1},{"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":9}},"kind":1},{"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":9}},"kind":1},{"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":9}},"kind":1},{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":9}},"kind":1},{"range":{"start":{"line":21,"character":2},"end":{"line":21,"character":9}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":39,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":15,"character":5}}}
>>>
Content-Length: 645

{"id":39,"result":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":9}},"kind":1},{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":9}},"kind":1},{"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":9}},"kind":1},{"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":9}},"kind":1},{"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":9}},"kind":1},{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":9}},"kind":1},{"range":{"start":{"line":21,"character":2},"end":{"line":21,"character":9}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":40,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":16,"character":5}}}
>>>
Content-Length: 645

{"id":40,"result":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":9}},"kind":1},{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":9}},"kind":1},{"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":9}},"kind":1},{"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":9}},"kind":1},{"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":9}},"kind":1},{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":9}},"kind":1},{"range":{"start":{"line":21,"character":2},"end":{"line":21,"character":9}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":41,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":16,"character":5},"end":{"line":16,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":41,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":42,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":19,"character":2}}}
>>>
Content-Length: 645

{"id":42,"result":[{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":9}},"kind":1},{"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":9}},"kind":1},{"range":{"start":{"line":15,"character":2},"end":{"line":15,"character":9}},"kind":1},{"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":9}},"kind":1},{"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":9}},"kind":1},{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":9}},"kind":1},{"range":{"start":{"line":21,"character":2},"end":{"line":21,"character":9}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":2},"end":{"line":19,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":43,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":44,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":19,"character":10}}}
>>>
Content-Length: 921

{"id":44,"result":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"kind":1},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"kind":2},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":20}},"kind":2},{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":20}},"kind":2},{"range":{"start":{"line":20,"character":14},"end":{"line":20,"character":20}},"kind":2},{"range":{"start":{"line":27,"character":14},"end":{"line":27,"character":20}},"kind":2},{"range":{"start":{"line":34,"character":14},"end":{"line":34,"character":20}},"kind":2},{"range":{"start":{"line":41,"character":14},"end":{"line":41,"character":20}},"kind":2},{"range":{"start":{"line":48,"character":14},"end":{"line":48,"character":20}},"kind":2},{"range":{"start":{"line":55,"character":14},"end":{"line":55,"character":20}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 575

{"jsonrpc":"2.0","id":45,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":12},"end":{"line":19,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"message":"Use of undeclared identifier 'redPin'; did you mean 'RedPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'RedPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":45,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 575

{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":11},"end":{"line":19,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"message":"Use of undeclared identifier 'redPin'; did you mean 'RedPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'RedPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":46,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":8},"contentChanges":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":11}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 1759

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":15}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'edPin'; did you mean 'RedPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'RedPin' declared here"},{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"severity":3,"message":"'RedPin' declared here\n\nDigitalTrumpet.ino.cpp:43:11: error: use of undeclared identifier 'edPin'; did you mean 'RedPin'?"},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'bluePin'; did you mean 'BluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'BluePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'BluePin' declared here\n\nDigitalTrumpet.ino.cpp:44:11: error: use of undeclared identifier 'bluePin'; did you mean 'BluePin'?"},{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'greenPin'; did you mean 'GreenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'GreenPin' declared here"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'GreenPin' declared here\n\nDigitalTrumpet.ino.cpp:45:11: error: use of undeclared identifier 'greenPin'; did you mean 'GreenPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 574

{"jsonrpc":"2.0","id":47,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":15}},"message":"Use of undeclared identifier 'edPin'; did you mean 'RedPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:9:5: note: 'RedPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":47,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":9},"contentChanges":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":10}},"rangeLength":0,"text":"R"}]}}
>>>
Content-Length: 1238

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'bluePin'; did you mean 'BluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'BluePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'BluePin' declared here\n\nDigitalTrumpet.ino.cpp:44:11: error: use of undeclared identifier 'bluePin'; did you mean 'BluePin'?"},{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'greenPin'; did you mean 'GreenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'GreenPin' declared here"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'GreenPin' declared here\n\nDigitalTrumpet.ino.cpp:45:11: error: use of undeclared identifier 'greenPin'; did you mean 'GreenPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":48,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":11},"end":{"line":19,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":48,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":49,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":20,"character":11}}}
>>>
Content-Length: 921

{"id":49,"result":[{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"kind":1},{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":17}},"kind":2},{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":21}},"kind":2},{"range":{"start":{"line":13,"character":14},"end":{"line":13,"character":21}},"kind":2},{"range":{"start":{"line":22,"character":14},"end":{"line":22,"character":21}},"kind":2},{"range":{"start":{"line":29,"character":14},"end":{"line":29,"character":21}},"kind":2},{"range":{"start":{"line":36,"character":14},"end":{"line":36,"character":21}},"kind":2},{"range":{"start":{"line":43,"character":14},"end":{"line":43,"character":21}},"kind":2},{"range":{"start":{"line":50,"character":14},"end":{"line":50,"character":21}},"kind":2},{"range":{"start":{"line":57,"character":14},"end":{"line":57,"character":21}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":9}}}Content-Length: 579

{"jsonrpc":"2.0","id":50,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":11},"end":{"line":20,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":17}},"message":"Use of undeclared identifier 'bluePin'; did you mean 'BluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'BluePin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":50,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":10},"contentChanges":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":11}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1236

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":16}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'luePin'; did you mean 'BluePin'? (fix available)\n\nDigitalTrumpet.ino.cpp:11:5: note: 'BluePin' declared here"},{"range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}},"severity":3,"message":"'BluePin' declared here\n\nDigitalTrumpet.ino.cpp:44:11: error: use of undeclared identifier 'luePin'; did you mean 'BluePin'?"},{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'greenPin'; did you mean 'GreenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'GreenPin' declared here"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'GreenPin' declared here\n\nDigitalTrumpet.ino.cpp:45:11: error: use of undeclared identifier 'greenPin'; did you mean 'GreenPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":11},"contentChanges":[{"range":{"start":{"line":20,"character":10},"end":{"line":20,"character":10}},"rangeLength":0,"text":"B"}]}}
>>>
Content-Length: 708

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":18}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'greenPin'; did you mean 'GreenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'GreenPin' declared here"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'GreenPin' declared here\n\nDigitalTrumpet.ino.cpp:45:11: error: use of undeclared identifier 'greenPin'; did you mean 'GreenPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":20,"character":11},"end":{"line":20,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":51,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":52,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":21,"character":11}}}
>>>
Content-Length: 921

{"id":52,"result":[{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"kind":1},{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":18}},"kind":2},{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":22}},"kind":2},{"range":{"start":{"line":12,"character":14},"end":{"line":12,"character":22}},"kind":2},{"range":{"start":{"line":21,"character":14},"end":{"line":21,"character":22}},"kind":2},{"range":{"start":{"line":28,"character":14},"end":{"line":28,"character":22}},"kind":2},{"range":{"start":{"line":35,"character":14},"end":{"line":35,"character":22}},"kind":2},{"range":{"start":{"line":42,"character":14},"end":{"line":42,"character":22}},"kind":2},{"range":{"start":{"line":49,"character":14},"end":{"line":49,"character":22}},"kind":2},{"range":{"start":{"line":56,"character":14},"end":{"line":56,"character":22}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":11}}}Content-Length: 582

{"jsonrpc":"2.0","id":53,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":21,"character":11},"end":{"line":21,"character":11}},"context":{"diagnostics":[{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":18}},"message":"Use of undeclared identifier 'greenPin'; did you mean 'GreenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'GreenPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":53,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":12},"contentChanges":[{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":11}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 706

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":17}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'reenPin'; did you mean 'GreenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'GreenPin' declared here"},{"range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}},"severity":3,"message":"'GreenPin' declared here\n\nDigitalTrumpet.ino.cpp:45:11: error: use of undeclared identifier 'reenPin'; did you mean 'GreenPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 581

{"jsonrpc":"2.0","id":54,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":17}},"message":"Use of undeclared identifier 'reenPin'; did you mean 'GreenPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:10:5: note: 'GreenPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":54,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":13},"contentChanges":[{"range":{"start":{"line":21,"character":10},"end":{"line":21,"character":10}},"rangeLength":0,"text":"G"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":55,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":21,"character":11},"end":{"line":21,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":55,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":13}}}Content-Length: 211

{"jsonrpc":"2.0","id":56,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":34}}}
>>>
Content-Length: 221

{"id":56,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":44,"character":8},"end":{"line":44,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":57,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":33}}}
>>>
Content-Length: 228

{"id":57,"result":{"contents":{"kind":"markdown","value":"### macro `INPUT_PULLUP`  \n\n---\n```cpp\n#define INPUT_PULLUP 0x2\n```"},"range":{"start":{"line":37,"character":24},"end":{"line":37,"character":36}}},"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":58,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":14,"character":34}}}
>>>
Content-Length: 221

{"id":58,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":44,"character":8},"end":{"line":44,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":59,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":6,"character":14}}}
>>>
Content-Length: 37

{"id":59,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":13}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":13}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 206

{"jsonrpc":"2.0","id":60,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":20,"character":22}}}
>>>
Content-Length: 216

{"id":60,"result":{"contents":{"kind":"markdown","value":"### macro `OUTPUT`  \n\n---\n```cpp\n#define OUTPUT 0x1\n```"},"range":{"start":{"line":43,"character":19},"end":{"line":43,"character":25}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":61,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":11}}}
>>>
Content-Length: 39

{"id":61,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":62,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":33}}}
>>>
Content-Length: 304

{"id":62,"result":{"contents":{"kind":"markdown","value":"### variable `fourthKeyPin`  \n\n---\nType: `int`  \nValue = `5`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint fourthKeyPin = 5\n```"},"range":{"start":{"line":59,"character":25},"end":{"line":59,"character":37}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":63,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":33}}}
>>>
Content-Length: 300

{"id":63,"result":[{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}},"kind":1},{"range":{"start":{"line":16,"character":10},"end":{"line":16,"character":22}},"kind":2},{"range":{"start":{"line":36,"character":25},"end":{"line":36,"character":37}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":64,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":36,"character":25},"end":{"line":36,"character":37}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":64,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":65,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":19,"character":13}}}
>>>
Content-Length: 292

{"id":65,"result":{"contents":{"kind":"markdown","value":"### variable `RedPin`  \n\n---\nType: `int`  \nValue = `9`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint RedPin = 9\n```"},"range":{"start":{"line":42,"character":10},"end":{"line":42,"character":16}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":66,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":19,"character":13}}}
>>>
Content-Length: 921

{"id":66,"result":[{"range":{"start":{"line":6,"character":4},"end":{"line":6,"character":10}},"kind":1},{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"kind":2},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":20}},"kind":2},{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":20}},"kind":2},{"range":{"start":{"line":20,"character":14},"end":{"line":20,"character":20}},"kind":2},{"range":{"start":{"line":27,"character":14},"end":{"line":27,"character":20}},"kind":2},{"range":{"start":{"line":34,"character":14},"end":{"line":34,"character":20}},"kind":2},{"range":{"start":{"line":41,"character":14},"end":{"line":41,"character":20}},"kind":2},{"range":{"start":{"line":48,"character":14},"end":{"line":48,"character":20}},"kind":2},{"range":{"start":{"line":55,"character":14},"end":{"line":55,"character":20}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":67,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":67,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":14},"contentChanges":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":4}},"rangeLength":0,"text":"  "}]}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":14}}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":15},"contentChanges":[{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":6}},"rangeLength":6,"text":""}]}}Content-Length: 206

{"jsonrpc":"2.0","id":68,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":13}}}
>>>
Content-Length: 285

{"id":68,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":50,"character":6},"end":{"line":50,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":16},"contentChanges":[{"range":{"start":{"line":27,"character":40},"end":{"line":28,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 280

{"jsonrpc":"2.0","id":69,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":40},"end":{"line":27,"character":40}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":69,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":16}}}Content-Length: 308

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":17},"contentChanges":[{"range":{"start":{"line":27,"character":40},"end":{"line":27,"character":40}},"rangeLength":0,"text":"\n    "}]}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":18},"contentChanges":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":4}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'r'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":19},"contentChanges":[{"range":{"start":{"line":28,"character":5},"end":{"line":28,"character":5}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 're'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 459

{"jsonrpc":"2.0","id":70,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":6},"end":{"line":28,"character":6}},"context":{"diagnostics":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":6}},"message":"Use of undeclared identifier 're'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":70,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":19}}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":20},"contentChanges":[{"range":{"start":{"line":28,"character":5},"end":{"line":28,"character":6}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'r'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":21},"contentChanges":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":5}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":22},"contentChanges":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":4}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'r'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":23},"contentChanges":[{"range":{"start":{"line":28,"character":5},"end":{"line":28,"character":5}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 're'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":24},"contentChanges":[{"range":{"start":{"line":28,"character":6},"end":{"line":28,"character":6}},"rangeLength":0,"text":"d"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":71,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":7},"end":{"line":28,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":71,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":24}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":25},"contentChanges":[{"range":{"start":{"line":28,"character":7},"end":{"line":28,"character":7}},"rangeLength":0,"text":"()"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 284

{"jsonrpc":"2.0","id":72,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":8},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 122

{"id":72,"result":{"signatures":[{"label":"red() -\u003e void"}],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":73,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":8},"end":{"line":28,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":73,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":25}}}Content-Length: 318

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":26},"contentChanges":[{"range":{"start":{"line":28,"character":0},"end":{"line":29,"character":0}},"rangeLength":10,"text":"    red()      \n"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 381

{"jsonrpc":"2.0","id":74,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":0},"context":{"isRetrigger":true,"triggerKind":3,"activeSignatureHelp":{"signatures":[{"label":"red() -> void","parameters":[]}],"activeSignature":0,"activeParameter":0}}}}
>>>
Content-Length: 92

{"id":74,"result":{"signatures":[],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":26}}}Content-Length: 205

{"jsonrpc":"2.0","id":75,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":8}}}
>>>
Content-Length: 227

{"id":75,"result":{"contents":{"kind":"markdown","value":"### function `red`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid red()\n```"},"range":{"start":{"line":51,"character":8},"end":{"line":51,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":76,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":9},"end":{"line":28,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":76,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":77,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":10}}}
>>>
Content-Length: 39

{"id":77,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":27},"contentChanges":[{"range":{"start":{"line":28,"character":9},"end":{"line":28,"character":9}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":78,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":78,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":27}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":27}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":28},"contentChanges":[{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":4}},"rangeLength":0,"text":"y"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'y'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":29},"contentChanges":[{"range":{"start":{"line":31,"character":5},"end":{"line":31,"character":5}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'ye'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":30},"contentChanges":[{"range":{"start":{"line":31,"character":6},"end":{"line":31,"character":6}},"rangeLength":0,"text":"l"}]}}
>>>
Content-Length: 355

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'yel'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":31},"contentChanges":[{"range":{"start":{"line":31,"character":7},"end":{"line":31,"character":7}},"rangeLength":0,"text":"l"}]}}
>>>
Content-Length: 356

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'yell'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 461

{"jsonrpc":"2.0","id":79,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":8},"end":{"line":31,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":8}},"message":"Use of undeclared identifier 'yell'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":79,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":31}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32},"contentChanges":[{"range":{"start":{"line":31,"character":8},"end":{"line":31,"character":8}},"rangeLength":0,"text":"o"}]}}
>>>
Content-Length: 666

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":9}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'yello'; did you mean 'yellow'? (fix available)\n\nDigitalTrumpet.ino.cpp:23:6: note: 'yellow' declared here"},{"range":{"start":{"line":33,"character":2},"end":{"line":33,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 571

{"jsonrpc":"2.0","id":80,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":9},"end":{"line":31,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":9}},"message":"Use of undeclared identifier 'yello'; did you mean 'yellow'? (fix available)\n\nDigitalTrumpet.ino.cpp:23:6: note: 'yellow' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 189

{"id":80,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":33},"contentChanges":[{"range":{"start":{"line":31,"character":9},"end":{"line":31,"character":9}},"rangeLength":0,"text":"w"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":33,"character":2},"end":{"line":33,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":34},"contentChanges":[{"range":{"start":{"line":31,"character":10},"end":{"line":31,"character":10}},"rangeLength":0,"text":"()"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":33,"character":2},"end":{"line":33,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 285

{"jsonrpc":"2.0","id":81,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":11},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 125

{"id":81,"result":{"signatures":[{"label":"yellow() -\u003e void"}],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":82,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":82,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":34}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":35},"contentChanges":[{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":11}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 343

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":12}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 385

{"jsonrpc":"2.0","id":83,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":12},"context":{"isRetrigger":true,"triggerKind":3,"activeSignatureHelp":{"signatures":[{"label":"yellow() -> void","parameters":[]}],"activeSignature":0,"activeParameter":0}}}}
>>>
Content-Length: 125

{"id":83,"result":{"signatures":[{"label":"yellow() -\u003e void"}],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 450

{"jsonrpc":"2.0","id":84,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":12},"end":{"line":31,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":12}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":84,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":35}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":36},"contentChanges":[{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":12}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":33,"character":2},"end":{"line":33,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 385

{"jsonrpc":"2.0","id":85,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":11},"context":{"isRetrigger":true,"triggerKind":3,"activeSignatureHelp":{"signatures":[{"label":"yellow() -> void","parameters":[]}],"activeSignature":0,"activeParameter":0}}}}
>>>
Content-Length: 125

{"id":85,"result":{"signatures":[{"label":"yellow() -\u003e void"}],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 385

{"jsonrpc":"2.0","id":86,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":12},"context":{"isRetrigger":true,"triggerKind":3,"activeSignatureHelp":{"signatures":[{"label":"yellow() -> void","parameters":[]}],"activeSignature":0,"activeParameter":0}}}}
>>>
Content-Length: 92

{"id":86,"result":{"signatures":[],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":36}}}Content-Length: 280

{"jsonrpc":"2.0","id":87,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":12},"end":{"line":31,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":87,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":37},"contentChanges":[{"range":{"start":{"line":31,"character":12},"end":{"line":31,"character":12}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":88,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":13},"end":{"line":31,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":88,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":37}}}Content-Length: 218

{"jsonrpc":"2.0","id":89,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":13}}}
>>>
Content-Length: 391

{"id":89,"result":[{"range":{"start":{"line":27,"character":6},"end":{"line":27,"character":17}},"kind":1},{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":24}},"kind":1},{"range":{"start":{"line":33,"character":13},"end":{"line":33,"character":24}},"kind":1},{"range":{"start":{"line":36,"character":13},"end":{"line":36,"character":24}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":90,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":33,"character":13},"end":{"line":33,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":90,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":38},"contentChanges":[{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":4}},"rangeLength":0,"text":"g"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'g'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":39},"contentChanges":[{"range":{"start":{"line":34,"character":5},"end":{"line":34,"character":5}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'gr'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":40},"contentChanges":[{"range":{"start":{"line":34,"character":6},"end":{"line":34,"character":6}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 355

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'gre'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":41},"contentChanges":[{"range":{"start":{"line":34,"character":7},"end":{"line":34,"character":7}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 556

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":36,"character":2},"end":{"line":36,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"},{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'gree'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":42},"contentChanges":[{"range":{"start":{"line":34,"character":8},"end":{"line":34,"character":8}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":36,"character":2},"end":{"line":36,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":91,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":9},"end":{"line":34,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":91,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":42}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":43},"contentChanges":[{"range":{"start":{"line":34,"character":9},"end":{"line":34,"character":9}},"rangeLength":0,"text":"()"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":36,"character":2},"end":{"line":36,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 285

{"jsonrpc":"2.0","id":92,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":10},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 124

{"id":92,"result":{"signatures":[{"label":"green() -\u003e void"}],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":93,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":10},"end":{"line":34,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":93,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":43}}}Content-Length: 384

{"jsonrpc":"2.0","id":94,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":11},"context":{"isRetrigger":true,"triggerKind":3,"activeSignatureHelp":{"signatures":[{"label":"green() -> void","parameters":[]}],"activeSignature":0,"activeParameter":0}}}}
>>>
Content-Length: 92

{"id":94,"result":{"signatures":[],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":95,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":95,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":44},"contentChanges":[{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":11}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":44}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 280

{"jsonrpc":"2.0","id":96,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":12},"end":{"line":34,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":96,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":97,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":36,"character":12},"end":{"line":36,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":97,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":45},"contentChanges":[{"range":{"start":{"line":37,"character":4},"end":{"line":37,"character":4}},"rangeLength":0,"text":"b"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":37,"character":4},"end":{"line":37,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'b'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":46},"contentChanges":[{"range":{"start":{"line":37,"character":5},"end":{"line":37,"character":5}},"rangeLength":0,"text":"l"}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":37,"character":4},"end":{"line":37,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'bl'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":47},"contentChanges":[{"range":{"start":{"line":37,"character":6},"end":{"line":37,"character":6}},"rangeLength":0,"text":"u"}]}}
>>>
Content-Length: 660

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":37,"character":4},"end":{"line":37,"character":7}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'blu'; did you mean 'blue'? (fix available)\n\nDigitalTrumpet.ino.cpp:29:6: note: 'blue' declared here"},{"range":{"start":{"line":39,"character":2},"end":{"line":39,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":48},"contentChanges":[{"range":{"start":{"line":37,"character":7},"end":{"line":37,"character":7}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":39,"character":2},"end":{"line":39,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":98,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":37,"character":8},"end":{"line":37,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":98,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":48}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":49},"contentChanges":[{"range":{"start":{"line":37,"character":8},"end":{"line":37,"character":8}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":99,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":37,"character":9},"end":{"line":37,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":99,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":49}}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":50},"contentChanges":[{"range":{"start":{"line":37,"character":8},"end":{"line":37,"character":9}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":39,"character":2},"end":{"line":39,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":100,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":37,"character":8},"end":{"line":37,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":100,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":50}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":51},"contentChanges":[{"range":{"start":{"line":37,"character":8},"end":{"line":37,"character":8}},"rangeLength":0,"text":"()"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":39,"character":2},"end":{"line":39,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 285

{"jsonrpc":"2.0","id":101,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":37,"character":9},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 124

{"id":101,"result":{"signatures":[{"label":"blue() -\u003e void"}],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":102,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":37,"character":9},"end":{"line":37,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":102,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":52},"contentChanges":[{"range":{"start":{"line":37,"character":9},"end":{"line":37,"character":9}},"rangeLength":0,"text":";"}]}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":102}}
>>>
Content-Length: 342

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":37,"character":9},"end":{"line":37,"character":10}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 384

{"jsonrpc":"2.0","id":103,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":37,"character":10},"context":{"isRetrigger":true,"triggerKind":3,"activeSignatureHelp":{"signatures":[{"label":"blue() -> void","parameters":[]}],"activeSignature":0,"activeParameter":0}}}}
>>>
Content-Length: 124

{"id":103,"result":{"signatures":[{"label":"blue() -\u003e void"}],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 450

{"jsonrpc":"2.0","id":104,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":37,"character":10},"end":{"line":37,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":37,"character":9},"end":{"line":37,"character":10}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":104,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":52}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":53},"contentChanges":[{"range":{"start":{"line":37,"character":9},"end":{"line":37,"character":10}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":39,"character":2},"end":{"line":39,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 383

{"jsonrpc":"2.0","id":105,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":37,"character":9},"context":{"isRetrigger":true,"triggerKind":3,"activeSignatureHelp":{"signatures":[{"label":"blue() -> void","parameters":[]}],"activeSignature":0,"activeParameter":0}}}}
>>>
Content-Length: 124

{"id":105,"result":{"signatures":[{"label":"blue() -\u003e void"}],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":106,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":37,"character":9},"end":{"line":37,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":106,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":53}}}Content-Length: 384

{"jsonrpc":"2.0","id":107,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":37,"character":10},"context":{"isRetrigger":true,"triggerKind":3,"activeSignatureHelp":{"signatures":[{"label":"blue() -> void","parameters":[]}],"activeSignature":0,"activeParameter":0}}}}
>>>
Content-Length: 93

{"id":107,"result":{"signatures":[],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":108,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":37,"character":10},"end":{"line":37,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":108,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":54},"contentChanges":[{"range":{"start":{"line":37,"character":10},"end":{"line":37,"character":10}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":109,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":109,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":54}}}Content-Length: 211

{"jsonrpc":"2.0","id":110,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":37,"character":7}}}
>>>
Content-Length: 192

{"id":110,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","range":{"start":{"line":40,"character":5},"end":{"line":40,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":111,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":37,"character":7}}}
>>>
Content-Length: 230

{"id":111,"result":{"contents":{"kind":"markdown","value":"### function `blue`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid blue()\n```"},"range":{"start":{"line":60,"character":4},"end":{"line":60,"character":8}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":112,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":38,"character":6}}}
>>>
Content-Length: 40

{"id":112,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":113,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":7}}}
>>>
Content-Length: 40

{"id":113,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":114,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":35,"character":6}}}
>>>
Content-Length: 40

{"id":114,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":55},"contentChanges":[{"range":{"start":{"line":38,"character":4},"end":{"line":38,"character":6}},"rangeLength":2,"text":""}]}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":56},"contentChanges":[{"range":{"start":{"line":35,"character":4},"end":{"line":35,"character":6}},"rangeLength":2,"text":""}]}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":56}}}Content-Length: 206

{"jsonrpc":"2.0","id":115,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":5}}}
>>>
Content-Length: 40

{"id":115,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":57},"contentChanges":[{"range":{"start":{"line":35,"character":2},"end":{"line":35,"character":4}},"rangeLength":2,"text":""}]}}Content-Length: 206

{"jsonrpc":"2.0","id":116,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":6}}}
>>>
Content-Length: 40

{"id":116,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":58},"contentChanges":[{"range":{"start":{"line":35,"character":0},"end":{"line":35,"character":2}},"rangeLength":2,"text":""}]}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":59},"contentChanges":[{"range":{"start":{"line":34,"character":12},"end":{"line":35,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 281

{"jsonrpc":"2.0","id":117,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":12},"end":{"line":34,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":117,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":59}}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":60},"contentChanges":[{"range":{"start":{"line":37,"character":2},"end":{"line":37,"character":4}},"rangeLength":2,"text":""}]}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":61},"contentChanges":[{"range":{"start":{"line":37,"character":0},"end":{"line":37,"character":2}},"rangeLength":2,"text":""}]}}Content-Length: 206

{"jsonrpc":"2.0","id":118,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":8}}}
>>>
Content-Length: 40

{"id":118,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":62},"contentChanges":[{"range":{"start":{"line":36,"character":11},"end":{"line":37,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 281

{"jsonrpc":"2.0","id":119,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":119,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":120,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":9}}}
>>>
Content-Length: 235

{"id":120,"result":{"contents":{"kind":"markdown","value":"### function `yellow`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid yellow()\n```"},"range":{"start":{"line":54,"character":4},"end":{"line":54,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":121,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":9}}}
>>>
Content-Length: 301

{"id":121,"result":[{"range":{"start":{"line":17,"character":5},"end":{"line":17,"character":11}},"kind":1},{"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":10}},"kind":1},{"range":{"start":{"line":19,"character":5},"end":{"line":19,"character":11}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":62}}}Content-Length: 279

{"jsonrpc":"2.0","id":122,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":9},"end":{"line":31,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":122,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":63},"contentChanges":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":6}},"rangeLength":2,"text":""}]}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":64},"contentChanges":[{"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":4}},"rangeLength":2,"text":""}]}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":65},"contentChanges":[{"range":{"start":{"line":32,"character":0},"end":{"line":32,"character":2}},"rangeLength":2,"text":""}]}}Content-Length: 206

{"jsonrpc":"2.0","id":123,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":8}}}
>>>
Content-Length: 235

{"id":123,"result":{"contents":{"kind":"markdown","value":"### function `yellow`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid yellow()\n```"},"range":{"start":{"line":54,"character":4},"end":{"line":54,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":66},"contentChanges":[{"range":{"start":{"line":31,"character":13},"end":{"line":32,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 206

{"jsonrpc":"2.0","id":124,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":9}}}
>>>
Content-Length: 229

{"id":124,"result":{"contents":{"kind":"markdown","value":"### function `red`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid red()\n```"},"range":{"start":{"line":51,"character":9},"end":{"line":51,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":125,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":13},"end":{"line":31,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":125,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":66}}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":67},"contentChanges":[{"range":{"start":{"line":29,"character":4},"end":{"line":29,"character":6}},"rangeLength":2,"text":""}]}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":68},"contentChanges":[{"range":{"start":{"line":29,"character":2},"end":{"line":29,"character":4}},"rangeLength":2,"text":""}]}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":69},"contentChanges":[{"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":2}},"rangeLength":2,"text":""}]}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":70},"contentChanges":[{"range":{"start":{"line":28,"character":16},"end":{"line":29,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 206

{"jsonrpc":"2.0","id":126,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":8}}}
>>>
Content-Length: 228

{"id":126,"result":{"contents":{"kind":"markdown","value":"### function `red`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid red()\n```"},"range":{"start":{"line":51,"character":8},"end":{"line":51,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":70}}}Content-Length: 279

{"jsonrpc":"2.0","id":127,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":38,"character":1},"end":{"line":38,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":127,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":70}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":70}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 206

{"jsonrpc":"2.0","id":128,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":48,"character":6}}}
>>>
Content-Length: 40

{"id":128,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":129,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":49,"character":6}}}
>>>
Content-Length: 40

{"id":129,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":130,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":41,"character":0},"end":{"line":49,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":130,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":71},"contentChanges":[{"range":{"start":{"line":41,"character":0},"end":{"line":49,"character":6}},"rangeLength":129,"text":""}]}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":71}}}Content-Length: 218

{"jsonrpc":"2.0","id":131,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":41,"character":5}}}
>>>
Content-Length: 38

{"id":131,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":132,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":41,"character":5},"end":{"line":41,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":132,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":133,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":40,"character":0},"end":{"line":42,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":133,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":72},"contentChanges":[{"range":{"start":{"line":40,"character":0},"end":{"line":42,"character":2}},"rangeLength":14,"text":""}]}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":73},"contentChanges":[{"range":{"start":{"line":39,"character":0},"end":{"line":40,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":74},"contentChanges":[{"range":{"start":{"line":38,"character":1},"end":{"line":39,"character":0}},"rangeLength":1,"text":""}]}}Content-Length: 279

{"jsonrpc":"2.0","id":134,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":38,"character":1},"end":{"line":38,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":134,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":74}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":74}}}Content-Length: 281

{"jsonrpc":"2.0","id":135,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":135,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":136,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":136,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":137,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":7}}}
>>>
Content-Length: 294

{"id":137,"result":[{"range":{"start":{"line":0,"character":5},"end":{"line":0,"character":8}},"kind":1},{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":7}},"kind":1},{"range":{"start":{"line":2,"character":5},"end":{"line":2,"character":8}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":138,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":138,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":139,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":139,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":140,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":10}}}
>>>
Content-Length: 40

{"id":140,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":141,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":3},"end":{"line":28,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":141,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":142,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":5},"end":{"line":28,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":142,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":143,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":143,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":144,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":9}}}
>>>
Content-Length: 38

{"id":144,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":145,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":11}}}
>>>
Content-Length: 38

{"id":145,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":146,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":10}}}
>>>
Content-Length: 232

{"id":146,"result":{"contents":{"kind":"markdown","value":"### function `blue`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid blue()\n```"},"range":{"start":{"line":57,"character":10},"end":{"line":57,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":147,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":12}}}
>>>
Content-Length: 40

{"id":147,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":148,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":13}}}
>>>
Content-Length: 40

{"id":148,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":75},"contentChanges":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":10}},"rangeLength":6,"text":"b"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'b'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":76},"contentChanges":[{"range":{"start":{"line":28,"character":5},"end":{"line":28,"character":5}},"rangeLength":0,"text":"l"}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'bl'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":77},"contentChanges":[{"range":{"start":{"line":28,"character":6},"end":{"line":28,"character":6}},"rangeLength":0,"text":"u"}]}}
>>>
Content-Length: 660

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":7}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'blu'; did you mean 'blue'? (fix available)\n\nDigitalTrumpet.ino.cpp:29:6: note: 'blue' declared here"},{"range":{"start":{"line":29,"character":2},"end":{"line":29,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":78},"contentChanges":[{"range":{"start":{"line":28,"character":7},"end":{"line":28,"character":7}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":2},"end":{"line":29,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79},"contentChanges":[{"range":{"start":{"line":28,"character":8},"end":{"line":28,"character":8}},"rangeLength":0,"text":"()"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":2},"end":{"line":29,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 285

{"jsonrpc":"2.0","id":149,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":9},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 124

{"id":149,"result":{"signatures":[{"label":"blue() -\u003e void"}],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":150,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":9},"end":{"line":28,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":150,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":79}}}Content-Length: 384

{"jsonrpc":"2.0","id":151,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":10},"context":{"isRetrigger":true,"triggerKind":3,"activeSignatureHelp":{"signatures":[{"label":"blue() -> void","parameters":[]}],"activeSignature":0,"activeParameter":0}}}}
>>>
Content-Length: 93

{"id":151,"result":{"signatures":[],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":152,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":152,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":80},"contentChanges":[{"range":{"start":{"line":28,"character":10},"end":{"line":28,"character":10}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":80}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 281

{"jsonrpc":"2.0","id":153,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":153,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":154,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":11}}}
>>>
Content-Length: 392

{"id":154,"result":[{"range":{"start":{"line":27,"character":6},"end":{"line":27,"character":17}},"kind":1},{"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":24}},"kind":1},{"range":{"start":{"line":31,"character":13},"end":{"line":31,"character":24}},"kind":1},{"range":{"start":{"line":33,"character":13},"end":{"line":33,"character":24}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":155,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":11},"end":{"line":27,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":155,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":156,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":11}}}
>>>
Content-Length: 38

{"id":156,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":157,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":11},"end":{"line":30,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":157,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":158,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":10}}}
>>>
Content-Length: 301

{"id":158,"result":[{"range":{"start":{"line":17,"character":5},"end":{"line":17,"character":11}},"kind":1},{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":10}},"kind":1},{"range":{"start":{"line":19,"character":5},"end":{"line":19,"character":11}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":159,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":9},"end":{"line":30,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":159,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":160,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":10},"end":{"line":30,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":160,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":81},"contentChanges":[{"range":{"start":{"line":30,"character":9},"end":{"line":30,"character":10}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 466

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":9}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'yello'; did you mean 'yellow'? (fix available)\n\nDigitalTrumpet.ino.cpp:23:6: note: 'yellow' declared here"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":82},"contentChanges":[{"range":{"start":{"line":30,"character":8},"end":{"line":30,"character":9}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 356

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'yell'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":83},"contentChanges":[{"range":{"start":{"line":30,"character":7},"end":{"line":30,"character":8}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 355

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'yel'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":84},"contentChanges":[{"range":{"start":{"line":30,"character":6},"end":{"line":30,"character":7}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'ye'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":85},"contentChanges":[{"range":{"start":{"line":30,"character":5},"end":{"line":30,"character":6}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'y'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 459

{"jsonrpc":"2.0","id":161,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":5},"end":{"line":30,"character":5}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":5}},"message":"Use of undeclared identifier 'y'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":161,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":86},"contentChanges":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":5}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 341

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":5},"end":{"line":30,"character":6}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":162,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":162,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":87},"contentChanges":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":4}},"rangeLength":0,"text":"g"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'g'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":88},"contentChanges":[{"range":{"start":{"line":30,"character":5},"end":{"line":30,"character":5}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'gr'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":89},"contentChanges":[{"range":{"start":{"line":30,"character":6},"end":{"line":30,"character":6}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 355

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'gre'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":90},"contentChanges":[{"range":{"start":{"line":30,"character":7},"end":{"line":30,"character":7}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 463

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":8}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'gree'; did you mean 'green'? (fix available)\n\nDigitalTrumpet.ino.cpp:25:6: note: 'green' declared here"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 569

{"jsonrpc":"2.0","id":163,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":8},"end":{"line":30,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":8}},"message":"Use of undeclared identifier 'gree'; did you mean 'green'? (fix available)\n\nDigitalTrumpet.ino.cpp:25:6: note: 'green' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 190

{"id":163,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":91},"contentChanges":[{"range":{"start":{"line":30,"character":8},"end":{"line":30,"character":8}},"rangeLength":0,"text":"m"}]}}
>>>
Content-Length: 464

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":9}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'greem'; did you mean 'green'? (fix available)\n\nDigitalTrumpet.ino.cpp:25:6: note: 'green' declared here"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 570

{"jsonrpc":"2.0","id":164,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":9},"end":{"line":30,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":9}},"message":"Use of undeclared identifier 'greem'; did you mean 'green'? (fix available)\n\nDigitalTrumpet.ino.cpp:25:6: note: 'green' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 190

{"id":164,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":91}}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":92},"contentChanges":[{"range":{"start":{"line":30,"character":8},"end":{"line":30,"character":9}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 463

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":8}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'gree'; did you mean 'green'? (fix available)\n\nDigitalTrumpet.ino.cpp:25:6: note: 'green' declared here"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 569

{"jsonrpc":"2.0","id":165,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":8},"end":{"line":30,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":8}},"message":"Use of undeclared identifier 'gree'; did you mean 'green'? (fix available)\n\nDigitalTrumpet.ino.cpp:25:6: note: 'green' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 190

{"id":165,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":93},"contentChanges":[{"range":{"start":{"line":30,"character":8},"end":{"line":30,"character":8}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":166,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":9},"end":{"line":30,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":166,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":93}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 218

{"jsonrpc":"2.0","id":167,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":9}}}
>>>
Content-Length: 38

{"id":167,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":168,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":9},"end":{"line":31,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":168,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":169,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":9}}}
>>>
Content-Length: 387

{"id":169,"result":[{"range":{"start":{"line":24,"character":5},"end":{"line":24,"character":10}},"kind":1},{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":9}},"kind":1},{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":9}},"kind":1},{"range":{"start":{"line":26,"character":5},"end":{"line":26,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":170,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":9},"end":{"line":32,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":170,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":94},"contentChanges":[{"range":{"start":{"line":32,"character":8},"end":{"line":32,"character":9}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 463

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":8}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'gree'; did you mean 'green'? (fix available)\n\nDigitalTrumpet.ino.cpp:25:6: note: 'green' declared here"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":95},"contentChanges":[{"range":{"start":{"line":32,"character":7},"end":{"line":32,"character":8}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 355

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'gre'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":96},"contentChanges":[{"range":{"start":{"line":32,"character":6},"end":{"line":32,"character":7}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'gr'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":97},"contentChanges":[{"range":{"start":{"line":32,"character":5},"end":{"line":32,"character":6}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'g'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":98},"contentChanges":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":5}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 341

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":5},"end":{"line":32,"character":6}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":171,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":171,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":98}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":99},"contentChanges":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":4}},"rangeLength":0,"text":"y"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'y'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":100},"contentChanges":[{"range":{"start":{"line":32,"character":5},"end":{"line":32,"character":5}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'ye'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":101},"contentChanges":[{"range":{"start":{"line":32,"character":6},"end":{"line":32,"character":6}},"rangeLength":0,"text":"l"}]}}
>>>
Content-Length: 355

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'yel'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":102},"contentChanges":[{"range":{"start":{"line":32,"character":7},"end":{"line":32,"character":7}},"rangeLength":0,"text":"l"}]}}
>>>
Content-Length: 356

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'yell'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":103},"contentChanges":[{"range":{"start":{"line":32,"character":8},"end":{"line":32,"character":8}},"rangeLength":0,"text":"o"}]}}
>>>
Content-Length: 466

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":9}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'yello'; did you mean 'yellow'? (fix available)\n\nDigitalTrumpet.ino.cpp:23:6: note: 'yellow' declared here"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":104},"contentChanges":[{"range":{"start":{"line":32,"character":9},"end":{"line":32,"character":9}},"rangeLength":0,"text":"w"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":172,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":10},"end":{"line":32,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":172,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":104}}}Content-Length: 219

{"jsonrpc":"2.0","id":173,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":33,"character":10}}}
>>>
Content-Length: 38

{"id":173,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":174,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":33,"character":10},"end":{"line":33,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":174,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":175,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":10},"end":{"line":34,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":175,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":176,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":34,"character":8}}}
>>>
Content-Length: 385

{"id":176,"result":[{"range":{"start":{"line":38,"character":5},"end":{"line":38,"character":9}},"kind":1},{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":8}},"kind":1},{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":8}},"kind":1},{"range":{"start":{"line":40,"character":5},"end":{"line":40,"character":9}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":177,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":8},"end":{"line":34,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":177,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":105},"contentChanges":[{"range":{"start":{"line":34,"character":7},"end":{"line":34,"character":8}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 460

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":7}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'blu'; did you mean 'blue'? (fix available)\n\nDigitalTrumpet.ino.cpp:29:6: note: 'blue' declared here"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":106},"contentChanges":[{"range":{"start":{"line":34,"character":6},"end":{"line":34,"character":7}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'bl'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":107},"contentChanges":[{"range":{"start":{"line":34,"character":5},"end":{"line":34,"character":6}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'b'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":108},"contentChanges":[{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":5}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 341

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":5},"end":{"line":34,"character":6}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":178,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":178,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":109},"contentChanges":[{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":4}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'r'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":110},"contentChanges":[{"range":{"start":{"line":34,"character":5},"end":{"line":34,"character":5}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 're'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":111},"contentChanges":[{"range":{"start":{"line":34,"character":6},"end":{"line":34,"character":6}},"rangeLength":0,"text":"d"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":179,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":34,"character":7},"end":{"line":34,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":179,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":111}}}Content-Length: 218

{"jsonrpc":"2.0","id":180,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":35,"character":7}}}
>>>
Content-Length: 38

{"id":180,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":112},"contentChanges":[{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":4}},"rangeLength":0,"text":"t"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 't'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":113},"contentChanges":[{"range":{"start":{"line":36,"character":5},"end":{"line":36,"character":5}},"rangeLength":0,"text":"u"}]}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":114},"contentChanges":[{"range":{"start":{"line":36,"character":6},"end":{"line":36,"character":6}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 355

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'tur'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":115},"contentChanges":[{"range":{"start":{"line":36,"character":7},"end":{"line":36,"character":7}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 356

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'turn'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","id":181,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":36,"character":8},"end":{"line":36,"character":8}},"context":{"diagnostics":[{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":8}},"message":"Use of undeclared identifier 'turn'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":181,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":115}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":116},"contentChanges":[{"range":{"start":{"line":36,"character":8},"end":{"line":36,"character":8}},"rangeLength":0,"text":"O"}]}}
>>>
Content-Length: 357

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":9}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'turnO'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":117},"contentChanges":[{"range":{"start":{"line":36,"character":9},"end":{"line":36,"character":9}},"rangeLength":0,"text":"f"}]}}
>>>
Content-Length: 670

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":10}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'turnOf'; did you mean 'turnOff'? (fix available)\n\nDigitalTrumpet.ino.cpp:33:6: note: 'turnOff' declared here"},{"range":{"start":{"line":37,"character":2},"end":{"line":37,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":118},"contentChanges":[{"range":{"start":{"line":36,"character":10},"end":{"line":36,"character":10}},"rangeLength":0,"text":"f"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":37,"character":2},"end":{"line":37,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":182,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":182,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":119},"contentChanges":[{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":11}},"rangeLength":0,"text":"()"}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":37,"character":2},"end":{"line":37,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 286

{"jsonrpc":"2.0","id":183,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":12},"context":{"isRetrigger":false,"triggerCharacter":"(","triggerKind":2}}}
>>>
Content-Length: 127

{"id":183,"result":{"signatures":[{"label":"turnOff() -\u003e void"}],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":184,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":36,"character":12},"end":{"line":36,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":184,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":119}}}Content-Length: 386

{"jsonrpc":"2.0","id":185,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":37,"character":0},"context":{"isRetrigger":true,"triggerKind":3,"activeSignatureHelp":{"signatures":[{"label":"turnOff() -> void","parameters":[]}],"activeSignature":0,"activeParameter":0}}}}
>>>
Content-Length: 93

{"id":185,"result":{"signatures":[],"activeSignature":0,"activeParameter":0},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":120},"contentChanges":[{"range":{"start":{"line":37,"character":0},"end":{"line":37,"character":0}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":186,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":37,"character":1},"end":{"line":37,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":186,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":120}}}Content-Length: 212

{"jsonrpc":"2.0","id":187,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":16}}}
>>>
Content-Length: 231

{"id":187,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","range":{"start":{"line":164,"character":4},"end":{"line":164,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5578

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out &= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) && defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) && defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out &= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) & bit) return HIGH;\n\treturn LOW;\n}\n"}}}Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}}
>>>
Content-Length: 201

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":188,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":18,"character":18}}}
>>>
Content-Length: 38

{"id":188,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":120}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 212

{"jsonrpc":"2.0","id":189,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":12,"character":14}}}
>>>
Content-Length: 38

{"id":189,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":190,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":12,"character":8}}}
>>>
Content-Length: 38

{"id":190,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":191,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":12,"character":6}}}
>>>
Content-Length: 38

{"id":191,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":192,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":11}}}
>>>
Content-Length: 199

{"id":192,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":1,"character":4},"end":{"line":1,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":193,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":11}}}
>>>
Content-Length: 303

{"id":193,"result":{"contents":{"kind":"markdown","value":"### variable `firstKeyPin`  \n\n---\nType: `int`  \nValue = `2`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint firstKeyPin = 2\n```"},"range":{"start":{"line":36,"character":10},"end":{"line":36,"character":21}}},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":121},"contentChanges":[{"range":{"start":{"line":37,"character":0},"end":{"line":37,"character":1}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 372

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":37,"character":2},"end":{"line":37,"character":3}},"severity":1,"code":"expected_semi_after_expr","source":"clang","message":"Expected ';' after expression (fix available)"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":194,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":11}}}
>>>
Content-Length: 303

{"id":194,"result":{"contents":{"kind":"markdown","value":"### variable `firstKeyPin`  \n\n---\nType: `int`  \nValue = `2`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint firstKeyPin = 2\n```"},"range":{"start":{"line":36,"character":10},"end":{"line":36,"character":21}}},"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":121}}}Content-Length: 207

{"jsonrpc":"2.0","id":195,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":11}}}
>>>
Content-Length: 303

{"id":195,"result":{"contents":{"kind":"markdown","value":"### variable `firstKeyPin`  \n\n---\nType: `int`  \nValue = `2`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint firstKeyPin = 2\n```"},"range":{"start":{"line":36,"character":10},"end":{"line":36,"character":21}}},"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":196,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":11}}}
>>>
Content-Length: 303

{"id":196,"result":{"contents":{"kind":"markdown","value":"### variable `firstKeyPin`  \n\n---\nType: `int`  \nValue = `2`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint firstKeyPin = 2\n```"},"range":{"start":{"line":36,"character":10},"end":{"line":36,"character":21}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":197,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":4}}}
>>>
Content-Length: 301

{"id":197,"result":[{"range":{"start":{"line":52,"character":5},"end":{"line":52,"character":12}},"kind":1},{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":11}},"kind":1},{"range":{"start":{"line":54,"character":5},"end":{"line":54,"character":12}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":198,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":11}}}
>>>
Content-Length: 303

{"id":198,"result":{"contents":{"kind":"markdown","value":"### variable `firstKeyPin`  \n\n---\nType: `int`  \nValue = `2`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint firstKeyPin = 2\n```"},"range":{"start":{"line":36,"character":10},"end":{"line":36,"character":21}}},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":199,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":36,"character":13},"end":{"line":36,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":199,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":122},"contentChanges":[{"range":{"start":{"line":36,"character":13},"end":{"line":36,"character":13}},"rangeLength":0,"text":";"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":200,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":36,"character":14},"end":{"line":36,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":200,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":122}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 212

{"jsonrpc":"2.0","id":201,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":11}}}
>>>
Content-Length: 199

{"id":201,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":1,"character":4},"end":{"line":1,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":202,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":7,"character":6}}}
>>>
Content-Length: 199

{"id":202,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":203,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":2,"character":1}}}
>>>
Content-Length: 38

{"id":203,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 199

{"jsonrpc":"2.0","id":204,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":38,"character":13}}}
>>>
Content-Length: 497

{"id":204,"result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\nRight now, PWM output only works on the pins with hardware support. These are defined in the appropriate pins\\_\\*.c file. For the rest of the pins, we default to digital output.  \n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"start":{"line":102,"character":2},"end":{"line":102,"character":13}}},"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":205,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":54,"character":7}}}
>>>
Content-Length: 239

{"id":205,"result":{"contents":{"kind":"markdown","value":"### function `turnOff`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid turnOff()\n```"},"range":{"start":{"line":118,"character":5},"end":{"line":118,"character":12}}},"jsonrpc":"2.0"}
<<<
Content-Length: 203

{"jsonrpc":"2.0","id":206,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":35,"character":4}}}
>>>
Content-Length: 38

{"id":206,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":122}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 205

{"jsonrpc":"2.0","id":207,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":2,"character":2}}}
>>>
Content-Length: 40

{"id":207,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":122}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 199

{"jsonrpc":"2.0","id":208,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":12,"character":11}}}
>>>
Content-Length: 40

{"id":208,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":209,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":19,"character":8}}}
>>>
Content-Length: 235

{"id":209,"result":{"contents":{"kind":"markdown","value":"### function `yellow`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid yellow()\n```"},"range":{"start":{"line":83,"character":5},"end":{"line":83,"character":11}}},"jsonrpc":"2.0"}
<<<
Content-Length: 199

{"jsonrpc":"2.0","id":210,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":20,"character":15}}}
>>>
Content-Length: 40

{"id":210,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 199

{"jsonrpc":"2.0","id":211,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":20,"character":17}}}
>>>
Content-Length: 40

{"id":211,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"jsonrpc":"2.0","id":212,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":0,"character":5}}}
>>>
Content-Length: 40

{"id":212,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 202

{"jsonrpc":"2.0","id":213,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":5,"character":3}}}
>>>
Content-Length: 230

{"id":213,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","range":{"start":{"line":103,"character":5},"end":{"line":103,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8991

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin >= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin >= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin >= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin >= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin >= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) && defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference << 4) | (pin & 0x07);\n#else\n\tADMUX = (analog_reference << 6) | (pin & 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) && defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high << 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) && defined(COM00) && !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) && defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) && defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) && defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) && defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val < 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}}}Content-Length: 190

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}}Content-Length: 202

{"jsonrpc":"2.0","id":214,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":0,"character":7}}}
>>>
Content-Length: 200

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","diagnostics":[]},"jsonrpc":"2.0"}Content-Length: 38

{"id":214,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 202

{"jsonrpc":"2.0","id":215,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":0,"character":7}}}
>>>
Content-Length: 38

{"id":215,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":216,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":12}}}
>>>
Content-Length: 40

{"id":216,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":217,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":6}}}
>>>
Content-Length: 301

{"id":217,"result":[{"range":{"start":{"line":17,"character":5},"end":{"line":17,"character":11}},"kind":1},{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":10}},"kind":1},{"range":{"start":{"line":19,"character":5},"end":{"line":19,"character":11}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":218,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":218,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":123},"contentChanges":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":10}},"rangeLength":6,"text":"o"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'o'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":124},"contentChanges":[{"range":{"start":{"line":32,"character":5},"end":{"line":32,"character":5}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 510

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":6}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":32,"character":7},"end":{"line":32,"character":8}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":125},"contentChanges":[{"range":{"start":{"line":32,"character":6},"end":{"line":32,"character":6}},"rangeLength":0,"text":"a"}]}}
>>>
Content-Length: 355

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":7}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'ora'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":126},"contentChanges":[{"range":{"start":{"line":32,"character":7},"end":{"line":32,"character":7}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 356

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":8}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'oran'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":127},"contentChanges":[{"range":{"start":{"line":32,"character":8},"end":{"line":32,"character":8}},"rangeLength":0,"text":"g"}]}}
>>>
Content-Length: 466

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":9}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'orang'; did you mean 'orange'? (fix available)\n\nDigitalTrumpet.ino.cpp:21:6: note: 'orange' declared here"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128},"contentChanges":[{"range":{"start":{"line":32,"character":9},"end":{"line":32,"character":9}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":219,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":10},"end":{"line":32,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":219,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 210

{"jsonrpc":"2.0","id":220,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":4,"character":9}}}
>>>
Content-Length: 199

{"id":220,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 212

{"jsonrpc":"2.0","id":221,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":12,"character":26}}}
>>>
Content-Length: 38

{"id":221,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":222,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":29}}}
>>>
Content-Length: 222

{"id":222,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":44,"character":8},"end":{"line":44,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":223,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":29}}}
>>>
Content-Length: 38

{"id":223,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":224,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":29}}}
>>>
Content-Length: 229

{"id":224,"result":{"contents":{"kind":"markdown","value":"### macro `INPUT_PULLUP`  \n\n---\n```cpp\n#define INPUT_PULLUP 0x2\n```"},"range":{"start":{"line":36,"character":23},"end":{"line":36,"character":35}}},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":225,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":13,"character":29},"end":{"line":13,"character":29}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 433

{"id":225,"result":[{"title":"Expand macro 'INPUT_PULLUP'","kind":"refactor","command":{"title":"Expand macro 'INPUT_PULLUP'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server727623955/sketch/DigitalTrumpet.ino.cpp","selection":{"start":{"line":36,"character":29},"end":{"line":36,"character":29}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":226,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":8,"character":4}}}
>>>
Content-Length: 199

{"id":226,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":8,"character":4},"end":{"line":8,"character":11}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 207

{"jsonrpc":"2.0","id":227,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":31}}}
>>>
Content-Length: 229

{"id":227,"result":{"contents":{"kind":"markdown","value":"### macro `INPUT_PULLUP`  \n\n---\n```cpp\n#define INPUT_PULLUP 0x2\n```"},"range":{"start":{"line":36,"character":23},"end":{"line":36,"character":35}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":228,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":11,"character":0}}}
>>>
Content-Length: 40

{"id":228,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":229,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":11,"character":13},"end":{"line":11,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":229,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":230,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":230,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":231,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":13,"character":37},"end":{"line":13,"character":37}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":231,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":232,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":16,"character":30}}}
>>>
Content-Length: 222

{"id":232,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":44,"character":8},"end":{"line":44,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":233,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":21,"character":14}}}
>>>
Content-Length: 199

{"id":233,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":7,"character":4},"end":{"line":7,"character":12}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 279

{"jsonrpc":"2.0","id":234,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":5},"end":{"line":27,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":234,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":2}}}Content-Length: 199

{"jsonrpc":"2.0","id":235,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":21,"character":18}}}
>>>
Content-Length: 40

{"id":235,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":236,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":21,"character":19}}}
>>>
Content-Length: 38

{"id":236,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 273

{"jsonrpc":"2.0","id":237,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":21,"character":14},"end":{"line":21,"character":22}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":237,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 199

{"jsonrpc":"2.0","id":238,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":21}}}
>>>
Content-Length: 40

{"id":238,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":239,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":23}}}
>>>
Content-Length: 38

{"id":239,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","id":240,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":23}}}
>>>
Content-Length: 38

{"id":240,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":3},"contentChanges":[{"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":25}},"rangeLength":3,"text":"255,165,0"}]}}Content-Length: 204

{"jsonrpc":"2.0","id":241,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":29}}}
>>>
Content-Length: 115

{"id":241,"error":{"code":-32602,"message":"trying to get AST for non-added document","data":null},"jsonrpc":"2.0"}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":94088,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1031

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":128,"text":"\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\nint fourthKeyPin = 5;\n\nint RedPin = 9;\nint GreenPin = 10;\nint BluePin = 11;   \n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n  pinMode(fourthKeyPin, INPUT_PULLUP);  \n\n  //set the buzzer pin as an output\n  pinMode(RedPin, OUTPUT);\n  pinMode(BluePin, OUTPUT);\n  pinMode(GreenPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {\n    blue();      \n  } else if (digitalRead(secondKeyPin) == LOW) {\n    green();\n  } else if (digitalRead(thirdKeyPin) == LOW) {\n    orange();\n  } else if (digitalRead(fourthKeyPin) == LOW) {\n    red();\n  } else {\n    turnOff();\n  }\n}\n"}}}Content-Length: 1444

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","languageId":"cpp","version":3,"text":"void red() {\n\n  //set the LED pins to values that make red\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}\n\nvoid orange() {\n\n  //set the LED pins to values that make orange\n  analogWrite(RedPin, 255,165,0);\n  analogWrite(GreenPin, 50);\n  analogWrite(BluePin, 0);\n}\n\n\nvoid yellow() {\n\n  //set the LED pins to values that make yellow\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid green() {\n\n  //set the LED pins to values that make green\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid cyan() {\n\n  //set the LED pins to values that make cyan\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 100);\n}\nvoid blue() {\n\n  //set the LED pins to values that make blue\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid magenta() {\n\n  //set the LED pins to values that make magenta\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid turnOff() {\n\n  //set all three LED pins to 0 or OFF\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}"}}}Content-Length: 277

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":5},"end":{"line":27,"character":5}},"context":{"diagnostics":[]}}}Content-Length: 271

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":31},"end":{"line":11,"character":31}},"context":{"diagnostics":[]}}}Content-Length: 202

{"jsonrpc":"2.0","id":3,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":10,"character":30}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}Content-Length: 202

{"jsonrpc":"2.0","id":4,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":10,"character":31}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}Content-Length: 202

{"jsonrpc":"2.0","id":5,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":28}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":3}}}Content-Length: 209

{"jsonrpc":"2.0","id":6,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":24}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 553

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":11,"character":2},"end":{"line":11,"character":13}},"severity":1,"code":"ovl_no_viable_function_in_call","source":"clang","message":"No matching function for call to 'analogWrite'\n\n/Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h:139:6:\nnote: candidate function not viable: requires 2 arguments, but 4 were provided"}]},"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":3,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":4,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":6,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 271

{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 389

{"id":7,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","selection":{"start":{"line":11,"character":22},"end":{"line":11,"character":25}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 197

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":24}}}
>>>
Content-Length: 38

{"id":8,"result":null,"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 209

{"jsonrpc":"2.0","id":9,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":27}}}
>>>
Content-Length: 36

{"id":9,"result":[],"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 203

{"jsonrpc":"2.0","id":10,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":27}}}
>>>
Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 37

{"id":10,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":29}},"context":{"diagnostics":[]}}}Content-Length: 293

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":4},"contentChanges":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":29}},"rangeLength":3,"text":""}]}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":11}}Content-Length: 198

{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":26}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":12}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":10}}Content-Length: 203

{"jsonrpc":"2.0","id":13,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":12,"character":26}}}Content-Length: 272

{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":26}},"context":{"diagnostics":[]}}}Content-Length: 210

{"jsonrpc":"2.0","id":15,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":12,"character":26}}}
>>>
Content-Length: 390

{"id":11,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","selection":{"start":{"line":11,"character":26},"end":{"line":11,"character":29}}}]}}],"jsonrpc":"2.0"}Content-Length: 39

{"id":12,"result":null,"jsonrpc":"2.0"}Content-Length: 229

{"id":13,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","range":{"start":{"line":103,"character":5},"end":{"line":103,"character":16}}}],"jsonrpc":"2.0"}Content-Length: 335

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}Content-Length: 37

{"id":14,"result":[],"jsonrpc":"2.0"}Content-Length: 2054

{"id":15,"result":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":13}},"kind":1},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":13}},"kind":1},{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":13}},"kind":1},{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":13}},"kind":1},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":13}},"kind":1},{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":13}},"kind":1},{"range":{"start":{"line":21,"character":2},"end":{"line":21,"character":13}},"kind":1},{"range":{"start":{"line":22,"character":2},"end":{"line":22,"character":13}},"kind":1},{"range":{"start":{"line":27,"character":2},"end":{"line":27,"character":13}},"kind":1},{"range":{"start":{"line":28,"character":2},"end":{"line":28,"character":13}},"kind":1},{"range":{"start":{"line":29,"character":2},"end":{"line":29,"character":13}},"kind":1},{"range":{"start":{"line":34,"character":2},"end":{"line":34,"character":13}},"kind":1},{"range":{"start":{"line":35,"character":2},"end":{"line":35,"character":13}},"kind":1},{"range":{"start":{"line":36,"character":2},"end":{"line":36,"character":13}},"kind":1},{"range":{"start":{"line":41,"character":2},"end":{"line":41,"character":13}},"kind":1},{"range":{"start":{"line":42,"character":2},"end":{"line":42,"character":13}},"kind":1},{"range":{"start":{"line":43,"character":2},"end":{"line":43,"character":13}},"kind":1},{"range":{"start":{"line":48,"character":2},"end":{"line":48,"character":13}},"kind":1},{"range":{"start":{"line":49,"character":2},"end":{"line":49,"character":13}},"kind":1},{"range":{"start":{"line":50,"character":2},"end":{"line":50,"character":13}},"kind":1},{"range":{"start":{"line":55,"character":2},"end":{"line":55,"character":13}},"kind":1},{"range":{"start":{"line":56,"character":2},"end":{"line":56,"character":13}},"kind":1},{"range":{"start":{"line":57,"character":2},"end":{"line":57,"character":13}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 203

{"jsonrpc":"2.0","id":16,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":12,"character":26}}}
>>>
Content-Length: 229

{"id":16,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","range":{"start":{"line":103,"character":5},"end":{"line":103,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":5},"contentChanges":[{"range":{"start":{"line":12,"character":24},"end":{"line":12,"character":26}},"rangeLength":2,"text":"165"}]}}
>>>
Content-Length: 335

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 203

{"jsonrpc":"2.0","id":17,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":27}}}
>>>
Content-Length: 37

{"id":17,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":12,"character":27},"end":{"line":12,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":18,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":27}}}
>>>
Content-Length: 39

{"id":19,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":5}}}Content-Length: 210

{"jsonrpc":"2.0","id":20,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":28}}}
>>>
Content-Length: 37

{"id":20,"result":[],"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 442

{"jsonrpc":"2.0","id":21,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":28}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 37

{"id":21,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":22,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":28}}}
>>>
Content-Length: 39

{"id":22,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 203

{"jsonrpc":"2.0","id":23,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":28}}}
>>>
Content-Length: 37

{"id":23,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 293

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":6},"contentChanges":[{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":28}},"rangeLength":1,"text":""}]}}Content-Length: 203

{"jsonrpc":"2.0","id":24,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":12,"character":26}}}
>>>
Content-Length: 37

{"id":24,"result":[],"jsonrpc":"2.0"}Content-Length: 506

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":28}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":25,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":13,"character":24}}}
>>>
Content-Length: 310

{"id":25,"result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"start":{"line":77,"character":24},"end":{"line":77,"character":25}}},"jsonrpc":"2.0"}
<<<
Content-Length: 613

{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":27}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"},{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":28}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":26,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":6}}}Content-Length: 210

{"jsonrpc":"2.0","id":27,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":13,"character":24}}}
>>>
Content-Length: 2054

{"id":27,"result":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":13}},"kind":1},{"range":{"start":{"line":4,"character":2},"end":{"line":4,"character":13}},"kind":1},{"range":{"start":{"line":5,"character":2},"end":{"line":5,"character":13}},"kind":1},{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":13}},"kind":1},{"range":{"start":{"line":13,"character":2},"end":{"line":13,"character":13}},"kind":1},{"range":{"start":{"line":20,"character":2},"end":{"line":20,"character":13}},"kind":1},{"range":{"start":{"line":21,"character":2},"end":{"line":21,"character":13}},"kind":1},{"range":{"start":{"line":22,"character":2},"end":{"line":22,"character":13}},"kind":1},{"range":{"start":{"line":27,"character":2},"end":{"line":27,"character":13}},"kind":1},{"range":{"start":{"line":28,"character":2},"end":{"line":28,"character":13}},"kind":1},{"range":{"start":{"line":29,"character":2},"end":{"line":29,"character":13}},"kind":1},{"range":{"start":{"line":34,"character":2},"end":{"line":34,"character":13}},"kind":1},{"range":{"start":{"line":35,"character":2},"end":{"line":35,"character":13}},"kind":1},{"range":{"start":{"line":36,"character":2},"end":{"line":36,"character":13}},"kind":1},{"range":{"start":{"line":41,"character":2},"end":{"line":41,"character":13}},"kind":1},{"range":{"start":{"line":42,"character":2},"end":{"line":42,"character":13}},"kind":1},{"range":{"start":{"line":43,"character":2},"end":{"line":43,"character":13}},"kind":1},{"range":{"start":{"line":48,"character":2},"end":{"line":48,"character":13}},"kind":1},{"range":{"start":{"line":49,"character":2},"end":{"line":49,"character":13}},"kind":1},{"range":{"start":{"line":50,"character":2},"end":{"line":50,"character":13}},"kind":1},{"range":{"start":{"line":55,"character":2},"end":{"line":55,"character":13}},"kind":1},{"range":{"start":{"line":56,"character":2},"end":{"line":56,"character":13}},"kind":1},{"range":{"start":{"line":57,"character":2},"end":{"line":57,"character":13}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":13,"character":24},"end":{"line":13,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":28,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":29,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":12,"character":25}}}
>>>
Content-Length: 39

{"id":29,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 293

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":7},"contentChanges":[{"range":{"start":{"line":13,"character":23},"end":{"line":13,"character":24}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 677

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":28}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":13,"character":23},"end":{"line":13,"character":24}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 294

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":8},"contentChanges":[{"range":{"start":{"line":13,"character":23},"end":{"line":13,"character":23}},"rangeLength":0,"text":"0"}]}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":3,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 506

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":28}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":13,"character":24},"end":{"line":13,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":30,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":31,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":12,"character":24}}}
>>>
Content-Length: 37

{"id":31,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":8}}}Content-Length: 210

{"jsonrpc":"2.0","id":32,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":24}}}
>>>
Content-Length: 37

{"id":32,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"jsonrpc":"2.0","id":33,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":24},"end":{"line":11,"character":24}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":33,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 613

{"jsonrpc":"2.0","id":34,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":27}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"},{"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":28}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":34,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 293

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":9},"contentChanges":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 335

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 442

{"jsonrpc":"2.0","id":35,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":26}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":35,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":9}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":9}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 203

{"jsonrpc":"2.0","id":36,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":12,"character":25}}}
>>>
Content-Length: 37

{"id":36,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":37,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":12,"character":23}}}
>>>
Content-Length: 310

{"id":37,"result":{"contents":{"kind":"markdown","value":"### function `analogWrite`  \n\n---\nâ†’ `void`  \nParameters:  \n- `uint8_t pin`\n- `int val`\n\n---\n```cpp\nvoid analogWrite(uint8_t pin, int val)\n```"},"range":{"start":{"line":76,"character":22},"end":{"line":76,"character":23}}},"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":27}}}
>>>
Content-Length: 39

{"id":38,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":39,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":26}}}
>>>
Content-Length: 39

{"id":39,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 462

{"jsonrpc":"2.0","id":40,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 37

{"id":40,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 442

{"jsonrpc":"2.0","id":41,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":26}},"context":{"diagnostics":[{"range":{"start":{"line":11,"character":26},"end":{"line":11,"character":27}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":41,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":42,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":10,"character":30}}}
>>>
Content-Length: 39

{"id":42,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 294

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":10},"contentChanges":[{"range":{"start":{"line":11,"character":25},"end":{"line":11,"character":26}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 165

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":25},"end":{"line":11,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":43,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 203

{"jsonrpc":"2.0","id":44,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":10,"character":30}}}
>>>
Content-Length: 37

{"id":44,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":10}}}Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":10}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":10}}}Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":10}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":10}}}Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":10}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 210

{"jsonrpc":"2.0","id":45,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":26,"character":43}}}
>>>
Content-Length: 37

{"id":45,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":26,"character":43},"end":{"line":26,"character":43}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":46,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":10}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 203

{"jsonrpc":"2.0","id":47,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":12,"character":26}}}
>>>
Content-Length: 37

{"id":47,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":10}}}Content-Length: 203

{"jsonrpc":"2.0","id":48,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":24}}}
>>>
Content-Length: 37

{"id":48,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":49,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":24}}}
>>>
Content-Length: 39

{"id":49,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":50,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":24}}}
>>>
Content-Length: 37

{"id":50,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 390

{"id":51,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","selection":{"start":{"line":11,"character":22},"end":{"line":11,"character":25}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 198

{"jsonrpc":"2.0","id":52,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":11,"character":24}}}
>>>
Content-Length: 39

{"id":52,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":11},"contentChanges":[{"range":{"start":{"line":11,"character":22},"end":{"line":11,"character":25}},"rangeLength":3,"text":"1"}]}}Content-Length: 295

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":12},"contentChanges":[{"range":{"start":{"line":11,"character":23},"end":{"line":11,"character":23}},"rangeLength":0,"text":"0"}]}}Content-Length: 295

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":13},"contentChanges":[{"range":{"start":{"line":11,"character":24},"end":{"line":11,"character":24}},"rangeLength":0,"text":"0"}]}}Content-Length: 272

{"jsonrpc":"2.0","id":53,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":11,"character":25},"end":{"line":11,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":53,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":13}}}Content-Length: 210

{"jsonrpc":"2.0","id":54,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":12,"character":25}}}
>>>
Content-Length: 37

{"id":54,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"jsonrpc":"2.0","id":55,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":12,"character":25},"end":{"line":12,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":55,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"jsonrpc":"2.0","id":56,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":12,"character":27},"end":{"line":12,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":56,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 294

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":14},"contentChanges":[{"range":{"start":{"line":12,"character":26},"end":{"line":12,"character":27}},"rangeLength":1,"text":""}]}}Content-Length: 294

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":15},"contentChanges":[{"range":{"start":{"line":12,"character":25},"end":{"line":12,"character":26}},"rangeLength":1,"text":""}]}}Content-Length: 272

{"jsonrpc":"2.0","id":57,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":12,"character":25},"end":{"line":12,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":57,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":15}}}Content-Length: 295

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":16},"contentChanges":[{"range":{"start":{"line":12,"character":25},"end":{"line":12,"character":25}},"rangeLength":0,"text":"9"}]}}Content-Length: 272

{"jsonrpc":"2.0","id":58,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":12,"character":26},"end":{"line":12,"character":26}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":58,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 294

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":17},"contentChanges":[{"range":{"start":{"line":12,"character":26},"end":{"line":12,"character":27}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 550

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":12,"character":26},"end":{"line":12,"character":27}},"severity":1,"code":"expected","source":"clang","message":"Expected ')'\n\nDigitalTrumpet.ino.cpp:77:14: note: to match this '('"},{"range":{"start":{"line":12,"character":13},"end":{"line":12,"character":14}},"severity":3,"message":"To match this '('\n\nDigitalTrumpet.ino.cpp:77:27: error: expected ')'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 481

{"jsonrpc":"2.0","id":59,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":12,"character":26},"end":{"line":12,"character":26}},"context":{"diagnostics":[{"range":{"start":{"line":12,"character":26},"end":{"line":12,"character":27}},"message":"Expected ')'\n\nDigitalTrumpet.ino.cpp:77:14: note: to match this '('","severity":1,"code":"expected","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":59,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":17}}}Content-Length: 294

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":18},"contentChanges":[{"range":{"start":{"line":12,"character":25},"end":{"line":12,"character":26}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 550

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":12,"character":25},"end":{"line":12,"character":26}},"severity":1,"code":"expected","source":"clang","message":"Expected ')'\n\nDigitalTrumpet.ino.cpp:77:14: note: to match this '('"},{"range":{"start":{"line":12,"character":13},"end":{"line":12,"character":14}},"severity":3,"message":"To match this '('\n\nDigitalTrumpet.ino.cpp:77:26: error: expected ')'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 294

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":19},"contentChanges":[{"range":{"start":{"line":12,"character":24},"end":{"line":12,"character":25}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 717

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":12,"character":24},"end":{"line":12,"character":25}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"},{"range":{"start":{"line":59,"character":0},"end":{"line":59,"character":0}},"severity":1,"code":"expected","source":"clang","message":"Expected '}'\n\nDigitalTrumpet.ino.cpp:73:15: note: to match this '{'"},{"range":{"start":{"line":8,"character":14},"end":{"line":8,"character":15}},"severity":3,"message":"To match this '{'\n\nDigitalTrumpet.ino.cpp:124:1: error: expected '}'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 442

{"jsonrpc":"2.0","id":60,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":12,"character":24},"end":{"line":12,"character":24}},"context":{"diagnostics":[{"range":{"start":{"line":12,"character":24},"end":{"line":12,"character":25}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":60,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":19}}}Content-Length: 295

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":20},"contentChanges":[{"range":{"start":{"line":12,"character":24},"end":{"line":12,"character":24}},"rangeLength":0,"text":"9"}]}}
>>>
Content-Length: 550

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":12,"character":25},"end":{"line":12,"character":26}},"severity":1,"code":"expected","source":"clang","message":"Expected ')'\n\nDigitalTrumpet.ino.cpp:77:14: note: to match this '('"},{"range":{"start":{"line":12,"character":13},"end":{"line":12,"character":14}},"severity":3,"message":"To match this '('\n\nDigitalTrumpet.ino.cpp:77:26: error: expected ')'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 295

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":21},"contentChanges":[{"range":{"start":{"line":12,"character":25},"end":{"line":12,"character":25}},"rangeLength":0,"text":"0"}]}}
>>>
Content-Length: 550

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[{"range":{"start":{"line":12,"character":26},"end":{"line":12,"character":27}},"severity":1,"code":"expected","source":"clang","message":"Expected ')'\n\nDigitalTrumpet.ino.cpp:77:14: note: to match this '('"},{"range":{"start":{"line":12,"character":13},"end":{"line":12,"character":14}},"severity":3,"message":"To match this '('\n\nDigitalTrumpet.ino.cpp:77:27: error: expected ')'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 481

{"jsonrpc":"2.0","id":61,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":12,"character":26},"end":{"line":12,"character":26}},"context":{"diagnostics":[{"range":{"start":{"line":12,"character":26},"end":{"line":12,"character":27}},"message":"Expected ')'\n\nDigitalTrumpet.ino.cpp:77:14: note: to match this '('","severity":1,"code":"expected","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":61,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":21}}}Content-Length: 295

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":22},"contentChanges":[{"range":{"start":{"line":12,"character":26},"end":{"line":12,"character":26}},"rangeLength":0,"text":")"}]}}
>>>
Content-Length: 165

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 272

{"jsonrpc":"2.0","id":62,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":12,"character":27},"end":{"line":12,"character":27}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":62,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":22}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":22}}}Content-Length: 203

{"jsonrpc":"2.0","id":63,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":13,"character":23}}}
>>>
Content-Length: 37

{"id":63,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 167

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":22}}}Content-Length: 176

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":128}}}Content-Length: 201

{"jsonrpc":"2.0","id":64,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"position":{"line":5,"character":3}}}
>>>
Content-Length: 229

{"id":64,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","range":{"start":{"line":103,"character":5},"end":{"line":103,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8991

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","languageId":"c","version":1,"text":"/*\n  wiring_analog.c - analog input and output\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nuint8_t analog_reference = DEFAULT;\n\nvoid analogReference(uint8_t mode)\n{\n\t// can't actually set the register here because the default setting\n\t// will connect AVCC and the AREF pin, which would cause a short if\n\t// there's something connected to AREF.\n\tanalog_reference = mode;\n}\n\nint analogRead(uint8_t pin)\n{\n\tuint8_t low, high;\n\n#if defined(analogPinToChannel)\n#if defined(__AVR_ATmega32U4__)\n\tif (pin >= 18) pin -= 18; // allow for channel or pin numbers\n#endif\n\tpin = analogPinToChannel(pin);\n#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n\tif (pin >= 54) pin -= 54; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega32U4__)\n\tif (pin >= 18) pin -= 18; // allow for channel or pin numbers\n#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n\tif (pin >= 24) pin -= 24; // allow for channel or pin numbers\n#else\n\tif (pin >= 14) pin -= 14; // allow for channel or pin numbers\n#endif\n\n#if defined(ADCSRB) && defined(MUX5)\n\t// the MUX5 bit of ADCSRB selects whether we're reading from channels\n\t// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).\n\tADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);\n#endif\n  \n\t// set the analog reference (high two bits of ADMUX) and select the\n\t// channel (low 4 bits).  this also sets ADLAR (left-adjust result)\n\t// to 0 (the default).\n#if defined(ADMUX)\n#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n\tADMUX = (analog_reference << 4) | (pin & 0x07);\n#else\n\tADMUX = (analog_reference << 6) | (pin & 0x07);\n#endif\n#endif\n\n\t// without a delay, we seem to read from the wrong channel\n\t//delay(1);\n\n#if defined(ADCSRA) && defined(ADCL)\n\t// start the conversion\n\tsbi(ADCSRA, ADSC);\n\n\t// ADSC is cleared when the conversion finishes\n\twhile (bit_is_set(ADCSRA, ADSC));\n\n\t// we have to read ADCL first; doing so locks both ADCL\n\t// and ADCH until ADCH is read.  reading ADCL second would\n\t// cause the results of each conversion to be discarded,\n\t// as ADCL and ADCH would be locked when it completed.\n\tlow  = ADCL;\n\thigh = ADCH;\n#else\n\t// we dont have an ADC, return 0\n\tlow  = 0;\n\thigh = 0;\n#endif\n\n\t// combine the two bytes\n\treturn (high << 8) | low;\n}\n\n// Right now, PWM output only works on the pins with\n// hardware support.  These are defined in the appropriate\n// pins_*.c file.  For the rest of the pins, we default\n// to digital output.\nvoid analogWrite(uint8_t pin, int val)\n{\n\t// We need to make sure the PWM output is enabled for those pins\n\t// that support it, as we turn it off when digitally reading or\n\t// writing with them.  Also, make sure the pin is in output mode\n\t// for consistenty with Wiring, which doesn't require a pinMode\n\t// call for the analog output pins.\n\tpinMode(pin, OUTPUT);\n\tif (val == 0)\n\t{\n\t\tdigitalWrite(pin, LOW);\n\t}\n\telse if (val == 255)\n\t{\n\t\tdigitalWrite(pin, HIGH);\n\t}\n\telse\n\t{\n\t\tswitch(digitalPinToTimer(pin))\n\t\t{\n\t\t\t// XXX fix needed for atmega8\n\t\t\t#if defined(TCCR0) && defined(COM00) && !defined(__AVR_ATmega8__)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0\n\t\t\t\tsbi(TCCR0, COM00);\n\t\t\t\tOCR0 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\t\tcase TIMER0A:\n\t\t\t\t// connect pwm to pin on timer 0, channel A\n\t\t\t\tsbi(TCCR0A, COM0A1);\n\t\t\t\tOCR0A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\t\tcase TIMER0B:\n\t\t\t\t// connect pwm to pin on timer 0, channel B\n\t\t\t\tsbi(TCCR0A, COM0B1);\n\t\t\t\tOCR0B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\t\tcase TIMER1A:\n\t\t\t\t// connect pwm to pin on timer 1, channel A\n\t\t\t\tsbi(TCCR1A, COM1A1);\n\t\t\t\tOCR1A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\t\tcase TIMER1B:\n\t\t\t\t// connect pwm to pin on timer 1, channel B\n\t\t\t\tsbi(TCCR1A, COM1B1);\n\t\t\t\tOCR1B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\t\tcase TIMER1C:\n\t\t\t\t// connect pwm to pin on timer 1, channel C\n\t\t\t\tsbi(TCCR1A, COM1C1);\n\t\t\t\tOCR1C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2) && defined(COM21)\n\t\t\tcase TIMER2:\n\t\t\t\t// connect pwm to pin on timer 2\n\t\t\t\tsbi(TCCR2, COM21);\n\t\t\t\tOCR2 = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\t\tcase TIMER2A:\n\t\t\t\t// connect pwm to pin on timer 2, channel A\n\t\t\t\tsbi(TCCR2A, COM2A1);\n\t\t\t\tOCR2A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\t\tcase TIMER2B:\n\t\t\t\t// connect pwm to pin on timer 2, channel B\n\t\t\t\tsbi(TCCR2A, COM2B1);\n\t\t\t\tOCR2B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\t\tcase TIMER3A:\n\t\t\t\t// connect pwm to pin on timer 3, channel A\n\t\t\t\tsbi(TCCR3A, COM3A1);\n\t\t\t\tOCR3A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\t\tcase TIMER3B:\n\t\t\t\t// connect pwm to pin on timer 3, channel B\n\t\t\t\tsbi(TCCR3A, COM3B1);\n\t\t\t\tOCR3B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\t\tcase TIMER3C:\n\t\t\t\t// connect pwm to pin on timer 3, channel C\n\t\t\t\tsbi(TCCR3A, COM3C1);\n\t\t\t\tOCR3C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A)\n\t\t\tcase TIMER4A:\n\t\t\t\t//connect pwm to pin on timer 4, channel A\n\t\t\t\tsbi(TCCR4A, COM4A1);\n\t\t\t\t#if defined(COM4A0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4A, COM4A0);\n\t\t\t\t#endif\n\t\t\t\tOCR4A = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\n\t\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\t\tcase TIMER4B:\n\t\t\t\t// connect pwm to pin on timer 4, channel B\n\t\t\t\tsbi(TCCR4A, COM4B1);\n\t\t\t\tOCR4B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\t\tcase TIMER4C:\n\t\t\t\t// connect pwm to pin on timer 4, channel C\n\t\t\t\tsbi(TCCR4A, COM4C1);\n\t\t\t\tOCR4C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\t\t\t\t\n\t\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\t\tcase TIMER4D:\t\t\t\t\n\t\t\t\t// connect pwm to pin on timer 4, channel D\n\t\t\t\tsbi(TCCR4C, COM4D1);\n\t\t\t\t#if defined(COM4D0)\t\t// only used on 32U4\n\t\t\t\tcbi(TCCR4C, COM4D0);\n\t\t\t\t#endif\n\t\t\t\tOCR4D = val;\t// set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t\t\t\t\t\n\t\t\t#if defined(TCCR5A) && defined(COM5A1)\n\t\t\tcase TIMER5A:\n\t\t\t\t// connect pwm to pin on timer 5, channel A\n\t\t\t\tsbi(TCCR5A, COM5A1);\n\t\t\t\tOCR5A = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) && defined(COM5B1)\n\t\t\tcase TIMER5B:\n\t\t\t\t// connect pwm to pin on timer 5, channel B\n\t\t\t\tsbi(TCCR5A, COM5B1);\n\t\t\t\tOCR5B = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\t#if defined(TCCR5A) && defined(COM5C1)\n\t\t\tcase TIMER5C:\n\t\t\t\t// connect pwm to pin on timer 5, channel C\n\t\t\t\tsbi(TCCR5A, COM5C1);\n\t\t\t\tOCR5C = val; // set pwm duty\n\t\t\t\tbreak;\n\t\t\t#endif\n\n\t\t\tcase NOT_ON_TIMER:\n\t\t\tdefault:\n\t\t\t\tif (val < 128) {\n\t\t\t\t\tdigitalWrite(pin, LOW);\n\t\t\t\t} else {\n\t\t\t\t\tdigitalWrite(pin, HIGH);\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n"}}}Content-Length: 190

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c"}}}
>>>
Content-Length: 200

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_analog.c","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 270

{"jsonrpc":"2.0","id":65,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":23,"character":1},"end":{"line":23,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":65,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 59

{"jsonrpc":"2.0","id":66,"method":"shutdown","params":null}
>>>
Content-Length: 39

{"id":66,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":12750,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1438

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","languageId":"cpp","version":1,"text":"void red() {\n\n  //set the LED pins to values that make red\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}\n\nvoid orange() {\n\n  //set the LED pins to values that make orange\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 90);\n  analogWrite(BluePin, 0);\n}\n\n\nvoid yellow() {\n\n  //set the LED pins to values that make yellow\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid green() {\n\n  //set the LED pins to values that make green\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid cyan() {\n\n  //set the LED pins to values that make cyan\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 100);\n}\nvoid blue() {\n\n  //set the LED pins to values that make blue\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid magenta() {\n\n  //set the LED pins to values that make magenta\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid turnOff() {\n\n  //set all three LED pins to 0 or OFF\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}"}}}Content-Length: 1029

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":1,"text":"\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\nint fourthKeyPin = 5;\n\nint RedPin = 9;\nint GreenPin = 10;\nint BluePin = 11;   \n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n  pinMode(fourthKeyPin, INPUT_PULLUP);  \n\n  //set the buzzer pin as an output\n  pinMode(RedPin, OUTPUT);\n  pinMode(BluePin, OUTPUT);\n  pinMode(GreenPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {\n    blue();      \n  } else if (digitalRead(secondKeyPin) == LOW) {\n    green();\n  } else if (digitalRead(thirdKeyPin) == LOW) {\n    orange();\n  } else if (digitalRead(fourthKeyPin) == LOW) {\n    red();\n  } else {\n    turnOff();\n  }\n}\n"}}}Content-Length: 269

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":23,"character":1},"end":{"line":23,"character":1}},"context":{"diagnostics":[]}}}Content-Length: 277

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":5},"end":{"line":27,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":7,"character":18},"end":{"line":7,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":3,"result":[],"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":4,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":15,"character":14}}}
>>>
Content-Length: 197

{"id":4,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 209

{"jsonrpc":"2.0","id":5,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":21,"character":9}}}
>>>
Content-Length: 227

{"id":5,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","range":{"start":{"line":28,"character":5},"end":{"line":28,"character":12}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5578

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out &= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) && defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) && defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out &= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) & bit) return HIGH;\n\treturn LOW;\n}\n"}}}Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}}
>>>
Content-Length: 201

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 209

{"jsonrpc":"2.0","id":6,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":5}}}
>>>
Content-Length: 221

{"id":6,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":154,"character":5},"end":{"line":154,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 209

{"jsonrpc":"2.0","id":7,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":4}}}
>>>
Content-Length: 36

{"id":7,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":0}}}
>>>
Content-Length: 38

{"id":8,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":4}}}
>>>
Content-Length: 38

{"id":9,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":10,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":4}}}
>>>
Content-Length: 39

{"id":10,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":11,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":4}}}
>>>
Content-Length: 37

{"id":11,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":4},"end":{"line":29,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":12,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":4},"end":{"line":31,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":13,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":3}}}
>>>
Content-Length: 39

{"id":14,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":3},"end":{"line":31,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":15,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":8}}}
>>>
Content-Length: 39

{"id":16,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":5}}}
>>>
Content-Length: 39

{"id":17,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":3}}}
>>>
Content-Length: 39

{"id":18,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":3}}}
>>>
Content-Length: 39

{"id":19,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":4}}}
>>>
Content-Length: 231

{"id":20,"result":{"contents":{"kind":"markdown","value":"### function `green`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid green()\n```"},"range":{"start":{"line":53,"character":4},"end":{"line":53,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":21,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":4}}}
>>>
Content-Length: 39

{"id":21,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":22,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":4}}}
>>>
Content-Length: 39

{"id":22,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":23,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":5}}}
>>>
Content-Length: 297

{"id":23,"result":[{"range":{"start":{"line":38,"character":5},"end":{"line":38,"character":9}},"kind":1},{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":8}},"kind":1},{"range":{"start":{"line":38,"character":5},"end":{"line":38,"character":9}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":24,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":40},"end":{"line":27,"character":40}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":25,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":26,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":3}}}
>>>
Content-Length: 39

{"id":26,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":27,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":4}}}
>>>
Content-Length: 37

{"id":27,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":4},"end":{"line":29,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":28,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":29,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":14}}}
>>>
Content-Length: 39

{"id":29,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 362

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":2},"contentChanges":[{"range":{"start":{"line":29,"character":4},"end":{"line":29,"character":4}},"rangeLength":0,"text":"else if (digitalRead(secondKeyPin) == LOW) {\n    green();\n  }"}]}}Content-Length: 278

{"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":3},"end":{"line":31,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":30,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":2}}}
>>>
Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":31,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":26}}}
>>>
Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}Content-Length: 198

{"id":31,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":1,"character":4},"end":{"line":1,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":32,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":25}}}
>>>
Content-Length: 302

{"id":32,"result":{"contents":{"kind":"markdown","value":"### variable `firstKeyPin`  \n\n---\nType: `int`  \nValue = `2`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint firstKeyPin = 2\n```"},"range":{"start":{"line":50,"character":18},"end":{"line":50,"character":29}}},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":3},"contentChanges":[{"range":{"start":{"line":29,"character":4},"end":{"line":31,"character":3}},"rangeLength":61,"text":""}]}}Content-Length: 211

{"jsonrpc":"2.0","id":33,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":28}}}
>>>
Content-Length: 198

{"id":33,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":1,"character":4},"end":{"line":1,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":34,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":4},"end":{"line":29,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":34,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":35,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":25}}}
>>>
Content-Length: 302

{"id":35,"result":{"contents":{"kind":"markdown","value":"### variable `firstKeyPin`  \n\n---\nType: `int`  \nValue = `2`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint firstKeyPin = 2\n```"},"range":{"start":{"line":50,"character":18},"end":{"line":50,"character":29}}},"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":3}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":4},"contentChanges":[{"range":{"start":{"line":29,"character":4},"end":{"line":29,"character":4}},"rangeLength":0,"text":"\n  "}]}}Content-Length: 278

{"jsonrpc":"2.0","id":36,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":36,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":4}}}Content-Length: 278

{"jsonrpc":"2.0","id":37,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":2},"end":{"line":29,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":37,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":5},"contentChanges":[{"range":{"start":{"line":29,"character":2},"end":{"line":29,"character":2}},"rangeLength":0,"text":"  "}]}}Content-Length: 278

{"jsonrpc":"2.0","id":38,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":4},"end":{"line":29,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":38,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":5}}}Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":6},"contentChanges":[{"range":{"start":{"line":29,"character":2},"end":{"line":29,"character":4}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 141

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"0/1","percentage":0,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":39,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":3},"end":{"line":29,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":39,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":6}}}Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":7},"contentChanges":[{"range":{"start":{"line":29,"character":4},"end":{"line":29,"character":4}},"rangeLength":0,"text":" "}]}}Content-Length: 362

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":8},"contentChanges":[{"range":{"start":{"line":29,"character":5},"end":{"line":29,"character":5}},"rangeLength":0,"text":"else if (digitalRead(secondKeyPin) == LOW) {\n    green();\n  }"}]}}Content-Length: 278

{"jsonrpc":"2.0","id":40,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":3},"end":{"line":31,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":40,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":8}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":8}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 205

{"jsonrpc":"2.0","id":41,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":1}}}
>>>
Content-Length: 39

{"id":41,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":42,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":32,"character":2}}}
>>>
Content-Length: 37

{"id":42,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":43,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 299

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":9},"contentChanges":[{"range":{"start":{"line":32,"character":0},"end":{"line":32,"character":2}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":32,"character":0},"end":{"line":32,"character":4}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":10},"contentChanges":[{"range":{"start":{"line":31,"character":3},"end":{"line":32,"character":0}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":44,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":3},"end":{"line":31,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":44,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":10}}}Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":11},"contentChanges":[{"range":{"start":{"line":31,"character":3},"end":{"line":31,"character":3}},"rangeLength":0,"text":" "}]}}Content-Length: 278

{"jsonrpc":"2.0","id":45,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":45,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":11}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 278

{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":40,"character":1},"end":{"line":40,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":46,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":47,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":7}}}
>>>
Content-Length: 39

{"id":47,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":48,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":6}}}
>>>
Content-Length: 39

{"id":48,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":49,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":5}}}
>>>
Content-Length: 39

{"id":49,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":50,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":5}}}
>>>
Content-Length: 37

{"id":50,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":5},"end":{"line":29,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":51,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 205

{"jsonrpc":"2.0","id":52,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":6}}}
>>>
Content-Length: 39

{"id":52,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":12},"contentChanges":[{"range":{"start":{"line":29,"character":4},"end":{"line":29,"character":5}},"rangeLength":1,"text":""}]}}Content-Length: 278

{"jsonrpc":"2.0","id":53,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":4},"end":{"line":29,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":53,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 210

{"jsonrpc":"2.0","id":54,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":6}}}
>>>
Content-Length: 37

{"id":54,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":12}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 205

{"jsonrpc":"2.0","id":55,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":6}}}
>>>
Content-Length: 39

{"id":55,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":56,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":13}}}
>>>
Content-Length: 230

{"id":56,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","range":{"start":{"line":164,"character":4},"end":{"line":164,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5578

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out &= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) && defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) && defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out &= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) & bit) return HIGH;\n\treturn LOW;\n}\n"}}}Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}}
>>>
Content-Length: 201

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":57,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":37}}}
>>>
Content-Length: 286

{"id":57,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":52,"character":25},"end":{"line":52,"character":37}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":58,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":48}}}
>>>
Content-Length: 39

{"id":58,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":59,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":45}}}
>>>
Content-Length: 210

{"id":59,"result":{"contents":{"kind":"markdown","value":"### macro `LOW`  \n\n---\n```cpp\n#define LOW 0x0\n```"},"range":{"start":{"line":52,"character":42},"end":{"line":52,"character":45}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":60,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":45}}}
>>>
Content-Length: 37

{"id":60,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":61,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":45},"end":{"line":29,"character":45}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 414

{"id":61,"result":[{"title":"Expand macro 'LOW'","kind":"refactor","command":{"title":"Expand macro 'LOW'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server598385589/sketch/DigitalTrumpet.ino.cpp","selection":{"start":{"line":52,"character":45},"end":{"line":52,"character":45}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":13},"contentChanges":[{"range":{"start":{"line":29,"character":45},"end":{"line":29,"character":45}},"rangeLength":0,"text":" "}]}}Content-Length: 280

{"jsonrpc":"2.0","id":62,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":46},"end":{"line":29,"character":46}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":62,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":13}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":14},"contentChanges":[{"range":{"start":{"line":29,"character":46},"end":{"line":29,"character":46}},"rangeLength":0,"text":"&"}]}}
>>>
Content-Length: 343

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":47},"end":{"line":29,"character":48}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":15},"contentChanges":[{"range":{"start":{"line":29,"character":47},"end":{"line":29,"character":47}},"rangeLength":0,"text":"&"}]}}
>>>
Content-Length: 343

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":49}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 450

{"jsonrpc":"2.0","id":63,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":48}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":49}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":63,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":16},"contentChanges":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":48}},"rangeLength":0,"text":" "}]}}
>>>
Content-Length: 343

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":50}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 450

{"jsonrpc":"2.0","id":64,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":49}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":50}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":64,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":16}}}Content-Length: 206

{"jsonrpc":"2.0","id":65,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":13}}}
>>>
Content-Length: 39

{"id":65,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":66,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":13}}}
>>>
Content-Length: 39

{"id":66,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":67,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":13}}}
>>>
Content-Length: 39

{"id":67,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":68,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":12}}}
>>>
Content-Length: 39

{"id":68,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":69,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":17},"end":{"line":29,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":69,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":70,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":45}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":70,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":71,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":48}}}
>>>
Content-Length: 39

{"id":71,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 335

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":17},"contentChanges":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":49}},"rangeLength":0,"text":"(digitalRead(secondKeyPin) == LOW"}]}}Content-Length: 211

{"jsonrpc":"2.0","id":72,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":50}}}
>>>
Content-Length: 37

{"id":72,"result":[],"jsonrpc":"2.0"}Content-Length: 558

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":84},"end":{"line":29,"character":85}},"severity":1,"code":"expected","source":"clang","message":"Expected ')'\n\nDigitalTrumpet.ino.cpp:53:13: note: to match this '('"},{"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":13}},"severity":3,"message":"To match this '('\n\nDigitalTrumpet.ino.cpp:53:85: error: expected ')'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":73,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":82},"end":{"line":29,"character":82}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 414

{"id":73,"result":[{"title":"Expand macro 'LOW'","kind":"refactor","command":{"title":"Expand macro 'LOW'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server598385589/sketch/DigitalTrumpet.ino.cpp","selection":{"start":{"line":52,"character":82},"end":{"line":52,"character":82}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":74,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":58}}}
>>>
Content-Length: 37

{"id":74,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":17}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":17}}}Content-Length: 206

{"jsonrpc":"2.0","id":75,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":57}}}
>>>
Content-Length: 39

{"id":75,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 211

{"jsonrpc":"2.0","id":76,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":63}}}
>>>
Content-Length: 37

{"id":76,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":77,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":63}}}
>>>
Content-Length: 39

{"id":77,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":78,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":63}}}
>>>
Content-Length: 37

{"id":78,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":79,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":62},"end":{"line":29,"character":74}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":79,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 489

{"jsonrpc":"2.0","id":80,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":85},"end":{"line":29,"character":85}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":84},"end":{"line":29,"character":85}},"message":"Expected ')'\n\nDigitalTrumpet.ino.cpp:53:13: note: to match this '('","severity":1,"code":"expected","source":"clang"}]}}}
>>>
Content-Length: 37

{"id":80,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":81,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":11}}}
>>>
Content-Length: 39

{"id":81,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":82,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":13}}}
>>>
Content-Length: 39

{"id":82,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":83,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":13}}}
>>>
Content-Length: 37

{"id":83,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 455

{"jsonrpc":"2.0","id":84,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":13}},"message":"To match this '('\n\nDigitalTrumpet.ino.cpp:53:85: error: expected ')'","severity":3}]}}}
>>>
Content-Length: 37

{"id":84,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":85,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":28,"character":13}}}
>>>
Content-Length: 39

{"id":85,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 455

{"jsonrpc":"2.0","id":86,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":13}},"message":"To match this '('\n\nDigitalTrumpet.ino.cpp:53:85: error: expected ')'","severity":3}]}}}
>>>
Content-Length: 37

{"id":86,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":87,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":16}}}
>>>
Content-Length: 37

{"id":87,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":88,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":16},"end":{"line":29,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":88,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":89,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":13}}}
>>>
Content-Length: 39

{"id":89,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":90,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":11}}}
>>>
Content-Length: 39

{"id":90,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":91,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":13}}}
>>>
Content-Length: 39

{"id":91,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":92,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":13}}}
>>>
Content-Length: 39

{"id":92,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":93,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":13}}}
>>>
Content-Length: 39

{"id":93,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 475

{"jsonrpc":"2.0","id":94,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":13}},"message":"To match this '('\n\nDigitalTrumpet.ino.cpp:53:85: error: expected ')'","severity":3}],"only":["quickfix"]}}}
>>>
Content-Length: 37

{"id":94,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 455

{"jsonrpc":"2.0","id":95,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":13}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":13}},"message":"To match this '('\n\nDigitalTrumpet.ino.cpp:53:85: error: expected ')'","severity":3}]}}}
>>>
Content-Length: 37

{"id":95,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":96,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":24}}}
>>>
Content-Length: 39

{"id":96,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":97,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":36}}}
>>>
Content-Length: 39

{"id":97,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":98,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":37}}}
>>>
Content-Length: 39

{"id":98,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":99,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":37}}}
>>>
Content-Length: 39

{"id":99,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":100,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":54}}}
>>>
Content-Length: 38

{"id":100,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":101,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":54}}}
>>>
Content-Length: 40

{"id":101,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":18},"contentChanges":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":82}},"rangeLength":33,"text":""}]}}
>>>
Content-Length: 343

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":50}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 451

{"jsonrpc":"2.0","id":102,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":49}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":50}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":102,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":18}}}Content-Length: 207

{"jsonrpc":"2.0","id":103,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":51}}}
>>>
Content-Length: 40

{"id":103,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":104,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":50}}}
>>>
Content-Length: 40

{"id":104,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":19},"contentChanges":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":49}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 343

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":49}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":20},"contentChanges":[{"range":{"start":{"line":29,"character":47},"end":{"line":29,"character":48}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 343

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":47},"end":{"line":29,"character":48}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":21},"contentChanges":[{"range":{"start":{"line":29,"character":46},"end":{"line":29,"character":47}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":105,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":46},"end":{"line":29,"character":46}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":105,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":21}}}Content-Length: 281

{"jsonrpc":"2.0","id":106,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":47},"end":{"line":29,"character":47}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":106,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":22},"contentChanges":[{"range":{"start":{"line":29,"character":47},"end":{"line":29,"character":47}},"rangeLength":0,"text":" "}]}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":22}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":23},"contentChanges":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":48}},"rangeLength":0,"text":"&"}]}}
>>>
Content-Length: 343

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":50},"end":{"line":29,"character":51}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":24},"contentChanges":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":49}},"rangeLength":0,"text":"&"}]}}
>>>
Content-Length: 332

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":51},"end":{"line":29,"character":52}},"severity":1,"code":"expected","source":"clang","message":"Expected identifier"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":107,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":50},"end":{"line":29,"character":50}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":107,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":24}}}Content-Length: 514

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":27},"contentChanges":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":50}},"rangeLength":1,"text":""},{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":49}},"rangeLength":1,"text":""},{"range":{"start":{"line":29,"character":47},"end":{"line":29,"character":48}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":108,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":47},"end":{"line":29,"character":47}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":108,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":27}}}Content-Length: 281

{"jsonrpc":"2.0","id":109,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":46},"end":{"line":29,"character":46}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":109,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":28},"contentChanges":[{"range":{"start":{"line":29,"character":46},"end":{"line":29,"character":46}},"rangeLength":0,"text":"&"}]}}
>>>
Content-Length: 343

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":47},"end":{"line":29,"character":48}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":29},"contentChanges":[{"range":{"start":{"line":29,"character":47},"end":{"line":29,"character":47}},"rangeLength":0,"text":"&"}]}}
>>>
Content-Length: 343

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":49}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":30},"contentChanges":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":48}},"rangeLength":0,"text":" "}]}}
>>>
Content-Length: 343

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":50}},"severity":1,"code":"expected_expression","source":"clang","message":"Expected expression"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 451

{"jsonrpc":"2.0","id":110,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":49}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":50}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":110,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":111,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":33}}}
>>>
Content-Length: 38

{"id":111,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":30}}}Content-Length: 212

{"jsonrpc":"2.0","id":112,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":24}}}
>>>
Content-Length: 38

{"id":112,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":113,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":12}}}
>>>
Content-Length: 40

{"id":113,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":114,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":13}}}
>>>
Content-Length: 38

{"id":114,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":115,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":115,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":116,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":28,"character":17},"end":{"line":29,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":116,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":117,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":46}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":117,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":118,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":45}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":118,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":119,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":49}}}
>>>
Content-Length: 40

{"id":119,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 471

{"jsonrpc":"2.0","id":120,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":50}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":50}},"message":"Expected expression","severity":1,"code":"expected_expression","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 38

{"id":120,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":121,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":48}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":121,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 334

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":31},"contentChanges":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":48}},"rangeLength":0,"text":"digitalRead(secondKeyPin) == LOW"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":122,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":80},"end":{"line":29,"character":80}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 415

{"id":122,"result":[{"title":"Expand macro 'LOW'","kind":"refactor","command":{"title":"Expand macro 'LOW'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server598385589/sketch/DigitalTrumpet.ino.cpp","selection":{"start":{"line":52,"character":80},"end":{"line":52,"character":80}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":31}}}Content-Length: 207

{"jsonrpc":"2.0","id":123,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":51}}}
>>>
Content-Length: 287

{"id":123,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":52,"character":48},"end":{"line":52,"character":59}}},"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":124,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":48}}}
>>>
Content-Length: 287

{"id":124,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":52,"character":48},"end":{"line":52,"character":59}}},"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":125,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":48}}}
>>>
Content-Length: 570

{"id":125,"result":[{"range":{"start":{"line":27,"character":6},"end":{"line":27,"character":17}},"kind":1},{"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":24}},"kind":1},{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":59}},"kind":1},{"range":{"start":{"line":31,"character":13},"end":{"line":31,"character":24}},"kind":1},{"range":{"start":{"line":33,"character":13},"end":{"line":33,"character":24}},"kind":1},{"range":{"start":{"line":35,"character":13},"end":{"line":35,"character":24}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32},"contentChanges":[{"range":{"start":{"line":29,"character":48},"end":{"line":29,"character":48}},"rangeLength":0,"text":" "}]}}Content-Length: 212

{"jsonrpc":"2.0","id":126,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":50}}}Content-Length: 281

{"jsonrpc":"2.0","id":127,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":49},"end":{"line":29,"character":49}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 231

{"id":126,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","range":{"start":{"line":164,"character":4},"end":{"line":164,"character":15}}}],"jsonrpc":"2.0"}Content-Length: 38

{"id":127,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 5578

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out &= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) && defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) && defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out &= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) & bit) return HIGH;\n\treturn LOW;\n}\n"}}}Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}}
>>>
Content-Length: 201

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 212

{"jsonrpc":"2.0","id":128,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":67}}}
>>>
Content-Length: 199

{"id":128,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":2,"character":4},"end":{"line":2,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":32}}}Content-Length: 212

{"jsonrpc":"2.0","id":129,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":67}}}
>>>
Content-Length: 199

{"id":129,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":2,"character":4},"end":{"line":2,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":130,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":66}}}
>>>
Content-Length: 305

{"id":130,"result":{"contents":{"kind":"markdown","value":"### variable `secondKeyPin`  \n\n---\nType: `int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint secondKeyPin = 3\n```"},"range":{"start":{"line":52,"character":61},"end":{"line":52,"character":73}}},"jsonrpc":"2.0"}
<<<
Content-Length: 219

{"jsonrpc":"2.0","id":131,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":67}}}
>>>
Content-Length: 479

{"id":131,"result":[{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":16}},"kind":1},{"range":{"start":{"line":14,"character":10},"end":{"line":14,"character":22}},"kind":2},{"range":{"start":{"line":29,"character":25},"end":{"line":29,"character":37}},"kind":2},{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":73}},"kind":2},{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":37}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":132,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":73}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":132,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":133,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":68}}}
>>>
Content-Length: 305

{"id":133,"result":{"contents":{"kind":"markdown","value":"### variable `secondKeyPin`  \n\n---\nType: `int`  \nValue = `3`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint secondKeyPin = 3\n```"},"range":{"start":{"line":52,"character":61},"end":{"line":52,"character":73}}},"jsonrpc":"2.0"}
<<<
Content-Length: 304

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":33},"contentChanges":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":73}},"rangeLength":12,"text":"t"}]}}
>>>
Content-Length: 355

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":62}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 't'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":34},"contentChanges":[{"range":{"start":{"line":29,"character":62},"end":{"line":29,"character":62}},"rangeLength":0,"text":"h"}]}}
>>>
Content-Length: 356

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":63}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'th'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":35},"contentChanges":[{"range":{"start":{"line":29,"character":63},"end":{"line":29,"character":63}},"rangeLength":0,"text":"i"}]}}
>>>
Content-Length: 357

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":64}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'thi'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":36},"contentChanges":[{"range":{"start":{"line":29,"character":64},"end":{"line":29,"character":64}},"rangeLength":0,"text":"r"}]}}
>>>
Content-Length: 358

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":65}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'thir'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 466

{"jsonrpc":"2.0","id":134,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":65},"end":{"line":29,"character":65}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":65}},"message":"Use of undeclared identifier 'thir'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":134,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":37},"contentChanges":[{"range":{"start":{"line":29,"character":65},"end":{"line":29,"character":65}},"rangeLength":0,"text":"d"}]}}
>>>
Content-Length: 359

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":66}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'third'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 467

{"jsonrpc":"2.0","id":135,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":66},"end":{"line":29,"character":66}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":66}},"message":"Use of undeclared identifier 'third'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":135,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":37}}}Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":38},"contentChanges":[{"range":{"start":{"line":29,"character":66},"end":{"line":29,"character":66}},"rangeLength":0,"text":"K"}]}}
>>>
Content-Length: 360

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":67}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'thirdK'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":39},"contentChanges":[{"range":{"start":{"line":29,"character":67},"end":{"line":29,"character":67}},"rangeLength":0,"text":"e"}]}}
>>>
Content-Length: 361

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":68}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'thirdKe'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":40},"contentChanges":[{"range":{"start":{"line":29,"character":68},"end":{"line":29,"character":68}},"rangeLength":0,"text":"y"}]}}
>>>
Content-Length: 362

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":69}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'thirdKey'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 470

{"jsonrpc":"2.0","id":136,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":69},"end":{"line":29,"character":69}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":69}},"message":"Use of undeclared identifier 'thirdKey'","severity":1,"code":"undeclared_var_use","source":"clang"}]}}}
>>>
Content-Length: 38

{"id":136,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":41},"contentChanges":[{"range":{"start":{"line":29,"character":69},"end":{"line":29,"character":69}},"rangeLength":0,"text":"P"}]}}
>>>
Content-Length: 721

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":70}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'thirdKeyP'; did you mean 'thirdKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:6:5: note: 'thirdKeyPin' declared here"},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}},"severity":3,"message":"'thirdKeyPin' declared here\n\nDigitalTrumpet.ino.cpp:53:62: error: use of undeclared identifier 'thirdKeyP'; did you mean 'thirdKeyPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":42},"contentChanges":[{"range":{"start":{"line":29,"character":70},"end":{"line":29,"character":70}},"rangeLength":0,"text":"u"}]}}
>>>
Content-Length: 723

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":71}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'thirdKeyPu'; did you mean 'thirdKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:6:5: note: 'thirdKeyPin' declared here"},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}},"severity":3,"message":"'thirdKeyPin' declared here\n\nDigitalTrumpet.ino.cpp:53:62: error: use of undeclared identifier 'thirdKeyPu'; did you mean 'thirdKeyPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 590

{"jsonrpc":"2.0","id":137,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":71},"end":{"line":29,"character":71}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":71}},"message":"Use of undeclared identifier 'thirdKeyPu'; did you mean 'thirdKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:6:5: note: 'thirdKeyPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 190

{"id":137,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":42}}}Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":43},"contentChanges":[{"range":{"start":{"line":29,"character":70},"end":{"line":29,"character":71}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 721

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":70}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'thirdKeyP'; did you mean 'thirdKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:6:5: note: 'thirdKeyPin' declared here"},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}},"severity":3,"message":"'thirdKeyPin' declared here\n\nDigitalTrumpet.ino.cpp:53:62: error: use of undeclared identifier 'thirdKeyP'; did you mean 'thirdKeyPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":44},"contentChanges":[{"range":{"start":{"line":29,"character":70},"end":{"line":29,"character":70}},"rangeLength":0,"text":"i"}]}}
>>>
Content-Length: 723

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":71}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'thirdKeyPi'; did you mean 'thirdKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:6:5: note: 'thirdKeyPin' declared here"},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}},"severity":3,"message":"'thirdKeyPin' declared here\n\nDigitalTrumpet.ino.cpp:53:62: error: use of undeclared identifier 'thirdKeyPi'; did you mean 'thirdKeyPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":45},"contentChanges":[{"range":{"start":{"line":29,"character":71},"end":{"line":29,"character":71}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":45}}}Content-Length: 281

{"jsonrpc":"2.0","id":138,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":72},"end":{"line":29,"character":72}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":138,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":139,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":68}}}
>>>
Content-Length: 199

{"id":139,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":140,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":68}}}
>>>
Content-Length: 303

{"id":140,"result":{"contents":{"kind":"markdown","value":"### variable `thirdKeyPin`  \n\n---\nType: `int`  \nValue = `4`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint thirdKeyPin = 4\n```"},"range":{"start":{"line":52,"character":61},"end":{"line":52,"character":72}}},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":141,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":43}}}
>>>
Content-Length: 222

{"id":141,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":40,"character":8},"end":{"line":40,"character":11}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":142,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":31,"character":32}}}
>>>
Content-Length: 199

{"id":142,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":2,"character":4},"end":{"line":2,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":45}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 206

{"jsonrpc":"2.0","id":143,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":7}}}
>>>
Content-Length: 232

{"id":143,"result":{"contents":{"kind":"markdown","value":"### function `green`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid green()\n```"},"range":{"start":{"line":53,"character":4},"end":{"line":53,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":144,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":7}}}
>>>
Content-Length: 387

{"id":144,"result":[{"range":{"start":{"line":24,"character":5},"end":{"line":24,"character":10}},"kind":1},{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":9}},"kind":1},{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":9}},"kind":1},{"range":{"start":{"line":26,"character":5},"end":{"line":26,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":145,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":145,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":46},"contentChanges":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":9}},"rangeLength":5,"text":"c"}]}}
>>>
Content-Length: 353

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":5}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'c'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":47},"contentChanges":[{"range":{"start":{"line":30,"character":5},"end":{"line":30,"character":5}},"rangeLength":0,"text":"y"}]}}
>>>
Content-Length: 354

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":6}},"severity":1,"code":"undeclared_var_use","source":"clang","message":"Use of undeclared identifier 'cy'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":48},"contentChanges":[{"range":{"start":{"line":30,"character":6},"end":{"line":30,"character":6}},"rangeLength":0,"text":"a"}]}}
>>>
Content-Length: 460

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":7}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'cya'; did you mean 'cyan'? (fix available)\n\nDigitalTrumpet.ino.cpp:27:6: note: 'cyan' declared here"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 301

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":49},"contentChanges":[{"range":{"start":{"line":30,"character":7},"end":{"line":30,"character":7}},"rangeLength":0,"text":"n"}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":49}}}Content-Length: 279

{"jsonrpc":"2.0","id":146,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":8},"end":{"line":30,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":146,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":49}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":49}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 207

{"jsonrpc":"2.0","id":147,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":76}}}
>>>
Content-Length: 40

{"id":147,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 207

{"jsonrpc":"2.0","id":148,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":71}}}
>>>
Content-Length: 303

{"id":148,"result":{"contents":{"kind":"markdown","value":"### variable `thirdKeyPin`  \n\n---\nType: `int`  \nValue = `4`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint thirdKeyPin = 4\n```"},"range":{"start":{"line":52,"character":61},"end":{"line":52,"character":72}}},"jsonrpc":"2.0"}
<<<
Content-Length: 617

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":53},"contentChanges":[{"range":{"start":{"line":30,"character":7},"end":{"line":30,"character":8}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":6},"end":{"line":30,"character":7}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":5},"end":{"line":30,"character":6}},"rangeLength":1,"text":""},{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":5}},"rangeLength":1,"text":"green"}]}}Content-Length: 279

{"jsonrpc":"2.0","id":149,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":9}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":149,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":150,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":69}}}
>>>
Content-Length: 199

{"id":150,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 212

{"jsonrpc":"2.0","id":151,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":54}}}
>>>
Content-Length: 231

{"id":151,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","range":{"start":{"line":164,"character":4},"end":{"line":164,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5578

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out &= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) && defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) && defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out &= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) & bit) return HIGH;\n\treturn LOW;\n}\n"}}}Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}}
>>>
Content-Length: 201

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":53}}}Content-Length: 408

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":55},"contentChanges":[{"range":{"start":{"line":29,"character":71},"end":{"line":29,"character":72}},"rangeLength":1,"text":""},{"range":{"start":{"line":29,"character":70},"end":{"line":29,"character":71}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 721

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":70}},"severity":1,"code":"undeclared_var_use_suggest","source":"clang","message":"Use of undeclared identifier 'thirdKeyP'; did you mean 'thirdKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:6:5: note: 'thirdKeyPin' declared here"},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":15}},"severity":3,"message":"'thirdKeyPin' declared here\n\nDigitalTrumpet.ino.cpp:53:62: error: use of undeclared identifier 'thirdKeyP'; did you mean 'thirdKeyPin'?"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 589

{"jsonrpc":"2.0","id":152,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":70},"end":{"line":29,"character":70}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":70}},"message":"Use of undeclared identifier 'thirdKeyP'; did you mean 'thirdKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:6:5: note: 'thirdKeyPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 190

{"id":152,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":55}}}Content-Length: 212

{"jsonrpc":"2.0","id":153,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":26}}}
>>>
Content-Length: 199

{"id":153,"result":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","range":{"start":{"line":2,"character":4},"end":{"line":2,"character":16}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":154,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":8}}}
>>>
Content-Length: 232

{"id":154,"result":{"contents":{"kind":"markdown","value":"### function `green`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid green()\n```"},"range":{"start":{"line":53,"character":4},"end":{"line":53,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":155,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":4}}}
>>>
Content-Length: 232

{"id":155,"result":{"contents":{"kind":"markdown","value":"### function `green`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid green()\n```"},"range":{"start":{"line":53,"character":4},"end":{"line":53,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 281

{"jsonrpc":"2.0","id":156,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":12},"end":{"line":30,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":156,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":157,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":3},"end":{"line":29,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":157,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":158,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":4}}}
>>>
Content-Length: 40

{"id":158,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":159,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":3},"end":{"line":29,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":159,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":160,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":4},"end":{"line":29,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":160,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":161,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":4}}}
>>>
Content-Length: 40

{"id":161,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":162,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":4}}}
>>>
Content-Length: 40

{"id":162,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":163,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":5}}}
>>>
Content-Length: 38

{"id":163,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 588

{"jsonrpc":"2.0","id":164,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":4},"end":{"line":30,"character":12}},"context":{"diagnostics":[{"range":{"start":{"line":29,"character":61},"end":{"line":29,"character":70}},"message":"Use of undeclared identifier 'thirdKeyP'; did you mean 'thirdKeyPin'? (fix available)\n\nDigitalTrumpet.ino.cpp:6:5: note: 'thirdKeyPin' declared here","severity":1,"code":"undeclared_var_use_suggest","source":"clang"}]}}}
>>>
Content-Length: 190

{"id":164,"error":{"code":0,"message":"json: cannot unmarshal object into Go struct field WorkspaceEdit.edit.changes of type map[lsp.DocumentURI][]lsp.TextEdit","data":null},"jsonrpc":"2.0"}
<<<
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":56},"contentChanges":[{"range":{"start":{"line":29,"character":4},"end":{"line":30,"character":12}},"rangeLength":91,"text":""}]}}
>>>
Content-Length: 880

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":8}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":8}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":8}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":8}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":57},"contentChanges":[{"range":{"start":{"line":29,"character":3},"end":{"line":29,"character":4}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 880

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":8}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":8}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":34,"character":4},"end":{"line":34,"character":8}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"},{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":8}},"severity":1,"code":"expected_unqualified_id","source":"clang","message":"Expected unqualified-id"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":165,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":3},"end":{"line":29,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":165,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":57}}}Content-Length: 279

{"jsonrpc":"2.0","id":166,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":166,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":58},"contentChanges":[{"range":{"start":{"line":30,"character":2},"end":{"line":30,"character":3}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":7}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":59},"contentChanges":[{"range":{"start":{"line":30,"character":0},"end":{"line":30,"character":2}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 397

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[{"range":{"start":{"line":30,"character":1},"end":{"line":30,"character":5}},"severity":2,"code":"readability-misleading-indentation","source":"clang-tidy","message":"Different indentation for 'if' and corresponding 'else'"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 300

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":60},"contentChanges":[{"range":{"start":{"line":29,"character":3},"end":{"line":30,"character":0}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 173

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":167,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":3},"end":{"line":29,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"id":167,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":60}}}Content-Length: 212

{"jsonrpc":"2.0","id":168,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":18}}}
>>>
Content-Length: 231

{"id":168,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","range":{"start":{"line":164,"character":4},"end":{"line":164,"character":15}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 5578

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","languageId":"c","version":1,"text":"/*\n  wiring_digital.c - digital input and output functions\n  Part of Arduino - http://www.arduino.cc/\n\n  Copyright (c) 2005-2006 David A. Mellis\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n\n  Modified 28 September 2010 by Mark Sproul\n*/\n\n#define ARDUINO_MAIN\n#include \"wiring_private.h\"\n#include \"pins_arduino.h\"\n\nvoid pinMode(uint8_t pin, uint8_t mode)\n{\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *reg, *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// JWS: can I let the optimizer do this?\n\treg = portModeRegister(port);\n\tout = portOutputRegister(port);\n\n\tif (mode == INPUT) { \n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out &= ~bit;\n\t\tSREG = oldSREG;\n\t} else if (mode == INPUT_PULLUP) {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg &= ~bit;\n\t\t*out |= bit;\n\t\tSREG = oldSREG;\n\t} else {\n\t\tuint8_t oldSREG = SREG;\n                cli();\n\t\t*reg |= bit;\n\t\tSREG = oldSREG;\n\t}\n}\n\n// Forcing this inline keeps the callers from having to push their own stuff\n// on the stack. It is a good performance win and only takes 1 more byte per\n// user than calling. (It will take more bytes on the 168.)\n//\n// But shouldn't this be moved into pinMode? Seems silly to check and do on\n// each digitalread or write.\n//\n// Mark Sproul:\n// - Removed inline. Save 170 bytes on atmega1280\n// - changed to a switch statment; added 32 bytes but much easier to read and maintain.\n// - Added more #ifdefs, now compiles for atmega645\n//\n//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));\n//static inline void turnOffPWM(uint8_t timer)\nstatic void turnOffPWM(uint8_t timer)\n{\n\tswitch (timer)\n\t{\n\t\t#if defined(TCCR1A) && defined(COM1A1)\n\t\tcase TIMER1A:   cbi(TCCR1A, COM1A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1B1)\n\t\tcase TIMER1B:   cbi(TCCR1A, COM1B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR1A) && defined(COM1C1)\n\t\tcase TIMER1C:   cbi(TCCR1A, COM1C1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR2) && defined(COM21)\n\t\tcase  TIMER2:   cbi(TCCR2, COM21);      break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0A1)\n\t\tcase  TIMER0A:  cbi(TCCR0A, COM0A1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR0A) && defined(COM0B1)\n\t\tcase  TIMER0B:  cbi(TCCR0A, COM0B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2A1)\n\t\tcase  TIMER2A:  cbi(TCCR2A, COM2A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR2A) && defined(COM2B1)\n\t\tcase  TIMER2B:  cbi(TCCR2A, COM2B1);    break;\n\t\t#endif\n\t\t\n\t\t#if defined(TCCR3A) && defined(COM3A1)\n\t\tcase  TIMER3A:  cbi(TCCR3A, COM3A1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3B1)\n\t\tcase  TIMER3B:  cbi(TCCR3A, COM3B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR3A) && defined(COM3C1)\n\t\tcase  TIMER3C:  cbi(TCCR3A, COM3C1);    break;\n\t\t#endif\n\n\t\t#if defined(TCCR4A) && defined(COM4A1)\n\t\tcase  TIMER4A:  cbi(TCCR4A, COM4A1);    break;\n\t\t#endif\t\t\t\t\t\n\t\t#if defined(TCCR4A) && defined(COM4B1)\n\t\tcase  TIMER4B:  cbi(TCCR4A, COM4B1);    break;\n\t\t#endif\n\t\t#if defined(TCCR4A) && defined(COM4C1)\n\t\tcase  TIMER4C:  cbi(TCCR4A, COM4C1);    break;\n\t\t#endif\t\t\t\n\t\t#if defined(TCCR4C) && defined(COM4D1)\n\t\tcase TIMER4D:\tcbi(TCCR4C, COM4D1);\tbreak;\n\t\t#endif\t\t\t\n\t\t\t\n\t\t#if defined(TCCR5A)\n\t\tcase  TIMER5A:  cbi(TCCR5A, COM5A1);    break;\n\t\tcase  TIMER5B:  cbi(TCCR5A, COM5B1);    break;\n\t\tcase  TIMER5C:  cbi(TCCR5A, COM5C1);    break;\n\t\t#endif\n\t}\n}\n\nvoid digitalWrite(uint8_t pin, uint8_t val)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\tvolatile uint8_t *out;\n\n\tif (port == NOT_A_PIN) return;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before doing a digital write.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tout = portOutputRegister(port);\n\n\tuint8_t oldSREG = SREG;\n\tcli();\n\n\tif (val == LOW) {\n\t\t*out &= ~bit;\n\t} else {\n\t\t*out |= bit;\n\t}\n\n\tSREG = oldSREG;\n}\n\nint digitalRead(uint8_t pin)\n{\n\tuint8_t timer = digitalPinToTimer(pin);\n\tuint8_t bit = digitalPinToBitMask(pin);\n\tuint8_t port = digitalPinToPort(pin);\n\n\tif (port == NOT_A_PIN) return LOW;\n\n\t// If the pin that support PWM output, we need to turn it off\n\t// before getting a digital reading.\n\tif (timer != NOT_ON_TIMER) turnOffPWM(timer);\n\n\tif (*portInputRegister(port) & bit) return HIGH;\n\treturn LOW;\n}\n"}}}Content-Length: 191

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c"}}}
>>>
Content-Length: 201

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/wiring_digital.c","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":60}}}Content-Length: 175

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":60}}}Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 211

{"jsonrpc":"2.0","id":169,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":25,"character":5}}}
>>>
Content-Length: 223

{"id":169,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":154,"character":5},"end":{"line":154,"character":9}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 60

{"jsonrpc":"2.0","id":170,"method":"shutdown","params":null}
>>>
Content-Length: 40

{"id":170,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":77511,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1438

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","languageId":"cpp","version":1,"text":"void red() {\n\n  //set the LED pins to values that make red\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}\n\nvoid orange() {\n\n  //set the LED pins to values that make orange\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 90);\n  analogWrite(BluePin, 0);\n}\n\n\nvoid yellow() {\n\n  //set the LED pins to values that make yellow\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid green() {\n\n  //set the LED pins to values that make green\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid cyan() {\n\n  //set the LED pins to values that make cyan\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 100);\n}\nvoid blue() {\n\n  //set the LED pins to values that make blue\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid magenta() {\n\n  //set the LED pins to values that make magenta\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid turnOff() {\n\n  //set all three LED pins to 0 or OFF\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}"}}}Content-Length: 1029

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":1,"text":"\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\nint fourthKeyPin = 5;\n\nint RedPin = 9;\nint GreenPin = 10;\nint BluePin = 11;   \n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n  pinMode(fourthKeyPin, INPUT_PULLUP);  \n\n  //set the buzzer pin as an output\n  pinMode(RedPin, OUTPUT);\n  pinMode(BluePin, OUTPUT);\n  pinMode(GreenPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {\n    blue();      \n  } else if (digitalRead(secondKeyPin) == LOW) {\n    green();\n  } else if (digitalRead(thirdKeyPin) == LOW) {\n    orange();\n  } else if (digitalRead(fourthKeyPin) == LOW) {\n    red();\n  } else {\n    turnOff();\n  }\n}\n"}}}Content-Length: 269

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":23,"character":1},"end":{"line":23,"character":1}},"context":{"diagnostics":[]}}}Content-Length: 277

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":3},"end":{"line":29,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":17,"character":0},"end":{"line":18,"character":35}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":3,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":33,"character":41},"end":{"line":33,"character":41}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":4,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":38,"character":1},"end":{"line":38,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 166

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","version":1}}}Content-Length: 174

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","version":1}}}Content-Length: 58

{"jsonrpc":"2.0","id":6,"method":"shutdown","params":null}
>>>
Content-Length: 38

{"id":6,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":46086,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1438

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","languageId":"cpp","version":1,"text":"void red() {\n\n  //set the LED pins to values that make red\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}\n\nvoid orange() {\n\n  //set the LED pins to values that make orange\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 90);\n  analogWrite(BluePin, 0);\n}\n\n\nvoid yellow() {\n\n  //set the LED pins to values that make yellow\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid green() {\n\n  //set the LED pins to values that make green\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid cyan() {\n\n  //set the LED pins to values that make cyan\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 100);\n}\nvoid blue() {\n\n  //set the LED pins to values that make blue\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid magenta() {\n\n  //set the LED pins to values that make magenta\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid turnOff() {\n\n  //set all three LED pins to 0 or OFF\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}"}}}Content-Length: 1029

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":1,"text":"\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\nint fourthKeyPin = 5;\n\nint RedPin = 9;\nint GreenPin = 10;\nint BluePin = 11;   \n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n  pinMode(fourthKeyPin, INPUT_PULLUP);  \n\n  //set the buzzer pin as an output\n  pinMode(RedPin, OUTPUT);\n  pinMode(BluePin, OUTPUT);\n  pinMode(GreenPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {\n    blue();      \n  } else if (digitalRead(secondKeyPin) == LOW) {\n    green();\n  } else if (digitalRead(thirdKeyPin) == LOW) {\n    orange();\n  } else if (digitalRead(fourthKeyPin) == LOW) {\n    red();\n  } else {\n    turnOff();\n  }\n}\n"}}}Content-Length: 269

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":23,"character":1},"end":{"line":23,"character":1}},"context":{"diagnostics":[]}}}Content-Length: 277

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":38,"character":1},"end":{"line":38,"character":1}},"context":{"diagnostics":[]}}}Content-Length: 205

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":16,"character":21}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}Content-Length: 303

{"id":3,"result":{"contents":{"kind":"markdown","value":"### variable `fourthKeyPin`  \n\n---\nType: `int`  \nValue = `5`  \nPassed as pin (converted to uint8_t)  \n\n---\n```cpp\nint fourthKeyPin = 5\n```"},"range":{"start":{"line":39,"character":10},"end":{"line":39,"character":22}}},"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/26","percentage":7.6923076923076925,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/26","percentage":11.538461538461538,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/26","percentage":11.538461538461538,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/26","percentage":15.384615384615385,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/26","percentage":15.384615384615385,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/26","percentage":19.23076923076923,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/26","percentage":23.076923076923077,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/26","percentage":23.076923076923077,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/26","percentage":26.923076923076923,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/26","percentage":30.76923076923077,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/26","percentage":30.76923076923077,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/26","percentage":34.61538461538461,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/26","percentage":34.61538461538461,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/26","percentage":38.46153846153846,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/26","percentage":38.46153846153846,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/26","percentage":42.30769230769231,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/26","percentage":46.15384615384615,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/26","percentage":46.15384615384615,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":4,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":16,"character":17}}}
>>>
Content-Length: 299

{"id":4,"result":[{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}},"kind":1},{"range":{"start":{"line":16,"character":10},"end":{"line":16,"character":22}},"kind":2},{"range":{"start":{"line":33,"character":25},"end":{"line":33,"character":37}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}Content-Length: 217

{"jsonrpc":"2.0","id":5,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":16,"character":30}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":5}}Content-Length: 217

{"jsonrpc":"2.0","id":6,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":12,"character":33}}}
>>>
Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/26","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 144

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/26","percentage":50,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":6,"result":[],"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/26","percentage":53.84615384615385,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/26","percentage":57.69230769230769,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/26","percentage":57.69230769230769,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/26","percentage":61.53846153846154,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/26","percentage":65.38461538461539,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/26","percentage":69.23076923076923,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/26","percentage":73.07692307692308,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/26","percentage":76.92307692307692,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/26","percentage":80.76923076923077,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":12,"character":27},"end":{"line":12,"character":33}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":7,"result":[],"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/26","percentage":84.61538461538461,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/26","percentage":88.46153846153847,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/26","percentage":92.3076923076923,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/26","percentage":96.15384615384616,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":8,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":31}}}
>>>
Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":13,"character":23},"end":{"line":13,"character":35}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 793

{"id":9,"result":[{"title":"Expand macro 'INPUT_PULLUP'","kind":"refactor","command":{"title":"Expand macro 'INPUT_PULLUP'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server884580435/sketch/DigitalTrumpet.ino.cpp","selection":{"start":{"line":36,"character":23},"end":{"line":36,"character":35}}}]}},{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":13,"character":23},"end":{"line":13,"character":35}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 211

{"jsonrpc":"2.0","id":10,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":13,"character":31}}}
>>>
Content-Length: 221

{"id":10,"result":[{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","range":{"start":{"line":44,"character":8},"end":{"line":44,"character":20}}}],"jsonrpc":"2.0"}
<<<
Content-Length: 8117

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","languageId":"cpp","version":1,"text":"/*\n  Arduino.h - Main include file for the Arduino SDK\n  Copyright (c) 2005-2013 Arduino Team.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#ifndef Arduino_h\n#define Arduino_h\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\n\n#include <avr/pgmspace.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n\n#include \"binary.h\"\n\n#ifdef __cplusplus\nextern \"C\"{\n#endif\n\nvoid yield(void);\n\n#define HIGH 0x1\n#define LOW  0x0\n\n#define INPUT 0x0\n#define OUTPUT 0x1\n#define INPUT_PULLUP 0x2\n\n#define PI 3.1415926535897932384626433832795\n#define HALF_PI 1.5707963267948966192313216916398\n#define TWO_PI 6.283185307179586476925286766559\n#define DEG_TO_RAD 0.017453292519943295769236907684886\n#define RAD_TO_DEG 57.295779513082320876798154814105\n#define EULER 2.718281828459045235360287471352\n\n#define SERIAL  0x0\n#define DISPLAY 0x1\n\n#define LSBFIRST 0\n#define MSBFIRST 1\n\n#define CHANGE 1\n#define FALLING 2\n#define RISING 3\n\n#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n  #define DEFAULT 0\n  #define EXTERNAL 1\n  #define INTERNAL1V1 2\n  #define INTERNAL INTERNAL1V1\n#elif defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n  #define DEFAULT 0\n  #define EXTERNAL 4\n  #define INTERNAL1V1 8\n  #define INTERNAL INTERNAL1V1\n  #define INTERNAL2V56 9\n  #define INTERNAL2V56_EXTCAP 13\n#else  \n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)\n#define INTERNAL1V1 2\n#define INTERNAL2V56 3\n#else\n#define INTERNAL 3\n#endif\n#define DEFAULT 1\n#define EXTERNAL 0\n#endif\n\n// undefine stdlib's abs if encountered\n#ifdef abs\n#undef abs\n#endif\n\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\n#define abs(x) ((x)>0?(x):-(x))\n#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))\n#define round(x)     ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))\n#define radians(deg) ((deg)*DEG_TO_RAD)\n#define degrees(rad) ((rad)*RAD_TO_DEG)\n#define sq(x) ((x)*(x))\n\n#define interrupts() sei()\n#define noInterrupts() cli()\n\n#define clockCyclesPerMicrosecond() ( F_CPU / 1000000L )\n#define clockCyclesToMicroseconds(a) ( (a) / clockCyclesPerMicrosecond() )\n#define microsecondsToClockCycles(a) ( (a) * clockCyclesPerMicrosecond() )\n\n#define lowByte(w) ((uint8_t) ((w) & 0xff))\n#define highByte(w) ((uint8_t) ((w) >> 8))\n\n#define bitRead(value, bit) (((value) >> (bit)) & 0x01)\n#define bitSet(value, bit) ((value) |= (1UL << (bit)))\n#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))\n#define bitToggle(value, bit) ((value) ^= (1UL << (bit)))\n#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))\n\n// avr-libc defines _NOP() since 1.6.2\n#ifndef _NOP\n#define _NOP() do { __asm__ volatile (\"nop\"); } while (0)\n#endif\n\ntypedef unsigned int word;\n\n#define bit(b) (1UL << (b))\n\ntypedef bool boolean;\ntypedef uint8_t byte;\n\nvoid init(void);\nvoid initVariant(void);\n\nint atexit(void (*func)()) __attribute__((weak));\n\nvoid pinMode(uint8_t pin, uint8_t mode);\nvoid digitalWrite(uint8_t pin, uint8_t val);\nint digitalRead(uint8_t pin);\nint analogRead(uint8_t pin);\nvoid analogReference(uint8_t mode);\nvoid analogWrite(uint8_t pin, int val);\n\nunsigned long millis(void);\nunsigned long micros(void);\nvoid delay(unsigned long ms);\nvoid delayMicroseconds(unsigned int us);\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout);\n\nvoid shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val);\nuint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder);\n\nvoid attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode);\nvoid detachInterrupt(uint8_t interruptNum);\n\nvoid setup(void);\nvoid loop(void);\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n\n#define analogInPinToBit(P) (P)\n\n// On the ATmega1280, the addresses of some of the port registers are\n// greater than 255, so we can't store them in uint8_t's.\nextern const uint16_t PROGMEM port_to_mode_PGM[];\nextern const uint16_t PROGMEM port_to_input_PGM[];\nextern const uint16_t PROGMEM port_to_output_PGM[];\n\nextern const uint8_t PROGMEM digital_pin_to_port_PGM[];\n// extern const uint8_t PROGMEM digital_pin_to_bit_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_bit_mask_PGM[];\nextern const uint8_t PROGMEM digital_pin_to_timer_PGM[];\n\n// Get the bit location within the hardware port of the given virtual pin.\n// This comes from the pins_*.c file for the active board configuration.\n// \n// These perform slightly better as macros compared to inline functions\n//\n#define digitalPinToPort(P) ( pgm_read_byte( digital_pin_to_port_PGM + (P) ) )\n#define digitalPinToBitMask(P) ( pgm_read_byte( digital_pin_to_bit_mask_PGM + (P) ) )\n#define digitalPinToTimer(P) ( pgm_read_byte( digital_pin_to_timer_PGM + (P) ) )\n#define analogInPinToBit(P) (P)\n#define portOutputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_output_PGM + (P))) )\n#define portInputRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_input_PGM + (P))) )\n#define portModeRegister(P) ( (volatile uint8_t *)( pgm_read_word( port_to_mode_PGM + (P))) )\n\n#define NOT_A_PIN 0\n#define NOT_A_PORT 0\n\n#define NOT_AN_INTERRUPT -1\n\n#ifdef ARDUINO_MAIN\n#define PA 1\n#define PB 2\n#define PC 3\n#define PD 4\n#define PE 5\n#define PF 6\n#define PG 7\n#define PH 8\n#define PJ 10\n#define PK 11\n#define PL 12\n#endif\n\n#define NOT_ON_TIMER 0\n#define TIMER0A 1\n#define TIMER0B 2\n#define TIMER1A 3\n#define TIMER1B 4\n#define TIMER1C 5\n#define TIMER2  6\n#define TIMER2A 7\n#define TIMER2B 8\n\n#define TIMER3A 9\n#define TIMER3B 10\n#define TIMER3C 11\n#define TIMER4A 12\n#define TIMER4B 13\n#define TIMER4C 14\n#define TIMER4D 15\n#define TIMER5A 16\n#define TIMER5B 17\n#define TIMER5C 18\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#ifdef __cplusplus\n#include \"WCharacter.h\"\n#include \"WString.h\"\n#include \"HardwareSerial.h\"\n#include \"USBAPI.h\"\n#if defined(HAVE_HWSERIAL0) && defined(HAVE_CDCSERIAL)\n#error \"Targets with both UART0 and CDC serial not supported\"\n#endif\n\nuint16_t makeWord(uint16_t w);\nuint16_t makeWord(byte h, byte l);\n\n#define word(...) makeWord(__VA_ARGS__)\n\nunsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\nunsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout = 1000000L);\n\nvoid tone(uint8_t _pin, unsigned int frequency, unsigned long duration = 0);\nvoid noTone(uint8_t _pin);\n\n// WMath prototypes\nlong random(long);\nlong random(long, long);\nvoid randomSeed(unsigned long);\nlong map(long, long, long, long, long);\n\n#endif\n\n#include \"pins_arduino.h\"\n\n#endif\n"}}}Content-Length: 184

{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h"}}}
>>>
Content-Length: 194

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/lalit/Library/Arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/Arduino.h","diagnostics":[]},"jsonrpc":"2.0"}
<<<
Content-Length: 59

{"jsonrpc":"2.0","id":11,"method":"shutdown","params":null}
>>>
Content-Length: 39

{"id":11,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":46268,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1438

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","languageId":"cpp","version":1,"text":"void red() {\n\n  //set the LED pins to values that make red\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}\n\nvoid orange() {\n\n  //set the LED pins to values that make orange\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 90);\n  analogWrite(BluePin, 0);\n}\n\n\nvoid yellow() {\n\n  //set the LED pins to values that make yellow\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid green() {\n\n  //set the LED pins to values that make green\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid cyan() {\n\n  //set the LED pins to values that make cyan\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 100);\n}\nvoid blue() {\n\n  //set the LED pins to values that make blue\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid magenta() {\n\n  //set the LED pins to values that make magenta\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid turnOff() {\n\n  //set all three LED pins to 0 or OFF\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}"}}}Content-Length: 1029

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":1,"text":"\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\nint fourthKeyPin = 5;\n\nint RedPin = 9;\nint GreenPin = 10;\nint BluePin = 11;   \n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n  pinMode(fourthKeyPin, INPUT_PULLUP);  \n\n  //set the buzzer pin as an output\n  pinMode(RedPin, OUTPUT);\n  pinMode(BluePin, OUTPUT);\n  pinMode(GreenPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {\n    blue();      \n  } else if (digitalRead(secondKeyPin) == LOW) {\n    green();\n  } else if (digitalRead(thirdKeyPin) == LOW) {\n    orange();\n  } else if (digitalRead(fourthKeyPin) == LOW) {\n    red();\n  } else {\n    turnOff();\n  }\n}\n"}}}Content-Length: 269

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":23,"character":1},"end":{"line":23,"character":1}},"context":{"diagnostics":[]}}}Content-Length: 279

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":13,"character":23},"end":{"line":13,"character":35}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 793

{"id":2,"result":[{"title":"Expand macro 'INPUT_PULLUP'","kind":"refactor","command":{"title":"Expand macro 'INPUT_PULLUP'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server001368359/sketch/DigitalTrumpet.ino.cpp","selection":{"start":{"line":36,"character":23},"end":{"line":36,"character":35}}}]}},{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":13,"character":23},"end":{"line":13,"character":35}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":40},"end":{"line":27,"character":40}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":3,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":4,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":28}}}
>>>
Content-Length: 299

{"id":4,"result":[{"range":{"start":{"line":1,"character":4},"end":{"line":1,"character":15}},"kind":1},{"range":{"start":{"line":13,"character":10},"end":{"line":13,"character":21}},"kind":2},{"range":{"start":{"line":27,"character":18},"end":{"line":27,"character":29}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":28},"end":{"line":27,"character":28}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":18},"end":{"line":27,"character":29}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":6,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":7}}}
>>>
Content-Length: 284

{"id":7,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":50,"character":6},"end":{"line":50,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":6}}}
>>>
Content-Length: 284

{"id":8,"result":{"contents":{"kind":"markdown","value":"### function `digitalRead`  \n\n---\nâ†’ `int`  \nParameters:  \n- `uint8_t pin`\n\n---\n```cpp\nint digitalRead(uint8_t pin)\n```"},"range":{"start":{"line":50,"character":6},"end":{"line":50,"character":17}}},"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"jsonrpc":"2.0","id":9,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":6}}}
>>>
Content-Length: 390

{"id":9,"result":[{"range":{"start":{"line":27,"character":6},"end":{"line":27,"character":17}},"kind":1},{"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":24}},"kind":1},{"range":{"start":{"line":31,"character":13},"end":{"line":31,"character":24}},"kind":1},{"range":{"start":{"line":33,"character":13},"end":{"line":33,"character":24}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":9}}Content-Length: 279

{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":6},"end":{"line":27,"character":31}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 397

{"id":10,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":27,"character":6},"end":{"line":27,"character":31}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":6},"end":{"line":27,"character":30}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 397

{"id":11,"result":[{"title":"Extract subexpression to variable","kind":"refactor","command":{"title":"Extract subexpression to variable","command":"clangd.applyTweak","arguments":[{"tweakID":"ExtractVariable","file":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","selection":{"start":{"line":27,"character":6},"end":{"line":27,"character":30}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":8},"end":{"line":27,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":12,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 59

{"jsonrpc":"2.0","id":13,"method":"shutdown","params":null}
>>>
Content-Length: 39

{"id":13,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":51351,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1438

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","languageId":"cpp","version":1,"text":"void red() {\n\n  //set the LED pins to values that make red\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}\n\nvoid orange() {\n\n  //set the LED pins to values that make orange\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 90);\n  analogWrite(BluePin, 0);\n}\n\n\nvoid yellow() {\n\n  //set the LED pins to values that make yellow\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid green() {\n\n  //set the LED pins to values that make green\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid cyan() {\n\n  //set the LED pins to values that make cyan\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 100);\n}\nvoid blue() {\n\n  //set the LED pins to values that make blue\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid magenta() {\n\n  //set the LED pins to values that make magenta\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid turnOff() {\n\n  //set all three LED pins to 0 or OFF\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}"}}}Content-Length: 1029

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":1,"text":"\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\nint fourthKeyPin = 5;\n\nint RedPin = 9;\nint GreenPin = 10;\nint BluePin = 11;   \n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n  pinMode(fourthKeyPin, INPUT_PULLUP);  \n\n  //set the buzzer pin as an output\n  pinMode(RedPin, OUTPUT);\n  pinMode(BluePin, OUTPUT);\n  pinMode(GreenPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {\n    blue();      \n  } else if (digitalRead(secondKeyPin) == LOW) {\n    green();\n  } else if (digitalRead(thirdKeyPin) == LOW) {\n    orange();\n  } else if (digitalRead(fourthKeyPin) == LOW) {\n    red();\n  } else {\n    turnOff();\n  }\n}\n"}}}Content-Length: 269

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":23,"character":1},"end":{"line":23,"character":1}},"context":{"diagnostics":[]}}}Content-Length: 277

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":8},"end":{"line":27,"character":8}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":22,"character":21},"end":{"line":22,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":3,"result":[],"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":4,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":17}}}
>>>
Content-Length: 390

{"id":4,"result":[{"range":{"start":{"line":27,"character":6},"end":{"line":27,"character":17}},"kind":1},{"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":24}},"kind":1},{"range":{"start":{"line":31,"character":13},"end":{"line":31,"character":24}},"kind":1},{"range":{"start":{"line":33,"character":13},"end":{"line":33,"character":24}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":17},"end":{"line":27,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":2}}}
>>>
Content-Length: 38

{"id":6,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 216

{"jsonrpc":"2.0","id":7,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":27,"character":2}}}
>>>
Content-Length: 36

{"id":7,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":2},"end":{"line":29,"character":6}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":2},"end":{"line":29,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":9,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":2},"end":{"line":29,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":10,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 59

{"jsonrpc":"2.0","id":11,"method":"shutdown","params":null}
>>>
Content-Length: 39

{"id":11,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":52581,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1438

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","languageId":"cpp","version":1,"text":"void red() {\n\n  //set the LED pins to values that make red\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}\n\nvoid orange() {\n\n  //set the LED pins to values that make orange\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 90);\n  analogWrite(BluePin, 0);\n}\n\n\nvoid yellow() {\n\n  //set the LED pins to values that make yellow\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid green() {\n\n  //set the LED pins to values that make green\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid cyan() {\n\n  //set the LED pins to values that make cyan\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 100);\n}\nvoid blue() {\n\n  //set the LED pins to values that make blue\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid magenta() {\n\n  //set the LED pins to values that make magenta\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid turnOff() {\n\n  //set all three LED pins to 0 or OFF\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}"}}}Content-Length: 1029

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":1,"text":"\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\nint fourthKeyPin = 5;\n\nint RedPin = 9;\nint GreenPin = 10;\nint BluePin = 11;   \n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n  pinMode(fourthKeyPin, INPUT_PULLUP);  \n\n  //set the buzzer pin as an output\n  pinMode(RedPin, OUTPUT);\n  pinMode(BluePin, OUTPUT);\n  pinMode(GreenPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {\n    blue();      \n  } else if (digitalRead(secondKeyPin) == LOW) {\n    green();\n  } else if (digitalRead(thirdKeyPin) == LOW) {\n    orange();\n  } else if (digitalRead(fourthKeyPin) == LOW) {\n    red();\n  } else {\n    turnOff();\n  }\n}\n"}}}Content-Length: 269

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":23,"character":1},"end":{"line":23,"character":1}},"context":{"diagnostics":[]}}}Content-Length: 277

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":27,"character":2},"end":{"line":29,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":18}}}
>>>
Content-Length: 390

{"id":3,"result":[{"range":{"start":{"line":27,"character":6},"end":{"line":27,"character":17}},"kind":1},{"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":24}},"kind":1},{"range":{"start":{"line":31,"character":13},"end":{"line":31,"character":24}},"kind":1},{"range":{"start":{"line":33,"character":13},"end":{"line":33,"character":24}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}Content-Length: 216

{"jsonrpc":"2.0","id":4,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":7}}}
>>>
Content-Length: 298

{"id":4,"result":[{"range":{"start":{"line":24,"character":5},"end":{"line":24,"character":10}},"kind":1},{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":9}},"kind":1},{"range":{"start":{"line":24,"character":5},"end":{"line":24,"character":10}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":30,"character":7},"end":{"line":30,"character":7}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":5,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 204

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":30,"character":6}}}
>>>
Content-Length: 230

{"id":6,"result":{"contents":{"kind":"markdown","value":"### function `green`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid green()\n```"},"range":{"start":{"line":53,"character":4},"end":{"line":53,"character":9}}},"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":7,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":19}}}
>>>
Content-Length: 390

{"id":7,"result":[{"range":{"start":{"line":27,"character":6},"end":{"line":27,"character":17}},"kind":1},{"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":24}},"kind":1},{"range":{"start":{"line":31,"character":13},"end":{"line":31,"character":24}},"kind":1},{"range":{"start":{"line":33,"character":13},"end":{"line":33,"character":24}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 279

{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":19},"end":{"line":29,"character":19}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":8,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":9,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":37}}}
>>>
Content-Length: 390

{"id":9,"result":[{"range":{"start":{"line":27,"character":6},"end":{"line":27,"character":17}},"kind":1},{"range":{"start":{"line":29,"character":13},"end":{"line":29,"character":24}},"kind":1},{"range":{"start":{"line":31,"character":13},"end":{"line":31,"character":24}},"kind":1},{"range":{"start":{"line":33,"character":13},"end":{"line":33,"character":24}},"kind":1}],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":37},"end":{"line":29,"character":37}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":10,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 218

{"jsonrpc":"2.0","id":11,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":29,"character":45}}}
>>>
Content-Length: 37

{"id":11,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 280

{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":29,"character":45},"end":{"line":29,"character":45}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 414

{"id":12,"result":[{"title":"Expand macro 'LOW'","kind":"refactor","command":{"title":"Expand macro 'LOW'","command":"clangd.applyTweak","arguments":[{"tweakID":"ExpandMacro","file":"file:///private/var/folders/l5/z67pqhns5cn0vz66ch5549gm0000gn/T/arduino-language-server410679764/sketch/DigitalTrumpet.ino.cpp","selection":{"start":{"line":52,"character":45},"end":{"line":52,"character":45}}}]}}],"jsonrpc":"2.0"}
<<<
Content-Length: 217

{"jsonrpc":"2.0","id":13,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":4,"character":13}}}
>>>
Content-Length: 300

{"id":13,"result":[{"range":{"start":{"line":4,"character":4},"end":{"line":4,"character":16}},"kind":1},{"range":{"start":{"line":16,"character":10},"end":{"line":16,"character":22}},"kind":2},{"range":{"start":{"line":33,"character":25},"end":{"line":33,"character":37}},"kind":2}],"jsonrpc":"2.0"}
<<<
Content-Length: 277

{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":39,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":14,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 278

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":21},"end":{"line":4,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"id":15,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":21,"character":21}}}
>>>
Content-Length: 216

{"id":16,"result":{"contents":{"kind":"markdown","value":"### macro `OUTPUT`  \n\n---\n```cpp\n#define OUTPUT 0x1\n```"},"range":{"start":{"line":44,"character":20},"end":{"line":44,"character":26}}},"jsonrpc":"2.0"}
<<<
Content-Length: 206

{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"position":{"line":36,"character":13}}}
>>>
Content-Length: 237

{"id":17,"result":{"contents":{"kind":"markdown","value":"### function `turnOff`  \n\n---\nâ†’ `void`  \n\n---\n```cpp\nvoid turnOff()\n```"},"range":{"start":{"line":59,"character":13},"end":{"line":59,"character":14}}},"jsonrpc":"2.0"}
<<<
Content-Length: 59

{"jsonrpc":"2.0","id":18,"method":"shutdown","params":null}
>>>
Content-Length: 39

{"id":18,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3069

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":17097,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"/Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","rootUri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet","name":"DigitalTrumpet"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1438

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino","languageId":"cpp","version":1,"text":"void red() {\n\n  //set the LED pins to values that make red\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}\n\nvoid orange() {\n\n  //set the LED pins to values that make orange\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 90);\n  analogWrite(BluePin, 0);\n}\n\n\nvoid yellow() {\n\n  //set the LED pins to values that make yellow\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid green() {\n\n  //set the LED pins to values that make green\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 0);\n}\nvoid cyan() {\n\n  //set the LED pins to values that make cyan\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 100);\n  analogWrite(BluePin, 100);\n}\nvoid blue() {\n\n  //set the LED pins to values that make blue\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid magenta() {\n\n  //set the LED pins to values that make magenta\n  analogWrite(RedPin, 100);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 100);\n}\nvoid turnOff() {\n\n  //set all three LED pins to 0 or OFF\n  analogWrite(RedPin, 0);\n  analogWrite(GreenPin, 0);\n  analogWrite(BluePin, 0);\n}"}}}Content-Length: 1018

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino","languageId":"cpp","version":1,"text":"\nint firstKeyPin = 2;\nint secondKeyPin = 3;\nint thirdKeyPin = 4;\nint fourthKeyPin = 5;\n\nint RedPin = 9;\nint GreenPin = 10;\nint BluePin = 11;\n\n\nvoid setup() {\n  //set the button pins as inputs\n  pinMode(firstKeyPin, INPUT_PULLUP);\n  pinMode(secondKeyPin, INPUT_PULLUP);\n  pinMode(thirdKeyPin, INPUT_PULLUP);\n  pinMode(fourthKeyPin, INPUT_PULLUP);\n\n  //set the buzzer pin as an output\n  pinMode(RedPin, OUTPUT);\n  pinMode(BluePin, OUTPUT);\n  pinMode(GreenPin, OUTPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  if (digitalRead(firstKeyPin) == LOW) {\n    blue();\n  } else if (digitalRead(secondKeyPin) == LOW) {\n    green();\n  } else if (digitalRead(thirdKeyPin) == LOW) {\n    orange();\n  } else if (digitalRead(fourthKeyPin) == LOW) {\n    red();\n  } else {\n    turnOff();\n  }\n}\n"}}}Content-Length: 269

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/Colors.ino"},"range":{"start":{"line":23,"character":1},"end":{"line":23,"character":1}},"context":{"diagnostics":[]}}}Content-Length: 277

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":4,"character":21},"end":{"line":4,"character":21}},"context":{"diagnostics":[]}}}Content-Length: 277

{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/lalit/Desktop/Coding/Arduino/DigitalTrumpet/DigitalTrumpet.ino"},"range":{"start":{"line":8,"character":17},"end":{"line":8,"character":17}},"context":{"diagnostics":[]}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}Content-Length: 36

{"id":3,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"1/27","percentage":3.7037037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"2/27","percentage":7.407407407407407,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"3/27","percentage":11.11111111111111,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"4/27","percentage":14.814814814814815,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"5/27","percentage":18.51851851851852,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"6/27","percentage":22.22222222222222,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"7/27","percentage":25.925925925925927,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"8/27","percentage":29.62962962962963,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"9/27","percentage":33.333333333333336,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"10/27","percentage":37.03703703703704,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"11/27","percentage":40.74074074074074,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"12/27","percentage":44.44444444444444,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"13/27","percentage":48.148148148148145,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 160

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"14/27","percentage":51.851851851851855,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"15/27","percentage":55.55555555555556,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"16/27","percentage":59.25925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"17/27","percentage":62.96296296296296,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"18/27","percentage":66.66666666666667,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"19/27","percentage":70.37037037037037,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"20/27","percentage":74.07407407407408,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"21/27","percentage":77.77777777777777,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"22/27","percentage":81.48148148148148,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"23/27","percentage":85.18518518518519,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"24/27","percentage":88.88888888888889,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 158

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"25/27","percentage":92.5925925925926,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 159

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"message":"26/27","percentage":96.29629629629629,"kind":"report"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 58

{"jsonrpc":"2.0","id":4,"method":"shutdown","params":null}
>>>
Content-Length: 38

{"id":4,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}